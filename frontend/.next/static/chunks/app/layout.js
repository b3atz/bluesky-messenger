/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/../node_modules/@atproto/api/dist/index.js":
/*!**************************************************!*\
  !*** ../node_modules/@atproto/api/dist/index.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\nvar __copyProps = (to, from3, except, desc) => {\n  if (from3 && typeof from3 === \"object\" || typeof from3 === \"function\") {\n    for (let key of __getOwnPropNames(from3))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// ../../node_modules/graphemer/lib/boundaries.js\nvar require_boundaries = __commonJS({\n  \"../../node_modules/graphemer/lib/boundaries.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;\n    var CLUSTER_BREAK;\n    (function(CLUSTER_BREAK2) {\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"CR\"] = 0] = \"CR\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"LF\"] = 1] = \"LF\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"CONTROL\"] = 2] = \"CONTROL\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"EXTEND\"] = 3] = \"EXTEND\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"REGIONAL_INDICATOR\"] = 4] = \"REGIONAL_INDICATOR\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"SPACINGMARK\"] = 5] = \"SPACINGMARK\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"L\"] = 6] = \"L\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"V\"] = 7] = \"V\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"T\"] = 8] = \"T\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"LV\"] = 9] = \"LV\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"LVT\"] = 10] = \"LVT\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"OTHER\"] = 11] = \"OTHER\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"PREPEND\"] = 12] = \"PREPEND\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"E_BASE\"] = 13] = \"E_BASE\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"E_MODIFIER\"] = 14] = \"E_MODIFIER\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"ZWJ\"] = 15] = \"ZWJ\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"GLUE_AFTER_ZWJ\"] = 16] = \"GLUE_AFTER_ZWJ\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"E_BASE_GAZ\"] = 17] = \"E_BASE_GAZ\";\n    })(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));\n    exports.EXTENDED_PICTOGRAPHIC = 101;\n  }\n});\n\n// ../../node_modules/graphemer/lib/GraphemerHelper.js\nvar require_GraphemerHelper = __commonJS({\n  \"../../node_modules/graphemer/lib/GraphemerHelper.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var boundaries_1 = require_boundaries();\n    var NotBreak = 0;\n    var BreakStart = 1;\n    var Break = 2;\n    var BreakLastRegional = 3;\n    var BreakPenultimateRegional = 4;\n    var GraphemerHelper = class {\n      static isSurrogate(str, pos) {\n        return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;\n      }\n      static codePointAt(str, idx) {\n        if (idx === void 0) {\n          idx = 0;\n        }\n        const code2 = str.charCodeAt(idx);\n        if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {\n          const hi = code2;\n          const low = str.charCodeAt(idx + 1);\n          if (56320 <= low && low <= 57343) {\n            return (hi - 55296) * 1024 + (low - 56320) + 65536;\n          }\n          return hi;\n        }\n        if (56320 <= code2 && code2 <= 57343 && idx >= 1) {\n          const hi = str.charCodeAt(idx - 1);\n          const low = code2;\n          if (55296 <= hi && hi <= 56319) {\n            return (hi - 55296) * 1024 + (low - 56320) + 65536;\n          }\n          return low;\n        }\n        return code2;\n      }\n      static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {\n        const all = [start].concat(mid).concat([end]);\n        const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);\n        const previous = all[all.length - 2];\n        const next = end;\n        const nextEmoji = endEmoji;\n        const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);\n        if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {\n          return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n        }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {\n          if (all.filter(function(c) {\n            return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n          }).length % 2 === 1) {\n            return BreakLastRegional;\n          } else {\n            return BreakPenultimateRegional;\n          }\n        }\n        if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {\n          return NotBreak;\n        } else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {\n          return BreakStart;\n        } else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) {\n          return BreakStart;\n        } else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) {\n          return NotBreak;\n        } else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {\n          return NotBreak;\n        } else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) {\n          return NotBreak;\n        } else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {\n          return NotBreak;\n        } else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {\n          return NotBreak;\n        } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {\n          return NotBreak;\n        }\n        const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);\n        if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function(c) {\n          return c === boundaries_1.CLUSTER_BREAK.EXTEND;\n        }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {\n          return NotBreak;\n        }\n        if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {\n          return Break;\n        }\n        if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {\n          return NotBreak;\n        }\n        return BreakStart;\n      }\n    };\n    exports.default = GraphemerHelper;\n  }\n});\n\n// ../../node_modules/graphemer/lib/GraphemerIterator.js\nvar require_GraphemerIterator = __commonJS({\n  \"../../node_modules/graphemer/lib/GraphemerIterator.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var GraphemerIterator = class {\n      constructor(str, nextBreak) {\n        this._index = 0;\n        this._str = str;\n        this._nextBreak = nextBreak;\n      }\n      [Symbol.iterator]() {\n        return this;\n      }\n      next() {\n        let brk;\n        if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {\n          const value = this._str.slice(this._index, brk);\n          this._index = brk;\n          return { value, done: false };\n        }\n        if (this._index < this._str.length) {\n          const value = this._str.slice(this._index);\n          this._index = this._str.length;\n          return { value, done: false };\n        }\n        return { value: void 0, done: true };\n      }\n    };\n    exports.default = GraphemerIterator;\n  }\n});\n\n// ../../node_modules/graphemer/lib/Graphemer.js\nvar require_Graphemer = __commonJS({\n  \"../../node_modules/graphemer/lib/Graphemer.js\"(exports) {\n    \"use strict\";\n    var __importDefault = exports && exports.__importDefault || function(mod) {\n      return mod && mod.__esModule ? mod : { \"default\": mod };\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var boundaries_1 = require_boundaries();\n    var GraphemerHelper_1 = __importDefault(require_GraphemerHelper());\n    var GraphemerIterator_1 = __importDefault(require_GraphemerIterator());\n    var Graphemer2 = class {\n      static nextBreak(string3, index) {\n        if (index === void 0) {\n          index = 0;\n        }\n        if (index < 0) {\n          return 0;\n        }\n        if (index >= string3.length - 1) {\n          return string3.length;\n        }\n        const prevCP = GraphemerHelper_1.default.codePointAt(string3, index);\n        const prev = Graphemer2.getGraphemeBreakProperty(prevCP);\n        const prevEmoji = Graphemer2.getEmojiProperty(prevCP);\n        const mid = [];\n        const midEmoji = [];\n        for (let i = index + 1; i < string3.length; i++) {\n          if (GraphemerHelper_1.default.isSurrogate(string3, i - 1)) {\n            continue;\n          }\n          const nextCP = GraphemerHelper_1.default.codePointAt(string3, i);\n          const next = Graphemer2.getGraphemeBreakProperty(nextCP);\n          const nextEmoji = Graphemer2.getEmojiProperty(nextCP);\n          if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {\n            return i;\n          }\n          mid.push(next);\n          midEmoji.push(nextEmoji);\n        }\n        return string3.length;\n      }\n      splitGraphemes(str) {\n        const res = [];\n        let index = 0;\n        let brk;\n        while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {\n          res.push(str.slice(index, brk));\n          index = brk;\n        }\n        if (index < str.length) {\n          res.push(str.slice(index));\n        }\n        return res;\n      }\n      iterateGraphemes(str) {\n        return new GraphemerIterator_1.default(str, Graphemer2.nextBreak);\n      }\n      countGraphemes(str) {\n        let count = 0;\n        let index = 0;\n        let brk;\n        while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {\n          index = brk;\n          count++;\n        }\n        if (index < str.length) {\n          count++;\n        }\n        return count;\n      }\n      static getGraphemeBreakProperty(code2) {\n        if (code2 < 48905) {\n          if (code2 < 44116) {\n            if (code2 < 4141) {\n              if (code2 < 2818) {\n                if (code2 < 2363) {\n                  if (code2 < 1759) {\n                    if (code2 < 1471) {\n                      if (code2 < 127) {\n                        if (code2 < 11) {\n                          if (code2 < 10) {\n                            if (0 <= code2 && code2 <= 9) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (10 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LF;\n                            }\n                          }\n                        } else {\n                          if (code2 < 13) {\n                            if (11 <= code2 && code2 <= 12) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 14) {\n                              if (13 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.CR;\n                              }\n                            } else {\n                              if (14 <= code2 && code2 <= 31) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 768) {\n                          if (code2 < 173) {\n                            if (127 <= code2 && code2 <= 159) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (173 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          }\n                        } else {\n                          if (code2 < 1155) {\n                            if (768 <= code2 && code2 <= 879) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1425) {\n                              if (1155 <= code2 && code2 <= 1161) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (1425 <= code2 && code2 <= 1469) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 1552) {\n                        if (code2 < 1476) {\n                          if (code2 < 1473) {\n                            if (1471 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (1473 <= code2 && code2 <= 1474) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 1479) {\n                            if (1476 <= code2 && code2 <= 1477) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1536) {\n                              if (1479 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (1536 <= code2 && code2 <= 1541) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 1648) {\n                          if (code2 < 1564) {\n                            if (1552 <= code2 && code2 <= 1562) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1611) {\n                              if (1564 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (1611 <= code2 && code2 <= 1631) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 1750) {\n                            if (1648 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1757) {\n                              if (1750 <= code2 && code2 <= 1756) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (1757 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 2075) {\n                      if (code2 < 1840) {\n                        if (code2 < 1770) {\n                          if (code2 < 1767) {\n                            if (1759 <= code2 && code2 <= 1764) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (1767 <= code2 && code2 <= 1768) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 1807) {\n                            if (1770 <= code2 && code2 <= 1773) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (1807 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                            if (1809 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2027) {\n                          if (code2 < 1958) {\n                            if (1840 <= code2 && code2 <= 1866) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (1958 <= code2 && code2 <= 1968) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2045) {\n                            if (2027 <= code2 && code2 <= 2035) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2070) {\n                              if (2045 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2070 <= code2 && code2 <= 2073) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 2200) {\n                        if (code2 < 2089) {\n                          if (code2 < 2085) {\n                            if (2075 <= code2 && code2 <= 2083) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (2085 <= code2 && code2 <= 2087) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2137) {\n                            if (2089 <= code2 && code2 <= 2093) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2192) {\n                              if (2137 <= code2 && code2 <= 2139) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2192 <= code2 && code2 <= 2193) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2275) {\n                          if (code2 < 2250) {\n                            if (2200 <= code2 && code2 <= 2207) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2274) {\n                              if (2250 <= code2 && code2 <= 2273) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2274 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2307) {\n                            if (2275 <= code2 && code2 <= 2306) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (2307 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (2362 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 2561) {\n                    if (code2 < 2434) {\n                      if (code2 < 2381) {\n                        if (code2 < 2366) {\n                          if (2363 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (2364 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 2369) {\n                            if (2366 <= code2 && code2 <= 2368) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2377) {\n                              if (2369 <= code2 && code2 <= 2376) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2377 <= code2 && code2 <= 2380) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2385) {\n                          if (code2 < 2382) {\n                            if (2381 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (2382 <= code2 && code2 <= 2383) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2402) {\n                            if (2385 <= code2 && code2 <= 2391) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2433) {\n                              if (2402 <= code2 && code2 <= 2403) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2433 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 2503) {\n                        if (code2 < 2494) {\n                          if (code2 < 2492) {\n                            if (2434 <= code2 && code2 <= 2435) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (2492 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2495) {\n                            if (2494 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2497) {\n                              if (2495 <= code2 && code2 <= 2496) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2497 <= code2 && code2 <= 2500) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2519) {\n                          if (code2 < 2507) {\n                            if (2503 <= code2 && code2 <= 2504) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2509) {\n                              if (2507 <= code2 && code2 <= 2508) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2509 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2530) {\n                            if (2519 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2558) {\n                              if (2530 <= code2 && code2 <= 2531) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2558 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 2691) {\n                      if (code2 < 2631) {\n                        if (code2 < 2620) {\n                          if (code2 < 2563) {\n                            if (2561 <= code2 && code2 <= 2562) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (2563 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2622) {\n                            if (2620 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2625) {\n                              if (2622 <= code2 && code2 <= 2624) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2625 <= code2 && code2 <= 2626) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2672) {\n                          if (code2 < 2635) {\n                            if (2631 <= code2 && code2 <= 2632) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2641) {\n                              if (2635 <= code2 && code2 <= 2637) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2641 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2677) {\n                            if (2672 <= code2 && code2 <= 2673) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2689) {\n                              if (2677 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2689 <= code2 && code2 <= 2690) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 2761) {\n                        if (code2 < 2750) {\n                          if (2691 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (2748 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 2753) {\n                            if (2750 <= code2 && code2 <= 2752) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2759) {\n                              if (2753 <= code2 && code2 <= 2757) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2759 <= code2 && code2 <= 2760) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2786) {\n                          if (code2 < 2763) {\n                            if (2761 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2765) {\n                              if (2763 <= code2 && code2 <= 2764) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2765 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2810) {\n                            if (2786 <= code2 && code2 <= 2787) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2817) {\n                              if (2810 <= code2 && code2 <= 2815) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2817 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 3315) {\n                  if (code2 < 3076) {\n                    if (code2 < 2946) {\n                      if (code2 < 2887) {\n                        if (code2 < 2878) {\n                          if (code2 < 2876) {\n                            if (2818 <= code2 && code2 <= 2819) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (2876 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2880) {\n                            if (2878 <= code2 && code2 <= 2879) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2881) {\n                              if (2880 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2881 <= code2 && code2 <= 2884) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2893) {\n                          if (code2 < 2891) {\n                            if (2887 <= code2 && code2 <= 2888) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (2891 <= code2 && code2 <= 2892) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2901) {\n                            if (2893 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2914) {\n                              if (2901 <= code2 && code2 <= 2903) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2914 <= code2 && code2 <= 2915) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3014) {\n                        if (code2 < 3007) {\n                          if (2946 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (3006 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3008) {\n                            if (3007 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3009) {\n                              if (3008 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3009 <= code2 && code2 <= 3010) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3031) {\n                          if (code2 < 3018) {\n                            if (3014 <= code2 && code2 <= 3016) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3021) {\n                              if (3018 <= code2 && code2 <= 3020) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3021 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3072) {\n                            if (3031 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3073) {\n                              if (3072 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3073 <= code2 && code2 <= 3075) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 3262) {\n                      if (code2 < 3146) {\n                        if (code2 < 3134) {\n                          if (3076 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (3132 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3137) {\n                            if (3134 <= code2 && code2 <= 3136) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3142) {\n                              if (3137 <= code2 && code2 <= 3140) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3142 <= code2 && code2 <= 3144) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3201) {\n                          if (code2 < 3157) {\n                            if (3146 <= code2 && code2 <= 3149) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3170) {\n                              if (3157 <= code2 && code2 <= 3158) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3170 <= code2 && code2 <= 3171) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3202) {\n                            if (3201 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3260) {\n                              if (3202 <= code2 && code2 <= 3203) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3260 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3270) {\n                        if (code2 < 3264) {\n                          if (3262 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (3263 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3266) {\n                            if (3264 <= code2 && code2 <= 3265) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3267) {\n                              if (3266 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3267 <= code2 && code2 <= 3268) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3276) {\n                          if (code2 < 3271) {\n                            if (3270 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3274) {\n                              if (3271 <= code2 && code2 <= 3272) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3274 <= code2 && code2 <= 3275) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3285) {\n                            if (3276 <= code2 && code2 <= 3277) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3298) {\n                              if (3285 <= code2 && code2 <= 3286) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3298 <= code2 && code2 <= 3299) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 3551) {\n                    if (code2 < 3406) {\n                      if (code2 < 3391) {\n                        if (code2 < 3330) {\n                          if (code2 < 3328) {\n                            if (3315 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (3328 <= code2 && code2 <= 3329) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3387) {\n                            if (3330 <= code2 && code2 <= 3331) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3390) {\n                              if (3387 <= code2 && code2 <= 3388) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3390 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3398) {\n                          if (code2 < 3393) {\n                            if (3391 <= code2 && code2 <= 3392) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (3393 <= code2 && code2 <= 3396) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3402) {\n                            if (3398 <= code2 && code2 <= 3400) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3405) {\n                              if (3402 <= code2 && code2 <= 3404) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3405 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3530) {\n                        if (code2 < 3426) {\n                          if (3406 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.PREPEND;\n                          }\n                          if (3415 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3457) {\n                            if (3426 <= code2 && code2 <= 3427) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3458) {\n                              if (3457 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3458 <= code2 && code2 <= 3459) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3538) {\n                          if (code2 < 3535) {\n                            if (3530 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3536) {\n                              if (3535 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3536 <= code2 && code2 <= 3537) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3542) {\n                            if (3538 <= code2 && code2 <= 3540) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3544) {\n                              if (3542 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3544 <= code2 && code2 <= 3550) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 3893) {\n                      if (code2 < 3655) {\n                        if (code2 < 3633) {\n                          if (code2 < 3570) {\n                            if (3551 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (3570 <= code2 && code2 <= 3571) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3635) {\n                            if (3633 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3636) {\n                              if (3635 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3636 <= code2 && code2 <= 3642) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3764) {\n                          if (code2 < 3761) {\n                            if (3655 <= code2 && code2 <= 3662) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (3761 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (3763 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3784) {\n                            if (3764 <= code2 && code2 <= 3772) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3864) {\n                              if (3784 <= code2 && code2 <= 3790) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3864 <= code2 && code2 <= 3865) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3967) {\n                        if (code2 < 3897) {\n                          if (3893 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (3895 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3902) {\n                            if (3897 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3953) {\n                              if (3902 <= code2 && code2 <= 3903) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3953 <= code2 && code2 <= 3966) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3981) {\n                          if (code2 < 3968) {\n                            if (3967 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3974) {\n                              if (3968 <= code2 && code2 <= 3972) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3974 <= code2 && code2 <= 3975) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3993) {\n                            if (3981 <= code2 && code2 <= 3991) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 4038) {\n                              if (3993 <= code2 && code2 <= 4028) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (4038 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 7204) {\n                if (code2 < 6448) {\n                  if (code2 < 5938) {\n                    if (code2 < 4226) {\n                      if (code2 < 4157) {\n                        if (code2 < 4146) {\n                          if (code2 < 4145) {\n                            if (4141 <= code2 && code2 <= 4144) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (4145 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 4153) {\n                            if (4146 <= code2 && code2 <= 4151) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 4155) {\n                              if (4153 <= code2 && code2 <= 4154) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (4155 <= code2 && code2 <= 4156) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 4184) {\n                          if (code2 < 4182) {\n                            if (4157 <= code2 && code2 <= 4158) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (4182 <= code2 && code2 <= 4183) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 4190) {\n                            if (4184 <= code2 && code2 <= 4185) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 4209) {\n                              if (4190 <= code2 && code2 <= 4192) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (4209 <= code2 && code2 <= 4212) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 4352) {\n                        if (code2 < 4229) {\n                          if (4226 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (4228 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                        } else {\n                          if (code2 < 4237) {\n                            if (4229 <= code2 && code2 <= 4230) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (4237 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (4253 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 4957) {\n                          if (code2 < 4448) {\n                            if (4352 <= code2 && code2 <= 4447) {\n                              return boundaries_1.CLUSTER_BREAK.L;\n                            }\n                          } else {\n                            if (code2 < 4520) {\n                              if (4448 <= code2 && code2 <= 4519) {\n                                return boundaries_1.CLUSTER_BREAK.V;\n                              }\n                            } else {\n                              if (4520 <= code2 && code2 <= 4607) {\n                                return boundaries_1.CLUSTER_BREAK.T;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 5906) {\n                            if (4957 <= code2 && code2 <= 4959) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 5909) {\n                              if (5906 <= code2 && code2 <= 5908) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (5909 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 6089) {\n                      if (code2 < 6070) {\n                        if (code2 < 5970) {\n                          if (code2 < 5940) {\n                            if (5938 <= code2 && code2 <= 5939) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (5940 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6002) {\n                            if (5970 <= code2 && code2 <= 5971) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6068) {\n                              if (6002 <= code2 && code2 <= 6003) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6068 <= code2 && code2 <= 6069) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6078) {\n                          if (code2 < 6071) {\n                            if (6070 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (6071 <= code2 && code2 <= 6077) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6086) {\n                            if (6078 <= code2 && code2 <= 6085) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6087) {\n                              if (6086 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6087 <= code2 && code2 <= 6088) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 6277) {\n                        if (code2 < 6155) {\n                          if (code2 < 6109) {\n                            if (6089 <= code2 && code2 <= 6099) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (6109 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6158) {\n                            if (6155 <= code2 && code2 <= 6157) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (6158 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                            if (6159 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6435) {\n                          if (code2 < 6313) {\n                            if (6277 <= code2 && code2 <= 6278) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6432) {\n                              if (6313 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6432 <= code2 && code2 <= 6434) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 6439) {\n                            if (6435 <= code2 && code2 <= 6438) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6441) {\n                              if (6439 <= code2 && code2 <= 6440) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6441 <= code2 && code2 <= 6443) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 6971) {\n                    if (code2 < 6744) {\n                      if (code2 < 6681) {\n                        if (code2 < 6451) {\n                          if (code2 < 6450) {\n                            if (6448 <= code2 && code2 <= 6449) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (6450 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6457) {\n                            if (6451 <= code2 && code2 <= 6456) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6679) {\n                              if (6457 <= code2 && code2 <= 6459) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6679 <= code2 && code2 <= 6680) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6741) {\n                          if (code2 < 6683) {\n                            if (6681 <= code2 && code2 <= 6682) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (6683 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6742) {\n                            if (6741 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (6742 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (6743 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 6771) {\n                        if (code2 < 6754) {\n                          if (code2 < 6752) {\n                            if (6744 <= code2 && code2 <= 6750) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (6752 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6757) {\n                            if (6754 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6765) {\n                              if (6757 <= code2 && code2 <= 6764) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6765 <= code2 && code2 <= 6770) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6912) {\n                          if (code2 < 6783) {\n                            if (6771 <= code2 && code2 <= 6780) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6832) {\n                              if (6783 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6832 <= code2 && code2 <= 6862) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 6916) {\n                            if (6912 <= code2 && code2 <= 6915) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6964) {\n                              if (6916 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (6964 <= code2 && code2 <= 6970) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 7080) {\n                      if (code2 < 7019) {\n                        if (code2 < 6973) {\n                          if (6971 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (6972 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 6978) {\n                            if (6973 <= code2 && code2 <= 6977) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6979) {\n                              if (6978 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6979 <= code2 && code2 <= 6980) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 7073) {\n                          if (code2 < 7040) {\n                            if (7019 <= code2 && code2 <= 7027) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 7042) {\n                              if (7040 <= code2 && code2 <= 7041) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (7042 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 7074) {\n                            if (7073 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 7078) {\n                              if (7074 <= code2 && code2 <= 7077) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (7078 <= code2 && code2 <= 7079) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 7144) {\n                        if (code2 < 7083) {\n                          if (code2 < 7082) {\n                            if (7080 <= code2 && code2 <= 7081) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (7082 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 7142) {\n                            if (7083 <= code2 && code2 <= 7085) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (7142 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (7143 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 7150) {\n                          if (code2 < 7146) {\n                            if (7144 <= code2 && code2 <= 7145) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 7149) {\n                              if (7146 <= code2 && code2 <= 7148) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (7149 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 7151) {\n                            if (7150 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 7154) {\n                              if (7151 <= code2 && code2 <= 7153) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (7154 <= code2 && code2 <= 7155) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 43346) {\n                  if (code2 < 11647) {\n                    if (code2 < 7415) {\n                      if (code2 < 7380) {\n                        if (code2 < 7220) {\n                          if (code2 < 7212) {\n                            if (7204 <= code2 && code2 <= 7211) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (7212 <= code2 && code2 <= 7219) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 7222) {\n                            if (7220 <= code2 && code2 <= 7221) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 7376) {\n                              if (7222 <= code2 && code2 <= 7223) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (7376 <= code2 && code2 <= 7378) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 7394) {\n                          if (code2 < 7393) {\n                            if (7380 <= code2 && code2 <= 7392) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (7393 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 7405) {\n                            if (7394 <= code2 && code2 <= 7400) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (7405 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (7412 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 8205) {\n                        if (code2 < 7616) {\n                          if (code2 < 7416) {\n                            if (7415 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (7416 <= code2 && code2 <= 7417) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 8203) {\n                            if (7616 <= code2 && code2 <= 7679) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (8203 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                            if (8204 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 8288) {\n                          if (code2 < 8206) {\n                            if (8205 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.ZWJ;\n                            }\n                          } else {\n                            if (code2 < 8232) {\n                              if (8206 <= code2 && code2 <= 8207) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (8232 <= code2 && code2 <= 8238) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 8400) {\n                            if (8288 <= code2 && code2 <= 8303) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 11503) {\n                              if (8400 <= code2 && code2 <= 8432) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (11503 <= code2 && code2 <= 11505) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 43043) {\n                      if (code2 < 42612) {\n                        if (code2 < 12330) {\n                          if (code2 < 11744) {\n                            if (11647 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (11744 <= code2 && code2 <= 11775) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 12441) {\n                            if (12330 <= code2 && code2 <= 12335) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 42607) {\n                              if (12441 <= code2 && code2 <= 12442) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (42607 <= code2 && code2 <= 42610) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43010) {\n                          if (code2 < 42654) {\n                            if (42612 <= code2 && code2 <= 42621) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 42736) {\n                              if (42654 <= code2 && code2 <= 42655) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (42736 <= code2 && code2 <= 42737) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 43014) {\n                            if (43010 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43014 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (43019 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 43188) {\n                        if (code2 < 43047) {\n                          if (code2 < 43045) {\n                            if (43043 <= code2 && code2 <= 43044) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (43045 <= code2 && code2 <= 43046) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43052) {\n                            if (43047 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43136) {\n                              if (43052 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43136 <= code2 && code2 <= 43137) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43263) {\n                          if (code2 < 43204) {\n                            if (43188 <= code2 && code2 <= 43203) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43232) {\n                              if (43204 <= code2 && code2 <= 43205) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43232 <= code2 && code2 <= 43249) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 43302) {\n                            if (43263 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 43335) {\n                              if (43302 <= code2 && code2 <= 43309) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43335 <= code2 && code2 <= 43345) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 43698) {\n                    if (code2 < 43493) {\n                      if (code2 < 43444) {\n                        if (code2 < 43392) {\n                          if (code2 < 43360) {\n                            if (43346 <= code2 && code2 <= 43347) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (43360 <= code2 && code2 <= 43388) {\n                              return boundaries_1.CLUSTER_BREAK.L;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43395) {\n                            if (43392 <= code2 && code2 <= 43394) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43395 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (43443 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43450) {\n                          if (code2 < 43446) {\n                            if (43444 <= code2 && code2 <= 43445) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (43446 <= code2 && code2 <= 43449) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43452) {\n                            if (43450 <= code2 && code2 <= 43451) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43454) {\n                              if (43452 <= code2 && code2 <= 43453) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43454 <= code2 && code2 <= 43456) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 43573) {\n                        if (code2 < 43567) {\n                          if (code2 < 43561) {\n                            if (43493 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43561 <= code2 && code2 <= 43566) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43569) {\n                            if (43567 <= code2 && code2 <= 43568) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43571) {\n                              if (43569 <= code2 && code2 <= 43570) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43571 <= code2 && code2 <= 43572) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43597) {\n                          if (code2 < 43587) {\n                            if (43573 <= code2 && code2 <= 43574) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43587 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (43596 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43644) {\n                            if (43597 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (43644 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (43696 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 44006) {\n                      if (code2 < 43756) {\n                        if (code2 < 43710) {\n                          if (code2 < 43703) {\n                            if (43698 <= code2 && code2 <= 43700) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43703 <= code2 && code2 <= 43704) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43713) {\n                            if (43710 <= code2 && code2 <= 43711) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43713 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (43755 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43766) {\n                          if (code2 < 43758) {\n                            if (43756 <= code2 && code2 <= 43757) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 43765) {\n                              if (43758 <= code2 && code2 <= 43759) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (43765 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44003) {\n                            if (43766 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 44005) {\n                              if (44003 <= code2 && code2 <= 44004) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (44005 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44032) {\n                        if (code2 < 44009) {\n                          if (code2 < 44008) {\n                            if (44006 <= code2 && code2 <= 44007) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (44008 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44012) {\n                            if (44009 <= code2 && code2 <= 44010) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (44012 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (44013 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44061) {\n                          if (code2 < 44033) {\n                            if (44032 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44060) {\n                              if (44033 <= code2 && code2 <= 44059) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44060 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44088) {\n                            if (44061 <= code2 && code2 <= 44087) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44089) {\n                              if (44088 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44089 <= code2 && code2 <= 44115) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 46497) {\n              if (code2 < 45293) {\n                if (code2 < 44704) {\n                  if (code2 < 44397) {\n                    if (code2 < 44256) {\n                      if (code2 < 44173) {\n                        if (code2 < 44144) {\n                          if (code2 < 44117) {\n                            if (44116 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44117 <= code2 && code2 <= 44143) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44145) {\n                            if (44144 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44172) {\n                              if (44145 <= code2 && code2 <= 44171) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44172 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44201) {\n                          if (code2 < 44200) {\n                            if (44173 <= code2 && code2 <= 44199) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (44200 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44228) {\n                            if (44201 <= code2 && code2 <= 44227) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44229) {\n                              if (44228 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44229 <= code2 && code2 <= 44255) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44313) {\n                        if (code2 < 44284) {\n                          if (code2 < 44257) {\n                            if (44256 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44257 <= code2 && code2 <= 44283) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44285) {\n                            if (44284 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44312) {\n                              if (44285 <= code2 && code2 <= 44311) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44312 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44368) {\n                          if (code2 < 44340) {\n                            if (44313 <= code2 && code2 <= 44339) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44341) {\n                              if (44340 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44341 <= code2 && code2 <= 44367) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44369) {\n                            if (44368 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44396) {\n                              if (44369 <= code2 && code2 <= 44395) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44396 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 44537) {\n                      if (code2 < 44480) {\n                        if (code2 < 44425) {\n                          if (code2 < 44424) {\n                            if (44397 <= code2 && code2 <= 44423) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (44424 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44452) {\n                            if (44425 <= code2 && code2 <= 44451) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44453) {\n                              if (44452 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44453 <= code2 && code2 <= 44479) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44508) {\n                          if (code2 < 44481) {\n                            if (44480 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44481 <= code2 && code2 <= 44507) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44509) {\n                            if (44508 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44536) {\n                              if (44509 <= code2 && code2 <= 44535) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44536 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44620) {\n                        if (code2 < 44565) {\n                          if (code2 < 44564) {\n                            if (44537 <= code2 && code2 <= 44563) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (44564 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44592) {\n                            if (44565 <= code2 && code2 <= 44591) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44593) {\n                              if (44592 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44593 <= code2 && code2 <= 44619) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44649) {\n                          if (code2 < 44621) {\n                            if (44620 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44648) {\n                              if (44621 <= code2 && code2 <= 44647) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44648 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44676) {\n                            if (44649 <= code2 && code2 <= 44675) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44677) {\n                              if (44676 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44677 <= code2 && code2 <= 44703) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 44985) {\n                    if (code2 < 44844) {\n                      if (code2 < 44761) {\n                        if (code2 < 44732) {\n                          if (code2 < 44705) {\n                            if (44704 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44705 <= code2 && code2 <= 44731) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44733) {\n                            if (44732 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44760) {\n                              if (44733 <= code2 && code2 <= 44759) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44760 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44789) {\n                          if (code2 < 44788) {\n                            if (44761 <= code2 && code2 <= 44787) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (44788 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44816) {\n                            if (44789 <= code2 && code2 <= 44815) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44817) {\n                              if (44816 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44817 <= code2 && code2 <= 44843) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44901) {\n                        if (code2 < 44872) {\n                          if (code2 < 44845) {\n                            if (44844 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44845 <= code2 && code2 <= 44871) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44873) {\n                            if (44872 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44900) {\n                              if (44873 <= code2 && code2 <= 44899) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44900 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44956) {\n                          if (code2 < 44928) {\n                            if (44901 <= code2 && code2 <= 44927) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44929) {\n                              if (44928 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44929 <= code2 && code2 <= 44955) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44957) {\n                            if (44956 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44984) {\n                              if (44957 <= code2 && code2 <= 44983) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (44984 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 45152) {\n                      if (code2 < 45068) {\n                        if (code2 < 45013) {\n                          if (code2 < 45012) {\n                            if (44985 <= code2 && code2 <= 45011) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (45012 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45040) {\n                            if (45013 <= code2 && code2 <= 45039) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45041) {\n                              if (45040 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45041 <= code2 && code2 <= 45067) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45097) {\n                          if (code2 < 45069) {\n                            if (45068 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45096) {\n                              if (45069 <= code2 && code2 <= 45095) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45096 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45124) {\n                            if (45097 <= code2 && code2 <= 45123) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45125) {\n                              if (45124 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45125 <= code2 && code2 <= 45151) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 45209) {\n                        if (code2 < 45180) {\n                          if (code2 < 45153) {\n                            if (45152 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45153 <= code2 && code2 <= 45179) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45181) {\n                            if (45180 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45208) {\n                              if (45181 <= code2 && code2 <= 45207) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45208 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45264) {\n                          if (code2 < 45236) {\n                            if (45209 <= code2 && code2 <= 45235) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45237) {\n                              if (45236 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45237 <= code2 && code2 <= 45263) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45265) {\n                            if (45264 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45292) {\n                              if (45265 <= code2 && code2 <= 45291) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45292 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 45908) {\n                  if (code2 < 45600) {\n                    if (code2 < 45433) {\n                      if (code2 < 45376) {\n                        if (code2 < 45321) {\n                          if (code2 < 45320) {\n                            if (45293 <= code2 && code2 <= 45319) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (45320 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45348) {\n                            if (45321 <= code2 && code2 <= 45347) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45349) {\n                              if (45348 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45349 <= code2 && code2 <= 45375) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45404) {\n                          if (code2 < 45377) {\n                            if (45376 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45377 <= code2 && code2 <= 45403) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45405) {\n                            if (45404 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45432) {\n                              if (45405 <= code2 && code2 <= 45431) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45432 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 45516) {\n                        if (code2 < 45461) {\n                          if (code2 < 45460) {\n                            if (45433 <= code2 && code2 <= 45459) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (45460 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45488) {\n                            if (45461 <= code2 && code2 <= 45487) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45489) {\n                              if (45488 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45489 <= code2 && code2 <= 45515) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45545) {\n                          if (code2 < 45517) {\n                            if (45516 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45544) {\n                              if (45517 <= code2 && code2 <= 45543) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45544 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45572) {\n                            if (45545 <= code2 && code2 <= 45571) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45573) {\n                              if (45572 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45573 <= code2 && code2 <= 45599) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 45741) {\n                      if (code2 < 45657) {\n                        if (code2 < 45628) {\n                          if (code2 < 45601) {\n                            if (45600 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45601 <= code2 && code2 <= 45627) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45629) {\n                            if (45628 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45656) {\n                              if (45629 <= code2 && code2 <= 45655) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45656 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45712) {\n                          if (code2 < 45684) {\n                            if (45657 <= code2 && code2 <= 45683) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45685) {\n                              if (45684 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45685 <= code2 && code2 <= 45711) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45713) {\n                            if (45712 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45740) {\n                              if (45713 <= code2 && code2 <= 45739) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45740 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 45824) {\n                        if (code2 < 45769) {\n                          if (code2 < 45768) {\n                            if (45741 <= code2 && code2 <= 45767) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (45768 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45796) {\n                            if (45769 <= code2 && code2 <= 45795) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45797) {\n                              if (45796 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45797 <= code2 && code2 <= 45823) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45853) {\n                          if (code2 < 45825) {\n                            if (45824 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45852) {\n                              if (45825 <= code2 && code2 <= 45851) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45852 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45880) {\n                            if (45853 <= code2 && code2 <= 45879) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45881) {\n                              if (45880 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45881 <= code2 && code2 <= 45907) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 46189) {\n                    if (code2 < 46048) {\n                      if (code2 < 45965) {\n                        if (code2 < 45936) {\n                          if (code2 < 45909) {\n                            if (45908 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45909 <= code2 && code2 <= 45935) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45937) {\n                            if (45936 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45964) {\n                              if (45937 <= code2 && code2 <= 45963) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (45964 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45993) {\n                          if (code2 < 45992) {\n                            if (45965 <= code2 && code2 <= 45991) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (45992 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46020) {\n                            if (45993 <= code2 && code2 <= 46019) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46021) {\n                              if (46020 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46021 <= code2 && code2 <= 46047) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 46105) {\n                        if (code2 < 46076) {\n                          if (code2 < 46049) {\n                            if (46048 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46049 <= code2 && code2 <= 46075) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46077) {\n                            if (46076 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46104) {\n                              if (46077 <= code2 && code2 <= 46103) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46104 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46160) {\n                          if (code2 < 46132) {\n                            if (46105 <= code2 && code2 <= 46131) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46133) {\n                              if (46132 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46133 <= code2 && code2 <= 46159) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46161) {\n                            if (46160 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46188) {\n                              if (46161 <= code2 && code2 <= 46187) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46188 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 46356) {\n                      if (code2 < 46272) {\n                        if (code2 < 46217) {\n                          if (code2 < 46216) {\n                            if (46189 <= code2 && code2 <= 46215) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (46216 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46244) {\n                            if (46217 <= code2 && code2 <= 46243) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46245) {\n                              if (46244 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46245 <= code2 && code2 <= 46271) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46301) {\n                          if (code2 < 46273) {\n                            if (46272 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46300) {\n                              if (46273 <= code2 && code2 <= 46299) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46300 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46328) {\n                            if (46301 <= code2 && code2 <= 46327) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46329) {\n                              if (46328 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46329 <= code2 && code2 <= 46355) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 46413) {\n                        if (code2 < 46384) {\n                          if (code2 < 46357) {\n                            if (46356 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46357 <= code2 && code2 <= 46383) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46385) {\n                            if (46384 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46412) {\n                              if (46385 <= code2 && code2 <= 46411) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46412 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46468) {\n                          if (code2 < 46440) {\n                            if (46413 <= code2 && code2 <= 46439) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46441) {\n                              if (46440 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46441 <= code2 && code2 <= 46467) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46469) {\n                            if (46468 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46496) {\n                              if (46469 <= code2 && code2 <= 46495) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46496 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 47701) {\n                if (code2 < 47112) {\n                  if (code2 < 46804) {\n                    if (code2 < 46637) {\n                      if (code2 < 46580) {\n                        if (code2 < 46525) {\n                          if (code2 < 46524) {\n                            if (46497 <= code2 && code2 <= 46523) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (46524 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46552) {\n                            if (46525 <= code2 && code2 <= 46551) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46553) {\n                              if (46552 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46553 <= code2 && code2 <= 46579) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46608) {\n                          if (code2 < 46581) {\n                            if (46580 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46581 <= code2 && code2 <= 46607) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46609) {\n                            if (46608 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46636) {\n                              if (46609 <= code2 && code2 <= 46635) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46636 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 46720) {\n                        if (code2 < 46665) {\n                          if (code2 < 46664) {\n                            if (46637 <= code2 && code2 <= 46663) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (46664 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46692) {\n                            if (46665 <= code2 && code2 <= 46691) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46693) {\n                              if (46692 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46693 <= code2 && code2 <= 46719) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46749) {\n                          if (code2 < 46721) {\n                            if (46720 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46748) {\n                              if (46721 <= code2 && code2 <= 46747) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46748 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46776) {\n                            if (46749 <= code2 && code2 <= 46775) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46777) {\n                              if (46776 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46777 <= code2 && code2 <= 46803) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 46945) {\n                      if (code2 < 46861) {\n                        if (code2 < 46832) {\n                          if (code2 < 46805) {\n                            if (46804 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46805 <= code2 && code2 <= 46831) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46833) {\n                            if (46832 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46860) {\n                              if (46833 <= code2 && code2 <= 46859) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46860 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46916) {\n                          if (code2 < 46888) {\n                            if (46861 <= code2 && code2 <= 46887) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46889) {\n                              if (46888 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46889 <= code2 && code2 <= 46915) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46917) {\n                            if (46916 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46944) {\n                              if (46917 <= code2 && code2 <= 46943) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (46944 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47028) {\n                        if (code2 < 46973) {\n                          if (code2 < 46972) {\n                            if (46945 <= code2 && code2 <= 46971) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (46972 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47e3) {\n                            if (46973 <= code2 && code2 <= 46999) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47001) {\n                              if (47e3 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47001 <= code2 && code2 <= 47027) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47057) {\n                          if (code2 < 47029) {\n                            if (47028 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47056) {\n                              if (47029 <= code2 && code2 <= 47055) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47056 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47084) {\n                            if (47057 <= code2 && code2 <= 47083) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47085) {\n                              if (47084 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47085 <= code2 && code2 <= 47111) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 47393) {\n                    if (code2 < 47252) {\n                      if (code2 < 47169) {\n                        if (code2 < 47140) {\n                          if (code2 < 47113) {\n                            if (47112 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47113 <= code2 && code2 <= 47139) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47141) {\n                            if (47140 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47168) {\n                              if (47141 <= code2 && code2 <= 47167) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47168 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47197) {\n                          if (code2 < 47196) {\n                            if (47169 <= code2 && code2 <= 47195) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (47196 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47224) {\n                            if (47197 <= code2 && code2 <= 47223) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47225) {\n                              if (47224 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47225 <= code2 && code2 <= 47251) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47309) {\n                        if (code2 < 47280) {\n                          if (code2 < 47253) {\n                            if (47252 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47253 <= code2 && code2 <= 47279) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47281) {\n                            if (47280 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47308) {\n                              if (47281 <= code2 && code2 <= 47307) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47308 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47364) {\n                          if (code2 < 47336) {\n                            if (47309 <= code2 && code2 <= 47335) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47337) {\n                              if (47336 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47337 <= code2 && code2 <= 47363) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47365) {\n                            if (47364 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47392) {\n                              if (47365 <= code2 && code2 <= 47391) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47392 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 47560) {\n                      if (code2 < 47476) {\n                        if (code2 < 47421) {\n                          if (code2 < 47420) {\n                            if (47393 <= code2 && code2 <= 47419) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (47420 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47448) {\n                            if (47421 <= code2 && code2 <= 47447) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47449) {\n                              if (47448 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47449 <= code2 && code2 <= 47475) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47505) {\n                          if (code2 < 47477) {\n                            if (47476 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47504) {\n                              if (47477 <= code2 && code2 <= 47503) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47504 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47532) {\n                            if (47505 <= code2 && code2 <= 47531) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47533) {\n                              if (47532 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47533 <= code2 && code2 <= 47559) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47617) {\n                        if (code2 < 47588) {\n                          if (code2 < 47561) {\n                            if (47560 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47561 <= code2 && code2 <= 47587) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47589) {\n                            if (47588 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47616) {\n                              if (47589 <= code2 && code2 <= 47615) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47616 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47672) {\n                          if (code2 < 47644) {\n                            if (47617 <= code2 && code2 <= 47643) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47645) {\n                              if (47644 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47645 <= code2 && code2 <= 47671) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47673) {\n                            if (47672 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47700) {\n                              if (47673 <= code2 && code2 <= 47699) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47700 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 48316) {\n                  if (code2 < 48008) {\n                    if (code2 < 47841) {\n                      if (code2 < 47784) {\n                        if (code2 < 47729) {\n                          if (code2 < 47728) {\n                            if (47701 <= code2 && code2 <= 47727) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (47728 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47756) {\n                            if (47729 <= code2 && code2 <= 47755) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47757) {\n                              if (47756 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47757 <= code2 && code2 <= 47783) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47812) {\n                          if (code2 < 47785) {\n                            if (47784 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47785 <= code2 && code2 <= 47811) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47813) {\n                            if (47812 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47840) {\n                              if (47813 <= code2 && code2 <= 47839) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47840 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47924) {\n                        if (code2 < 47869) {\n                          if (code2 < 47868) {\n                            if (47841 <= code2 && code2 <= 47867) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (47868 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47896) {\n                            if (47869 <= code2 && code2 <= 47895) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47897) {\n                              if (47896 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47897 <= code2 && code2 <= 47923) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47953) {\n                          if (code2 < 47925) {\n                            if (47924 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47952) {\n                              if (47925 <= code2 && code2 <= 47951) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (47952 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47980) {\n                            if (47953 <= code2 && code2 <= 47979) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47981) {\n                              if (47980 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47981 <= code2 && code2 <= 48007) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 48149) {\n                      if (code2 < 48065) {\n                        if (code2 < 48036) {\n                          if (code2 < 48009) {\n                            if (48008 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48009 <= code2 && code2 <= 48035) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48037) {\n                            if (48036 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48064) {\n                              if (48037 <= code2 && code2 <= 48063) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48064 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48120) {\n                          if (code2 < 48092) {\n                            if (48065 <= code2 && code2 <= 48091) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48093) {\n                              if (48092 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48093 <= code2 && code2 <= 48119) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48121) {\n                            if (48120 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48148) {\n                              if (48121 <= code2 && code2 <= 48147) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48148 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 48232) {\n                        if (code2 < 48177) {\n                          if (code2 < 48176) {\n                            if (48149 <= code2 && code2 <= 48175) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (48176 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48204) {\n                            if (48177 <= code2 && code2 <= 48203) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48205) {\n                              if (48204 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48205 <= code2 && code2 <= 48231) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48261) {\n                          if (code2 < 48233) {\n                            if (48232 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48260) {\n                              if (48233 <= code2 && code2 <= 48259) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48260 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48288) {\n                            if (48261 <= code2 && code2 <= 48287) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48289) {\n                              if (48288 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48289 <= code2 && code2 <= 48315) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 48597) {\n                    if (code2 < 48456) {\n                      if (code2 < 48373) {\n                        if (code2 < 48344) {\n                          if (code2 < 48317) {\n                            if (48316 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48317 <= code2 && code2 <= 48343) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48345) {\n                            if (48344 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48372) {\n                              if (48345 <= code2 && code2 <= 48371) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48372 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48401) {\n                          if (code2 < 48400) {\n                            if (48373 <= code2 && code2 <= 48399) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (48400 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48428) {\n                            if (48401 <= code2 && code2 <= 48427) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48429) {\n                              if (48428 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48429 <= code2 && code2 <= 48455) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 48513) {\n                        if (code2 < 48484) {\n                          if (code2 < 48457) {\n                            if (48456 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48457 <= code2 && code2 <= 48483) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48485) {\n                            if (48484 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48512) {\n                              if (48485 <= code2 && code2 <= 48511) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48512 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48568) {\n                          if (code2 < 48540) {\n                            if (48513 <= code2 && code2 <= 48539) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48541) {\n                              if (48540 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48541 <= code2 && code2 <= 48567) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48569) {\n                            if (48568 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48596) {\n                              if (48569 <= code2 && code2 <= 48595) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48596 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 48764) {\n                      if (code2 < 48680) {\n                        if (code2 < 48625) {\n                          if (code2 < 48624) {\n                            if (48597 <= code2 && code2 <= 48623) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (48624 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48652) {\n                            if (48625 <= code2 && code2 <= 48651) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48653) {\n                              if (48652 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48653 <= code2 && code2 <= 48679) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48709) {\n                          if (code2 < 48681) {\n                            if (48680 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48708) {\n                              if (48681 <= code2 && code2 <= 48707) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48708 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48736) {\n                            if (48709 <= code2 && code2 <= 48735) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48737) {\n                              if (48736 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48737 <= code2 && code2 <= 48763) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 48821) {\n                        if (code2 < 48792) {\n                          if (code2 < 48765) {\n                            if (48764 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48765 <= code2 && code2 <= 48791) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48793) {\n                            if (48792 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48820) {\n                              if (48793 <= code2 && code2 <= 48819) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48820 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48876) {\n                          if (code2 < 48848) {\n                            if (48821 <= code2 && code2 <= 48847) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48849) {\n                              if (48848 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48849 <= code2 && code2 <= 48875) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48877) {\n                            if (48876 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48904) {\n                              if (48877 <= code2 && code2 <= 48903) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (48904 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          if (code2 < 53720) {\n            if (code2 < 51312) {\n              if (code2 < 50108) {\n                if (code2 < 49493) {\n                  if (code2 < 49212) {\n                    if (code2 < 49045) {\n                      if (code2 < 48988) {\n                        if (code2 < 48933) {\n                          if (code2 < 48932) {\n                            if (48905 <= code2 && code2 <= 48931) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (48932 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48960) {\n                            if (48933 <= code2 && code2 <= 48959) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48961) {\n                              if (48960 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48961 <= code2 && code2 <= 48987) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49016) {\n                          if (code2 < 48989) {\n                            if (48988 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48989 <= code2 && code2 <= 49015) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49017) {\n                            if (49016 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49044) {\n                              if (49017 <= code2 && code2 <= 49043) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49044 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 49128) {\n                        if (code2 < 49073) {\n                          if (code2 < 49072) {\n                            if (49045 <= code2 && code2 <= 49071) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (49072 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49100) {\n                            if (49073 <= code2 && code2 <= 49099) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49101) {\n                              if (49100 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49101 <= code2 && code2 <= 49127) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49157) {\n                          if (code2 < 49129) {\n                            if (49128 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49156) {\n                              if (49129 <= code2 && code2 <= 49155) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49156 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49184) {\n                            if (49157 <= code2 && code2 <= 49183) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49185) {\n                              if (49184 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49185 <= code2 && code2 <= 49211) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 49352) {\n                      if (code2 < 49269) {\n                        if (code2 < 49240) {\n                          if (code2 < 49213) {\n                            if (49212 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49213 <= code2 && code2 <= 49239) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49241) {\n                            if (49240 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49268) {\n                              if (49241 <= code2 && code2 <= 49267) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49268 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49297) {\n                          if (code2 < 49296) {\n                            if (49269 <= code2 && code2 <= 49295) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (49296 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49324) {\n                            if (49297 <= code2 && code2 <= 49323) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49325) {\n                              if (49324 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49325 <= code2 && code2 <= 49351) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 49409) {\n                        if (code2 < 49380) {\n                          if (code2 < 49353) {\n                            if (49352 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49353 <= code2 && code2 <= 49379) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49381) {\n                            if (49380 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49408) {\n                              if (49381 <= code2 && code2 <= 49407) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49408 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49464) {\n                          if (code2 < 49436) {\n                            if (49409 <= code2 && code2 <= 49435) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49437) {\n                              if (49436 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49437 <= code2 && code2 <= 49463) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49465) {\n                            if (49464 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49492) {\n                              if (49465 <= code2 && code2 <= 49491) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49492 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 49800) {\n                    if (code2 < 49633) {\n                      if (code2 < 49576) {\n                        if (code2 < 49521) {\n                          if (code2 < 49520) {\n                            if (49493 <= code2 && code2 <= 49519) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (49520 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49548) {\n                            if (49521 <= code2 && code2 <= 49547) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49549) {\n                              if (49548 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49549 <= code2 && code2 <= 49575) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49604) {\n                          if (code2 < 49577) {\n                            if (49576 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49577 <= code2 && code2 <= 49603) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49605) {\n                            if (49604 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49632) {\n                              if (49605 <= code2 && code2 <= 49631) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49632 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 49716) {\n                        if (code2 < 49661) {\n                          if (code2 < 49660) {\n                            if (49633 <= code2 && code2 <= 49659) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (49660 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49688) {\n                            if (49661 <= code2 && code2 <= 49687) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49689) {\n                              if (49688 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49689 <= code2 && code2 <= 49715) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49745) {\n                          if (code2 < 49717) {\n                            if (49716 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49744) {\n                              if (49717 <= code2 && code2 <= 49743) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49744 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49772) {\n                            if (49745 <= code2 && code2 <= 49771) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49773) {\n                              if (49772 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49773 <= code2 && code2 <= 49799) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 49941) {\n                      if (code2 < 49857) {\n                        if (code2 < 49828) {\n                          if (code2 < 49801) {\n                            if (49800 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49801 <= code2 && code2 <= 49827) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49829) {\n                            if (49828 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49856) {\n                              if (49829 <= code2 && code2 <= 49855) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49856 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49912) {\n                          if (code2 < 49884) {\n                            if (49857 <= code2 && code2 <= 49883) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49885) {\n                              if (49884 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49885 <= code2 && code2 <= 49911) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49913) {\n                            if (49912 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49940) {\n                              if (49913 <= code2 && code2 <= 49939) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (49940 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50024) {\n                        if (code2 < 49969) {\n                          if (code2 < 49968) {\n                            if (49941 <= code2 && code2 <= 49967) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (49968 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49996) {\n                            if (49969 <= code2 && code2 <= 49995) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49997) {\n                              if (49996 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49997 <= code2 && code2 <= 50023) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50053) {\n                          if (code2 < 50025) {\n                            if (50024 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50052) {\n                              if (50025 <= code2 && code2 <= 50051) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50052 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50080) {\n                            if (50053 <= code2 && code2 <= 50079) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50081) {\n                              if (50080 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50081 <= code2 && code2 <= 50107) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 50697) {\n                  if (code2 < 50389) {\n                    if (code2 < 50248) {\n                      if (code2 < 50165) {\n                        if (code2 < 50136) {\n                          if (code2 < 50109) {\n                            if (50108 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50109 <= code2 && code2 <= 50135) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50137) {\n                            if (50136 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50164) {\n                              if (50137 <= code2 && code2 <= 50163) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50164 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50193) {\n                          if (code2 < 50192) {\n                            if (50165 <= code2 && code2 <= 50191) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (50192 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50220) {\n                            if (50193 <= code2 && code2 <= 50219) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50221) {\n                              if (50220 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50221 <= code2 && code2 <= 50247) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50305) {\n                        if (code2 < 50276) {\n                          if (code2 < 50249) {\n                            if (50248 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50249 <= code2 && code2 <= 50275) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50277) {\n                            if (50276 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50304) {\n                              if (50277 <= code2 && code2 <= 50303) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50304 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50360) {\n                          if (code2 < 50332) {\n                            if (50305 <= code2 && code2 <= 50331) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50333) {\n                              if (50332 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50333 <= code2 && code2 <= 50359) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50361) {\n                            if (50360 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50388) {\n                              if (50361 <= code2 && code2 <= 50387) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50388 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 50556) {\n                      if (code2 < 50472) {\n                        if (code2 < 50417) {\n                          if (code2 < 50416) {\n                            if (50389 <= code2 && code2 <= 50415) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (50416 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50444) {\n                            if (50417 <= code2 && code2 <= 50443) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50445) {\n                              if (50444 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50445 <= code2 && code2 <= 50471) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50501) {\n                          if (code2 < 50473) {\n                            if (50472 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50500) {\n                              if (50473 <= code2 && code2 <= 50499) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50500 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50528) {\n                            if (50501 <= code2 && code2 <= 50527) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50529) {\n                              if (50528 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50529 <= code2 && code2 <= 50555) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50613) {\n                        if (code2 < 50584) {\n                          if (code2 < 50557) {\n                            if (50556 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50557 <= code2 && code2 <= 50583) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50585) {\n                            if (50584 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50612) {\n                              if (50585 <= code2 && code2 <= 50611) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50612 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50668) {\n                          if (code2 < 50640) {\n                            if (50613 <= code2 && code2 <= 50639) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50641) {\n                              if (50640 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50641 <= code2 && code2 <= 50667) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50669) {\n                            if (50668 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50696) {\n                              if (50669 <= code2 && code2 <= 50695) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50696 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 51004) {\n                    if (code2 < 50837) {\n                      if (code2 < 50780) {\n                        if (code2 < 50725) {\n                          if (code2 < 50724) {\n                            if (50697 <= code2 && code2 <= 50723) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (50724 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50752) {\n                            if (50725 <= code2 && code2 <= 50751) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50753) {\n                              if (50752 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50753 <= code2 && code2 <= 50779) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50808) {\n                          if (code2 < 50781) {\n                            if (50780 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50781 <= code2 && code2 <= 50807) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50809) {\n                            if (50808 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50836) {\n                              if (50809 <= code2 && code2 <= 50835) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50836 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50920) {\n                        if (code2 < 50865) {\n                          if (code2 < 50864) {\n                            if (50837 <= code2 && code2 <= 50863) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (50864 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50892) {\n                            if (50865 <= code2 && code2 <= 50891) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50893) {\n                              if (50892 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50893 <= code2 && code2 <= 50919) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50949) {\n                          if (code2 < 50921) {\n                            if (50920 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50948) {\n                              if (50921 <= code2 && code2 <= 50947) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (50948 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50976) {\n                            if (50949 <= code2 && code2 <= 50975) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50977) {\n                              if (50976 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50977 <= code2 && code2 <= 51003) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 51145) {\n                      if (code2 < 51061) {\n                        if (code2 < 51032) {\n                          if (code2 < 51005) {\n                            if (51004 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51005 <= code2 && code2 <= 51031) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51033) {\n                            if (51032 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51060) {\n                              if (51033 <= code2 && code2 <= 51059) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51060 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51116) {\n                          if (code2 < 51088) {\n                            if (51061 <= code2 && code2 <= 51087) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51089) {\n                              if (51088 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51089 <= code2 && code2 <= 51115) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51117) {\n                            if (51116 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51144) {\n                              if (51117 <= code2 && code2 <= 51143) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51144 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 51228) {\n                        if (code2 < 51173) {\n                          if (code2 < 51172) {\n                            if (51145 <= code2 && code2 <= 51171) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (51172 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51200) {\n                            if (51173 <= code2 && code2 <= 51199) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51201) {\n                              if (51200 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51201 <= code2 && code2 <= 51227) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51257) {\n                          if (code2 < 51229) {\n                            if (51228 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51256) {\n                              if (51229 <= code2 && code2 <= 51255) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51256 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51284) {\n                            if (51257 <= code2 && code2 <= 51283) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51285) {\n                              if (51284 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51285 <= code2 && code2 <= 51311) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 52516) {\n                if (code2 < 51901) {\n                  if (code2 < 51593) {\n                    if (code2 < 51452) {\n                      if (code2 < 51369) {\n                        if (code2 < 51340) {\n                          if (code2 < 51313) {\n                            if (51312 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51313 <= code2 && code2 <= 51339) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51341) {\n                            if (51340 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51368) {\n                              if (51341 <= code2 && code2 <= 51367) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51368 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51397) {\n                          if (code2 < 51396) {\n                            if (51369 <= code2 && code2 <= 51395) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (51396 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51424) {\n                            if (51397 <= code2 && code2 <= 51423) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51425) {\n                              if (51424 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51425 <= code2 && code2 <= 51451) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 51509) {\n                        if (code2 < 51480) {\n                          if (code2 < 51453) {\n                            if (51452 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51453 <= code2 && code2 <= 51479) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51481) {\n                            if (51480 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51508) {\n                              if (51481 <= code2 && code2 <= 51507) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51508 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51564) {\n                          if (code2 < 51536) {\n                            if (51509 <= code2 && code2 <= 51535) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51537) {\n                              if (51536 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51537 <= code2 && code2 <= 51563) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51565) {\n                            if (51564 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51592) {\n                              if (51565 <= code2 && code2 <= 51591) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51592 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 51760) {\n                      if (code2 < 51676) {\n                        if (code2 < 51621) {\n                          if (code2 < 51620) {\n                            if (51593 <= code2 && code2 <= 51619) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (51620 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51648) {\n                            if (51621 <= code2 && code2 <= 51647) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51649) {\n                              if (51648 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51649 <= code2 && code2 <= 51675) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51705) {\n                          if (code2 < 51677) {\n                            if (51676 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51704) {\n                              if (51677 <= code2 && code2 <= 51703) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51704 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51732) {\n                            if (51705 <= code2 && code2 <= 51731) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51733) {\n                              if (51732 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51733 <= code2 && code2 <= 51759) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 51817) {\n                        if (code2 < 51788) {\n                          if (code2 < 51761) {\n                            if (51760 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51761 <= code2 && code2 <= 51787) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51789) {\n                            if (51788 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51816) {\n                              if (51789 <= code2 && code2 <= 51815) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51816 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51872) {\n                          if (code2 < 51844) {\n                            if (51817 <= code2 && code2 <= 51843) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51845) {\n                              if (51844 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51845 <= code2 && code2 <= 51871) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51873) {\n                            if (51872 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51900) {\n                              if (51873 <= code2 && code2 <= 51899) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (51900 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 52208) {\n                    if (code2 < 52041) {\n                      if (code2 < 51984) {\n                        if (code2 < 51929) {\n                          if (code2 < 51928) {\n                            if (51901 <= code2 && code2 <= 51927) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (51928 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51956) {\n                            if (51929 <= code2 && code2 <= 51955) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51957) {\n                              if (51956 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51957 <= code2 && code2 <= 51983) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52012) {\n                          if (code2 < 51985) {\n                            if (51984 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51985 <= code2 && code2 <= 52011) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52013) {\n                            if (52012 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52040) {\n                              if (52013 <= code2 && code2 <= 52039) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52040 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 52124) {\n                        if (code2 < 52069) {\n                          if (code2 < 52068) {\n                            if (52041 <= code2 && code2 <= 52067) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (52068 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52096) {\n                            if (52069 <= code2 && code2 <= 52095) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52097) {\n                              if (52096 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52097 <= code2 && code2 <= 52123) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52153) {\n                          if (code2 < 52125) {\n                            if (52124 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52152) {\n                              if (52125 <= code2 && code2 <= 52151) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52152 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52180) {\n                            if (52153 <= code2 && code2 <= 52179) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52181) {\n                              if (52180 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52181 <= code2 && code2 <= 52207) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 52349) {\n                      if (code2 < 52265) {\n                        if (code2 < 52236) {\n                          if (code2 < 52209) {\n                            if (52208 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52209 <= code2 && code2 <= 52235) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52237) {\n                            if (52236 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52264) {\n                              if (52237 <= code2 && code2 <= 52263) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52264 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52320) {\n                          if (code2 < 52292) {\n                            if (52265 <= code2 && code2 <= 52291) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52293) {\n                              if (52292 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52293 <= code2 && code2 <= 52319) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52321) {\n                            if (52320 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52348) {\n                              if (52321 <= code2 && code2 <= 52347) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52348 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 52432) {\n                        if (code2 < 52377) {\n                          if (code2 < 52376) {\n                            if (52349 <= code2 && code2 <= 52375) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (52376 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52404) {\n                            if (52377 <= code2 && code2 <= 52403) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52405) {\n                              if (52404 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52405 <= code2 && code2 <= 52431) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52461) {\n                          if (code2 < 52433) {\n                            if (52432 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52460) {\n                              if (52433 <= code2 && code2 <= 52459) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52460 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52488) {\n                            if (52461 <= code2 && code2 <= 52487) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52489) {\n                              if (52488 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52489 <= code2 && code2 <= 52515) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 53105) {\n                  if (code2 < 52797) {\n                    if (code2 < 52656) {\n                      if (code2 < 52573) {\n                        if (code2 < 52544) {\n                          if (code2 < 52517) {\n                            if (52516 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52517 <= code2 && code2 <= 52543) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52545) {\n                            if (52544 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52572) {\n                              if (52545 <= code2 && code2 <= 52571) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52572 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52601) {\n                          if (code2 < 52600) {\n                            if (52573 <= code2 && code2 <= 52599) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (52600 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52628) {\n                            if (52601 <= code2 && code2 <= 52627) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52629) {\n                              if (52628 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52629 <= code2 && code2 <= 52655) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 52713) {\n                        if (code2 < 52684) {\n                          if (code2 < 52657) {\n                            if (52656 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52657 <= code2 && code2 <= 52683) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52685) {\n                            if (52684 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52712) {\n                              if (52685 <= code2 && code2 <= 52711) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52712 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52768) {\n                          if (code2 < 52740) {\n                            if (52713 <= code2 && code2 <= 52739) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52741) {\n                              if (52740 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52741 <= code2 && code2 <= 52767) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52769) {\n                            if (52768 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52796) {\n                              if (52769 <= code2 && code2 <= 52795) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52796 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 52964) {\n                      if (code2 < 52880) {\n                        if (code2 < 52825) {\n                          if (code2 < 52824) {\n                            if (52797 <= code2 && code2 <= 52823) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (52824 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52852) {\n                            if (52825 <= code2 && code2 <= 52851) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52853) {\n                              if (52852 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52853 <= code2 && code2 <= 52879) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52909) {\n                          if (code2 < 52881) {\n                            if (52880 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52908) {\n                              if (52881 <= code2 && code2 <= 52907) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (52908 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52936) {\n                            if (52909 <= code2 && code2 <= 52935) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52937) {\n                              if (52936 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52937 <= code2 && code2 <= 52963) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53021) {\n                        if (code2 < 52992) {\n                          if (code2 < 52965) {\n                            if (52964 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52965 <= code2 && code2 <= 52991) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52993) {\n                            if (52992 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53020) {\n                              if (52993 <= code2 && code2 <= 53019) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53020 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53076) {\n                          if (code2 < 53048) {\n                            if (53021 <= code2 && code2 <= 53047) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53049) {\n                              if (53048 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53049 <= code2 && code2 <= 53075) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53077) {\n                            if (53076 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53104) {\n                              if (53077 <= code2 && code2 <= 53103) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53104 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 53412) {\n                    if (code2 < 53245) {\n                      if (code2 < 53188) {\n                        if (code2 < 53133) {\n                          if (code2 < 53132) {\n                            if (53105 <= code2 && code2 <= 53131) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (53132 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53160) {\n                            if (53133 <= code2 && code2 <= 53159) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53161) {\n                              if (53160 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53161 <= code2 && code2 <= 53187) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53216) {\n                          if (code2 < 53189) {\n                            if (53188 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53189 <= code2 && code2 <= 53215) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53217) {\n                            if (53216 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53244) {\n                              if (53217 <= code2 && code2 <= 53243) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53244 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53328) {\n                        if (code2 < 53273) {\n                          if (code2 < 53272) {\n                            if (53245 <= code2 && code2 <= 53271) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (53272 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53300) {\n                            if (53273 <= code2 && code2 <= 53299) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53301) {\n                              if (53300 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53301 <= code2 && code2 <= 53327) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53357) {\n                          if (code2 < 53329) {\n                            if (53328 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53356) {\n                              if (53329 <= code2 && code2 <= 53355) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53356 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53384) {\n                            if (53357 <= code2 && code2 <= 53383) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53385) {\n                              if (53384 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53385 <= code2 && code2 <= 53411) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 53553) {\n                      if (code2 < 53469) {\n                        if (code2 < 53440) {\n                          if (code2 < 53413) {\n                            if (53412 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53413 <= code2 && code2 <= 53439) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53441) {\n                            if (53440 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53468) {\n                              if (53441 <= code2 && code2 <= 53467) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53468 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53524) {\n                          if (code2 < 53496) {\n                            if (53469 <= code2 && code2 <= 53495) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53497) {\n                              if (53496 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53497 <= code2 && code2 <= 53523) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53525) {\n                            if (53524 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53552) {\n                              if (53525 <= code2 && code2 <= 53551) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53552 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53636) {\n                        if (code2 < 53581) {\n                          if (code2 < 53580) {\n                            if (53553 <= code2 && code2 <= 53579) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (53580 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53608) {\n                            if (53581 <= code2 && code2 <= 53607) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53609) {\n                              if (53608 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53609 <= code2 && code2 <= 53635) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53665) {\n                          if (code2 < 53637) {\n                            if (53636 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53664) {\n                              if (53637 <= code2 && code2 <= 53663) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53664 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53692) {\n                            if (53665 <= code2 && code2 <= 53691) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53693) {\n                              if (53692 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53693 <= code2 && code2 <= 53719) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 70459) {\n              if (code2 < 54897) {\n                if (code2 < 54308) {\n                  if (code2 < 54001) {\n                    if (code2 < 53860) {\n                      if (code2 < 53777) {\n                        if (code2 < 53748) {\n                          if (code2 < 53721) {\n                            if (53720 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53721 <= code2 && code2 <= 53747) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53749) {\n                            if (53748 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53776) {\n                              if (53749 <= code2 && code2 <= 53775) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53776 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53805) {\n                          if (code2 < 53804) {\n                            if (53777 <= code2 && code2 <= 53803) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (53804 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53832) {\n                            if (53805 <= code2 && code2 <= 53831) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53833) {\n                              if (53832 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53833 <= code2 && code2 <= 53859) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53917) {\n                        if (code2 < 53888) {\n                          if (code2 < 53861) {\n                            if (53860 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53861 <= code2 && code2 <= 53887) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53889) {\n                            if (53888 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53916) {\n                              if (53889 <= code2 && code2 <= 53915) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (53916 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53972) {\n                          if (code2 < 53944) {\n                            if (53917 <= code2 && code2 <= 53943) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53945) {\n                              if (53944 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53945 <= code2 && code2 <= 53971) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53973) {\n                            if (53972 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54e3) {\n                              if (53973 <= code2 && code2 <= 53999) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54e3 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 54141) {\n                      if (code2 < 54084) {\n                        if (code2 < 54029) {\n                          if (code2 < 54028) {\n                            if (54001 <= code2 && code2 <= 54027) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (54028 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54056) {\n                            if (54029 <= code2 && code2 <= 54055) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54057) {\n                              if (54056 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54057 <= code2 && code2 <= 54083) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54112) {\n                          if (code2 < 54085) {\n                            if (54084 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54085 <= code2 && code2 <= 54111) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54113) {\n                            if (54112 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54140) {\n                              if (54113 <= code2 && code2 <= 54139) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54140 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 54224) {\n                        if (code2 < 54169) {\n                          if (code2 < 54168) {\n                            if (54141 <= code2 && code2 <= 54167) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (54168 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54196) {\n                            if (54169 <= code2 && code2 <= 54195) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54197) {\n                              if (54196 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54197 <= code2 && code2 <= 54223) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54253) {\n                          if (code2 < 54225) {\n                            if (54224 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54252) {\n                              if (54225 <= code2 && code2 <= 54251) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54252 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54280) {\n                            if (54253 <= code2 && code2 <= 54279) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54281) {\n                              if (54280 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54281 <= code2 && code2 <= 54307) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 54589) {\n                    if (code2 < 54448) {\n                      if (code2 < 54365) {\n                        if (code2 < 54336) {\n                          if (code2 < 54309) {\n                            if (54308 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54309 <= code2 && code2 <= 54335) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54337) {\n                            if (54336 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54364) {\n                              if (54337 <= code2 && code2 <= 54363) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54364 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54393) {\n                          if (code2 < 54392) {\n                            if (54365 <= code2 && code2 <= 54391) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (54392 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54420) {\n                            if (54393 <= code2 && code2 <= 54419) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54421) {\n                              if (54420 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54421 <= code2 && code2 <= 54447) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 54505) {\n                        if (code2 < 54476) {\n                          if (code2 < 54449) {\n                            if (54448 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54449 <= code2 && code2 <= 54475) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54477) {\n                            if (54476 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54504) {\n                              if (54477 <= code2 && code2 <= 54503) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54504 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54560) {\n                          if (code2 < 54532) {\n                            if (54505 <= code2 && code2 <= 54531) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54533) {\n                              if (54532 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54533 <= code2 && code2 <= 54559) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54561) {\n                            if (54560 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54588) {\n                              if (54561 <= code2 && code2 <= 54587) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54588 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 54756) {\n                      if (code2 < 54672) {\n                        if (code2 < 54617) {\n                          if (code2 < 54616) {\n                            if (54589 <= code2 && code2 <= 54615) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (54616 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54644) {\n                            if (54617 <= code2 && code2 <= 54643) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54645) {\n                              if (54644 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54645 <= code2 && code2 <= 54671) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54701) {\n                          if (code2 < 54673) {\n                            if (54672 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54700) {\n                              if (54673 <= code2 && code2 <= 54699) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54700 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54728) {\n                            if (54701 <= code2 && code2 <= 54727) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54729) {\n                              if (54728 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54729 <= code2 && code2 <= 54755) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 54813) {\n                        if (code2 < 54784) {\n                          if (code2 < 54757) {\n                            if (54756 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54757 <= code2 && code2 <= 54783) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54785) {\n                            if (54784 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54812) {\n                              if (54785 <= code2 && code2 <= 54811) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54812 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54868) {\n                          if (code2 < 54840) {\n                            if (54813 <= code2 && code2 <= 54839) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54841) {\n                              if (54840 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54841 <= code2 && code2 <= 54867) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54869) {\n                            if (54868 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54896) {\n                              if (54869 <= code2 && code2 <= 54895) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (54896 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 69632) {\n                  if (code2 < 55216) {\n                    if (code2 < 55037) {\n                      if (code2 < 54980) {\n                        if (code2 < 54925) {\n                          if (code2 < 54924) {\n                            if (54897 <= code2 && code2 <= 54923) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (54924 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54952) {\n                            if (54925 <= code2 && code2 <= 54951) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54953) {\n                              if (54952 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54953 <= code2 && code2 <= 54979) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 55008) {\n                          if (code2 < 54981) {\n                            if (54980 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54981 <= code2 && code2 <= 55007) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 55009) {\n                            if (55008 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 55036) {\n                              if (55009 <= code2 && code2 <= 55035) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (55036 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 55120) {\n                        if (code2 < 55065) {\n                          if (code2 < 55064) {\n                            if (55037 <= code2 && code2 <= 55063) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (55064 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 55092) {\n                            if (55065 <= code2 && code2 <= 55091) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 55093) {\n                              if (55092 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (55093 <= code2 && code2 <= 55119) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 55149) {\n                          if (code2 < 55121) {\n                            if (55120 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 55148) {\n                              if (55121 <= code2 && code2 <= 55147) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (55148 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 55176) {\n                            if (55149 <= code2 && code2 <= 55175) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 55177) {\n                              if (55176 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (55177 <= code2 && code2 <= 55203) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 68097) {\n                      if (code2 < 65279) {\n                        if (code2 < 64286) {\n                          if (code2 < 55243) {\n                            if (55216 <= code2 && code2 <= 55238) {\n                              return boundaries_1.CLUSTER_BREAK.V;\n                            }\n                          } else {\n                            if (55243 <= code2 && code2 <= 55291) {\n                              return boundaries_1.CLUSTER_BREAK.T;\n                            }\n                          }\n                        } else {\n                          if (code2 < 65024) {\n                            if (64286 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 65056) {\n                              if (65024 <= code2 && code2 <= 65039) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (65056 <= code2 && code2 <= 65071) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 66045) {\n                          if (code2 < 65438) {\n                            if (65279 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 65520) {\n                              if (65438 <= code2 && code2 <= 65439) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (65520 <= code2 && code2 <= 65531) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 66272) {\n                            if (66045 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 66422) {\n                              if (66272 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (66422 <= code2 && code2 <= 66426) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 68325) {\n                        if (code2 < 68108) {\n                          if (code2 < 68101) {\n                            if (68097 <= code2 && code2 <= 68099) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (68101 <= code2 && code2 <= 68102) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 68152) {\n                            if (68108 <= code2 && code2 <= 68111) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 68159) {\n                              if (68152 <= code2 && code2 <= 68154) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (68159 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 69373) {\n                          if (code2 < 68900) {\n                            if (68325 <= code2 && code2 <= 68326) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 69291) {\n                              if (68900 <= code2 && code2 <= 68903) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (69291 <= code2 && code2 <= 69292) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 69446) {\n                            if (69373 <= code2 && code2 <= 69375) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 69506) {\n                              if (69446 <= code2 && code2 <= 69456) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (69506 <= code2 && code2 <= 69509) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 70016) {\n                    if (code2 < 69815) {\n                      if (code2 < 69747) {\n                        if (code2 < 69634) {\n                          if (69632 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (69633 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 69688) {\n                            if (69634 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 69744) {\n                              if (69688 <= code2 && code2 <= 69702) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (69744 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 69762) {\n                          if (code2 < 69759) {\n                            if (69747 <= code2 && code2 <= 69748) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (69759 <= code2 && code2 <= 69761) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 69808) {\n                            if (69762 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 69811) {\n                              if (69808 <= code2 && code2 <= 69810) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (69811 <= code2 && code2 <= 69814) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 69888) {\n                        if (code2 < 69821) {\n                          if (code2 < 69817) {\n                            if (69815 <= code2 && code2 <= 69816) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (69817 <= code2 && code2 <= 69818) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 69826) {\n                            if (69821 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (69826 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (69837 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 69933) {\n                          if (code2 < 69927) {\n                            if (69888 <= code2 && code2 <= 69890) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 69932) {\n                              if (69927 <= code2 && code2 <= 69931) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (69932 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 69957) {\n                            if (69933 <= code2 && code2 <= 69940) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70003) {\n                              if (69957 <= code2 && code2 <= 69958) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70003 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 70194) {\n                      if (code2 < 70082) {\n                        if (code2 < 70067) {\n                          if (code2 < 70018) {\n                            if (70016 <= code2 && code2 <= 70017) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (70018 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70070) {\n                            if (70067 <= code2 && code2 <= 70069) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 70079) {\n                              if (70070 <= code2 && code2 <= 70078) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70079 <= code2 && code2 <= 70080) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70095) {\n                          if (code2 < 70089) {\n                            if (70082 <= code2 && code2 <= 70083) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 < 70094) {\n                              if (70089 <= code2 && code2 <= 70092) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70094 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 70188) {\n                            if (70095 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70191) {\n                              if (70188 <= code2 && code2 <= 70190) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70191 <= code2 && code2 <= 70193) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 70209) {\n                        if (code2 < 70197) {\n                          if (code2 < 70196) {\n                            if (70194 <= code2 && code2 <= 70195) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (70196 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70198) {\n                            if (70197 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 70206) {\n                              if (70198 <= code2 && code2 <= 70199) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70206 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70371) {\n                          if (code2 < 70367) {\n                            if (70209 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70368) {\n                              if (70367 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70368 <= code2 && code2 <= 70370) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 70400) {\n                            if (70371 <= code2 && code2 <= 70378) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70402) {\n                              if (70400 <= code2 && code2 <= 70401) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70402 <= code2 && code2 <= 70403) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 72343) {\n                if (code2 < 71339) {\n                  if (code2 < 70841) {\n                    if (code2 < 70512) {\n                      if (code2 < 70471) {\n                        if (code2 < 70463) {\n                          if (code2 < 70462) {\n                            if (70459 <= code2 && code2 <= 70460) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (70462 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70464) {\n                            if (70463 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 70465) {\n                              if (70464 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70465 <= code2 && code2 <= 70468) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70487) {\n                          if (code2 < 70475) {\n                            if (70471 <= code2 && code2 <= 70472) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (70475 <= code2 && code2 <= 70477) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70498) {\n                            if (70487 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70502) {\n                              if (70498 <= code2 && code2 <= 70499) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70502 <= code2 && code2 <= 70508) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 70725) {\n                        if (code2 < 70712) {\n                          if (code2 < 70709) {\n                            if (70512 <= code2 && code2 <= 70516) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (70709 <= code2 && code2 <= 70711) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70720) {\n                            if (70712 <= code2 && code2 <= 70719) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70722) {\n                              if (70720 <= code2 && code2 <= 70721) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70722 <= code2 && code2 <= 70724) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70832) {\n                          if (code2 < 70726) {\n                            if (70725 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (70726 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (70750 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70833) {\n                            if (70832 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70835) {\n                              if (70833 <= code2 && code2 <= 70834) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70835 <= code2 && code2 <= 70840) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 71096) {\n                      if (code2 < 70847) {\n                        if (code2 < 70843) {\n                          if (70841 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (70842 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 70845) {\n                            if (70843 <= code2 && code2 <= 70844) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (70845 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (70846 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71087) {\n                          if (code2 < 70849) {\n                            if (70847 <= code2 && code2 <= 70848) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70850) {\n                              if (70849 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70850 <= code2 && code2 <= 70851) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 71088) {\n                            if (71087 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71090) {\n                              if (71088 <= code2 && code2 <= 71089) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71090 <= code2 && code2 <= 71093) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 71216) {\n                        if (code2 < 71102) {\n                          if (code2 < 71100) {\n                            if (71096 <= code2 && code2 <= 71099) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (71100 <= code2 && code2 <= 71101) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 71103) {\n                            if (71102 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 71132) {\n                              if (71103 <= code2 && code2 <= 71104) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (71132 <= code2 && code2 <= 71133) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71229) {\n                          if (code2 < 71219) {\n                            if (71216 <= code2 && code2 <= 71218) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 71227) {\n                              if (71219 <= code2 && code2 <= 71226) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (71227 <= code2 && code2 <= 71228) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 71230) {\n                            if (71229 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71231) {\n                              if (71230 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71231 <= code2 && code2 <= 71232) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 71999) {\n                    if (code2 < 71463) {\n                      if (code2 < 71350) {\n                        if (code2 < 71341) {\n                          if (71339 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (71340 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                        } else {\n                          if (code2 < 71342) {\n                            if (71341 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71344) {\n                              if (71342 <= code2 && code2 <= 71343) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71344 <= code2 && code2 <= 71349) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71453) {\n                          if (71350 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (71351 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 71458) {\n                            if (71453 <= code2 && code2 <= 71455) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71462) {\n                              if (71458 <= code2 && code2 <= 71461) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (71462 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 71984) {\n                        if (code2 < 71727) {\n                          if (code2 < 71724) {\n                            if (71463 <= code2 && code2 <= 71467) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (71724 <= code2 && code2 <= 71726) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 71736) {\n                            if (71727 <= code2 && code2 <= 71735) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71737) {\n                              if (71736 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71737 <= code2 && code2 <= 71738) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71995) {\n                          if (code2 < 71985) {\n                            if (71984 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71991) {\n                              if (71985 <= code2 && code2 <= 71989) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71991 <= code2 && code2 <= 71992) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 71997) {\n                            if (71995 <= code2 && code2 <= 71996) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (71997 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (71998 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 72193) {\n                      if (code2 < 72145) {\n                        if (code2 < 72001) {\n                          if (71999 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.PREPEND;\n                          }\n                          if (72e3 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                        } else {\n                          if (code2 < 72002) {\n                            if (72001 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (72002 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (72003 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 72156) {\n                          if (code2 < 72148) {\n                            if (72145 <= code2 && code2 <= 72147) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 72154) {\n                              if (72148 <= code2 && code2 <= 72151) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (72154 <= code2 && code2 <= 72155) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 72160) {\n                            if (72156 <= code2 && code2 <= 72159) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (72160 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (72164 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 72263) {\n                        if (code2 < 72249) {\n                          if (code2 < 72243) {\n                            if (72193 <= code2 && code2 <= 72202) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (72243 <= code2 && code2 <= 72248) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 72250) {\n                            if (72249 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 72251) {\n                              if (72250 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            } else {\n                              if (72251 <= code2 && code2 <= 72254) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 72281) {\n                          if (code2 < 72273) {\n                            if (72263 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 72279) {\n                              if (72273 <= code2 && code2 <= 72278) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (72279 <= code2 && code2 <= 72280) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 72324) {\n                            if (72281 <= code2 && code2 <= 72283) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 72330) {\n                              if (72324 <= code2 && code2 <= 72329) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            } else {\n                              if (72330 <= code2 && code2 <= 72342) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 94033) {\n                  if (code2 < 73104) {\n                    if (code2 < 72881) {\n                      if (code2 < 72766) {\n                        if (code2 < 72751) {\n                          if (code2 < 72344) {\n                            if (72343 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (72344 <= code2 && code2 <= 72345) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 72752) {\n                            if (72751 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 72760) {\n                              if (72752 <= code2 && code2 <= 72758) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (72760 <= code2 && code2 <= 72765) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 72850) {\n                          if (72766 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (72767 === code2) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 72873) {\n                            if (72850 <= code2 && code2 <= 72871) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 72874) {\n                              if (72873 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (72874 <= code2 && code2 <= 72880) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 73018) {\n                        if (code2 < 72884) {\n                          if (code2 < 72882) {\n                            if (72881 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (72882 <= code2 && code2 <= 72883) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 72885) {\n                            if (72884 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 73009) {\n                              if (72885 <= code2 && code2 <= 72886) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (73009 <= code2 && code2 <= 73014) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 73030) {\n                          if (code2 < 73020) {\n                            if (73018 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 73023) {\n                              if (73020 <= code2 && code2 <= 73021) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (73023 <= code2 && code2 <= 73029) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 73031) {\n                            if (73030 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 < 73098) {\n                              if (73031 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (73098 <= code2 && code2 <= 73102) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 73526) {\n                      if (code2 < 73459) {\n                        if (code2 < 73109) {\n                          if (code2 < 73107) {\n                            if (73104 <= code2 && code2 <= 73105) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (73107 <= code2 && code2 <= 73108) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 73110) {\n                            if (73109 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (73110 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (73111 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 73474) {\n                          if (code2 < 73461) {\n                            if (73459 <= code2 && code2 <= 73460) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 73472) {\n                              if (73461 <= code2 && code2 <= 73462) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (73472 <= code2 && code2 <= 73473) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 73475) {\n                            if (73474 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 < 73524) {\n                              if (73475 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (73524 <= code2 && code2 <= 73525) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 78896) {\n                        if (code2 < 73536) {\n                          if (code2 < 73534) {\n                            if (73526 <= code2 && code2 <= 73530) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (73534 <= code2 && code2 <= 73535) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 73537) {\n                            if (73536 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (73537 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (73538 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 92912) {\n                          if (code2 < 78912) {\n                            if (78896 <= code2 && code2 <= 78911) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 78919) {\n                              if (78912 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (78919 <= code2 && code2 <= 78933) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 92976) {\n                            if (92912 <= code2 && code2 <= 92916) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 94031) {\n                              if (92976 <= code2 && code2 <= 92982) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (94031 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 121476) {\n                    if (code2 < 119143) {\n                      if (code2 < 113824) {\n                        if (code2 < 94180) {\n                          if (code2 < 94095) {\n                            if (94033 <= code2 && code2 <= 94087) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (94095 <= code2 && code2 <= 94098) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 94192) {\n                            if (94180 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 113821) {\n                              if (94192 <= code2 && code2 <= 94193) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (113821 <= code2 && code2 <= 113822) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 118576) {\n                          if (code2 < 118528) {\n                            if (113824 <= code2 && code2 <= 113827) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (118528 <= code2 && code2 <= 118573) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 119141) {\n                            if (118576 <= code2 && code2 <= 118598) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (119141 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (119142 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 119173) {\n                        if (code2 < 119150) {\n                          if (code2 < 119149) {\n                            if (119143 <= code2 && code2 <= 119145) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (119149 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 119155) {\n                            if (119150 <= code2 && code2 <= 119154) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 119163) {\n                              if (119155 <= code2 && code2 <= 119162) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (119163 <= code2 && code2 <= 119170) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 121344) {\n                          if (code2 < 119210) {\n                            if (119173 <= code2 && code2 <= 119179) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 119362) {\n                              if (119210 <= code2 && code2 <= 119213) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (119362 <= code2 && code2 <= 119364) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 121403) {\n                            if (121344 <= code2 && code2 <= 121398) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 121461) {\n                              if (121403 <= code2 && code2 <= 121452) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (121461 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 123628) {\n                      if (code2 < 122907) {\n                        if (code2 < 121505) {\n                          if (code2 < 121499) {\n                            if (121476 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (121499 <= code2 && code2 <= 121503) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 122880) {\n                            if (121505 <= code2 && code2 <= 121519) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 122888) {\n                              if (122880 <= code2 && code2 <= 122886) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (122888 <= code2 && code2 <= 122904) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 123023) {\n                          if (code2 < 122915) {\n                            if (122907 <= code2 && code2 <= 122913) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 122918) {\n                              if (122915 <= code2 && code2 <= 122916) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (122918 <= code2 && code2 <= 122922) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 123184) {\n                            if (123023 === code2) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 123566) {\n                              if (123184 <= code2 && code2 <= 123190) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (123566 === code2) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 127995) {\n                        if (code2 < 125136) {\n                          if (code2 < 124140) {\n                            if (123628 <= code2 && code2 <= 123631) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (124140 <= code2 && code2 <= 124143) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 125252) {\n                            if (125136 <= code2 && code2 <= 125142) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 127462) {\n                              if (125252 <= code2 && code2 <= 125258) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (127462 <= code2 && code2 <= 127487) {\n                                return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 917632) {\n                          if (code2 < 917504) {\n                            if (127995 <= code2 && code2 <= 127999) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 917536) {\n                              if (917504 <= code2 && code2 <= 917535) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (917536 <= code2 && code2 <= 917631) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 917760) {\n                            if (917632 <= code2 && code2 <= 917759) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 918e3) {\n                              if (917760 <= code2 && code2 <= 917999) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (918e3 <= code2 && code2 <= 921599) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return boundaries_1.CLUSTER_BREAK.OTHER;\n      }\n      static getEmojiProperty(code2) {\n        if (code2 < 10160) {\n          if (code2 < 9728) {\n            if (code2 < 9e3) {\n              if (code2 < 8482) {\n                if (code2 < 8252) {\n                  if (169 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (174 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (8252 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (8265 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                }\n              } else {\n                if (code2 < 8596) {\n                  if (8482 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (8505 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 8617) {\n                    if (8596 <= code2 && code2 <= 8601) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 8986) {\n                      if (8617 <= code2 && code2 <= 8618) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (8986 <= code2 && code2 <= 8987) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 9410) {\n                if (code2 < 9167) {\n                  if (9e3 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (9096 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 9193) {\n                    if (9167 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 9208) {\n                      if (9193 <= code2 && code2 <= 9203) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (9208 <= code2 && code2 <= 9210) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 9654) {\n                  if (code2 < 9642) {\n                    if (9410 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (9642 <= code2 && code2 <= 9643) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 9664) {\n                    if (9654 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 9723) {\n                      if (9664 === code2) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (9723 <= code2 && code2 <= 9726) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 10035) {\n              if (code2 < 10004) {\n                if (code2 < 9748) {\n                  if (code2 < 9735) {\n                    if (9728 <= code2 && code2 <= 9733) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (9735 <= code2 && code2 <= 9746) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 9872) {\n                    if (9748 <= code2 && code2 <= 9861) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 9992) {\n                      if (9872 <= code2 && code2 <= 9989) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (9992 <= code2 && code2 <= 10002) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 10013) {\n                  if (10004 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (10006 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 10017) {\n                    if (10013 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (10017 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                    if (10024 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 10067) {\n                if (code2 < 10055) {\n                  if (code2 < 10052) {\n                    if (10035 <= code2 && code2 <= 10036) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (10052 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 10060) {\n                    if (10055 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (10060 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                    if (10062 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 10083) {\n                  if (code2 < 10071) {\n                    if (10067 <= code2 && code2 <= 10069) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (10071 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 10133) {\n                    if (10083 <= code2 && code2 <= 10087) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 10145) {\n                      if (10133 <= code2 && code2 <= 10135) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (10145 === code2) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          if (code2 < 127489) {\n            if (code2 < 12951) {\n              if (code2 < 11035) {\n                if (code2 < 10548) {\n                  if (10160 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (10175 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 11013) {\n                    if (10548 <= code2 && code2 <= 10549) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (11013 <= code2 && code2 <= 11015) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 11093) {\n                  if (code2 < 11088) {\n                    if (11035 <= code2 && code2 <= 11036) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (11088 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 12336) {\n                    if (11093 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (12336 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                    if (12349 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 127340) {\n                if (code2 < 126976) {\n                  if (12951 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (12953 === code2) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 127245) {\n                    if (126976 <= code2 && code2 <= 127231) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 127279) {\n                      if (127245 <= code2 && code2 <= 127247) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (127279 === code2) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 127374) {\n                  if (code2 < 127358) {\n                    if (127340 <= code2 && code2 <= 127345) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (127358 <= code2 && code2 <= 127359) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 127377) {\n                    if (127374 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 127405) {\n                      if (127377 <= code2 && code2 <= 127386) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (127405 <= code2 && code2 <= 127461) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 128981) {\n              if (code2 < 127561) {\n                if (code2 < 127535) {\n                  if (code2 < 127514) {\n                    if (127489 <= code2 && code2 <= 127503) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (127514 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 127538) {\n                    if (127535 === code2) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 127548) {\n                      if (127538 <= code2 && code2 <= 127546) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (127548 <= code2 && code2 <= 127551) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 128326) {\n                  if (code2 < 128e3) {\n                    if (127561 <= code2 && code2 <= 127994) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (128e3 <= code2 && code2 <= 128317) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 128640) {\n                    if (128326 <= code2 && code2 <= 128591) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 128884) {\n                      if (128640 <= code2 && code2 <= 128767) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (128884 <= code2 && code2 <= 128895) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 129198) {\n                if (code2 < 129096) {\n                  if (code2 < 129036) {\n                    if (128981 <= code2 && code2 <= 129023) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (129036 <= code2 && code2 <= 129039) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 129114) {\n                    if (129096 <= code2 && code2 <= 129103) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 129160) {\n                      if (129114 <= code2 && code2 <= 129119) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (129160 <= code2 && code2 <= 129167) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 129340) {\n                  if (code2 < 129292) {\n                    if (129198 <= code2 && code2 <= 129279) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (129292 <= code2 && code2 <= 129338) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 129351) {\n                    if (129340 <= code2 && code2 <= 129349) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 130048) {\n                      if (129351 <= code2 && code2 <= 129791) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (130048 <= code2 && code2 <= 131069) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return boundaries_1.CLUSTER_BREAK.OTHER;\n      }\n    };\n    exports.default = Graphemer2;\n  }\n});\n\n// ../../node_modules/graphemer/lib/index.js\nvar require_lib = __commonJS({\n  \"../../node_modules/graphemer/lib/index.js\"(exports) {\n    \"use strict\";\n    var __importDefault = exports && exports.__importDefault || function(mod) {\n      return mod && mod.__esModule ? mod : { \"default\": mod };\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Graphemer_1 = __importDefault(require_Graphemer());\n    exports.default = Graphemer_1.default;\n  }\n});\n\n// ../../node_modules/iso-datestring-validator/dist/index.js\nvar require_dist = __commonJS({\n  \"../../node_modules/iso-datestring-validator/dist/index.js\"(exports) {\n    (() => {\n      \"use strict\";\n      var e = { d: (t2, r2) => {\n        for (var n2 in r2)\n          e.o(r2, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: r2[n2] });\n      }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(e2, \"__esModule\", { value: true });\n      } }, t = {};\n      function r(e2, t2) {\n        return void 0 === t2 && (t2 = \"-\"), new RegExp(\"^(?!0{4}\" + t2 + \"0{2}\" + t2 + \"0{2})((?=[0-9]{4}\" + t2 + \"(((0[^2])|1[0-2])|02(?=\" + t2 + \"(([0-1][0-9])|2[0-8])))\" + t2 + \"[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))\" + t2 + \"02\" + t2 + \"29))([0-9]{4})\" + t2 + \"(?!((0[469])|11)\" + t2 + \"31)((0[1,3-9]|1[0-2])|(02(?!\" + t2 + \"3)))\" + t2 + \"(0[1-9]|[1-2][0-9]|3[0-1])$\").test(e2);\n      }\n      function n(e2) {\n        var t2 = /\\D/.exec(e2);\n        return t2 ? t2[0] : \"\";\n      }\n      function i(e2, t2, r2) {\n        void 0 === t2 && (t2 = \":\"), void 0 === r2 && (r2 = false);\n        var i2 = new RegExp(\"^([0-1]|2(?=([0-3])|4\" + t2 + \"00))[0-9]\" + t2 + \"[0-5][0-9](\" + t2 + \"([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$\");\n        if (!r2 || !/[Z+\\-]/.test(e2))\n          return i2.test(e2);\n        if (/Z$/.test(e2))\n          return i2.test(e2.replace(\"Z\", \"\"));\n        var o2 = e2.includes(\"+\"), a2 = e2.split(/[+-]/), u2 = a2[0], d2 = a2[1];\n        return i2.test(u2) && function(e3, t3, r3) {\n          return void 0 === r3 && (r3 = \":\"), new RegExp(t3 ? \"^(0(?!(2\" + r3 + \"4)|0\" + r3 + \"3)|1(?=([0-1]|2(?=\" + r3 + \"[04])|[34](?=\" + r3 + \"0))))([03469](?=\" + r3 + \"[03])|[17](?=\" + r3 + \"0)|2(?=\" + r3 + \"[04])|5(?=\" + r3 + \"[034])|8(?=\" + r3 + \"[04]))\" + r3 + \"([03](?=0)|4(?=5))[05]$\" : \"^(0(?=[^0])|1(?=[0-2]))([39](?=\" + r3 + \"[03])|[0-24-8](?=\" + r3 + \"00))\" + r3 + \"[03]0$\").test(e3);\n        }(d2, o2, n(d2));\n      }\n      function o(e2) {\n        var t2 = e2.split(\"T\"), o2 = t2[0], a2 = t2[1], u2 = r(o2, n(o2));\n        if (!a2)\n          return false;\n        var d2, s = (d2 = a2.match(/([^Z+\\-\\d])(?=\\d+\\1)/), Array.isArray(d2) ? d2[0] : \"\");\n        return u2 && i(a2, s, true);\n      }\n      function a(e2, t2) {\n        return void 0 === t2 && (t2 = \"-\"), new RegExp(\"^[0-9]{4}\" + t2 + \"(0(?=[^0])|1(?=[0-2]))[0-9]$\").test(e2);\n      }\n      e.r(t), e.d(t, { isValidDate: () => r, isValidISODateString: () => o, isValidTime: () => i, isValidYearMonth: () => a });\n      var u = exports;\n      for (var d in t)\n        u[d] = t[d];\n      t.__esModule && Object.defineProperty(u, \"__esModule\", { value: true });\n    })();\n  }\n});\n\n// src/index.ts\nvar src_exports4 = {};\n__export(src_exports4, {\n  APP_BSKY_GRAPH: () => APP_BSKY_GRAPH,\n  ActorNS: () => ActorNS,\n  AdminNS: () => AdminNS,\n  AppBskyActorDefs: () => defs_exports5,\n  AppBskyActorGetPreferences: () => getPreferences_exports,\n  AppBskyActorGetProfile: () => getProfile_exports,\n  AppBskyActorGetProfiles: () => getProfiles_exports,\n  AppBskyActorGetSuggestions: () => getSuggestions_exports,\n  AppBskyActorProfile: () => profile_exports,\n  AppBskyActorPutPreferences: () => putPreferences_exports,\n  AppBskyActorSearchActors: () => searchActors_exports,\n  AppBskyActorSearchActorsTypeahead: () => searchActorsTypeahead_exports,\n  AppBskyEmbedExternal: () => external_exports,\n  AppBskyEmbedImages: () => images_exports,\n  AppBskyEmbedRecord: () => record_exports,\n  AppBskyEmbedRecordWithMedia: () => recordWithMedia_exports,\n  AppBskyFeedDefs: () => defs_exports6,\n  AppBskyFeedDescribeFeedGenerator: () => describeFeedGenerator_exports,\n  AppBskyFeedGenerator: () => generator_exports,\n  AppBskyFeedGetActorFeeds: () => getActorFeeds_exports,\n  AppBskyFeedGetAuthorFeed: () => getAuthorFeed_exports,\n  AppBskyFeedGetFeed: () => getFeed_exports,\n  AppBskyFeedGetFeedGenerator: () => getFeedGenerator_exports,\n  AppBskyFeedGetFeedGenerators: () => getFeedGenerators_exports,\n  AppBskyFeedGetFeedSkeleton: () => getFeedSkeleton_exports,\n  AppBskyFeedGetLikes: () => getLikes_exports,\n  AppBskyFeedGetPostThread: () => getPostThread_exports,\n  AppBskyFeedGetPosts: () => getPosts_exports,\n  AppBskyFeedGetRepostedBy: () => getRepostedBy_exports,\n  AppBskyFeedGetTimeline: () => getTimeline_exports,\n  AppBskyFeedLike: () => like_exports,\n  AppBskyFeedPost: () => post_exports,\n  AppBskyFeedRepost: () => repost_exports,\n  AppBskyGraphBlock: () => block_exports,\n  AppBskyGraphDefs: () => defs_exports7,\n  AppBskyGraphFollow: () => follow_exports,\n  AppBskyGraphGetBlocks: () => getBlocks_exports2,\n  AppBskyGraphGetFollowers: () => getFollowers_exports,\n  AppBskyGraphGetFollows: () => getFollows_exports,\n  AppBskyGraphGetList: () => getList_exports,\n  AppBskyGraphGetListMutes: () => getListMutes_exports,\n  AppBskyGraphGetLists: () => getLists_exports,\n  AppBskyGraphGetMutes: () => getMutes_exports,\n  AppBskyGraphList: () => list_exports,\n  AppBskyGraphListitem: () => listitem_exports,\n  AppBskyGraphMuteActor: () => muteActor_exports,\n  AppBskyGraphMuteActorList: () => muteActorList_exports,\n  AppBskyGraphUnmuteActor: () => unmuteActor_exports,\n  AppBskyGraphUnmuteActorList: () => unmuteActorList_exports,\n  AppBskyNotificationGetUnreadCount: () => getUnreadCount_exports,\n  AppBskyNotificationListNotifications: () => listNotifications_exports,\n  AppBskyNotificationUpdateSeen: () => updateSeen_exports,\n  AppBskyRichtextFacet: () => facet_exports,\n  AppBskyUnspeccedApplyLabels: () => applyLabels_exports,\n  AppBskyUnspeccedGetPopular: () => getPopular_exports,\n  AppBskyUnspeccedGetPopularFeedGenerators: () => getPopularFeedGenerators_exports,\n  AppBskyUnspeccedGetTimelineSkeleton: () => getTimelineSkeleton_exports,\n  AppNS: () => AppNS,\n  AtUri: () => AtUri,\n  AtpAgent: () => AtpAgent,\n  AtpBaseClient: () => AtpBaseClient,\n  AtpServiceClient: () => AtpServiceClient,\n  AtprotoNS: () => AtprotoNS,\n  BlobRef: () => BlobRef,\n  BlockRecord: () => BlockRecord,\n  BskyAgent: () => BskyAgent,\n  BskyNS: () => BskyNS,\n  COM_ATPROTO_ADMIN: () => COM_ATPROTO_ADMIN,\n  COM_ATPROTO_MODERATION: () => COM_ATPROTO_MODERATION,\n  ComAtprotoAdminDefs: () => defs_exports,\n  ComAtprotoAdminDisableAccountInvites: () => disableAccountInvites_exports,\n  ComAtprotoAdminDisableInviteCodes: () => disableInviteCodes_exports,\n  ComAtprotoAdminEnableAccountInvites: () => enableAccountInvites_exports,\n  ComAtprotoAdminGetInviteCodes: () => getInviteCodes_exports,\n  ComAtprotoAdminGetModerationAction: () => getModerationAction_exports,\n  ComAtprotoAdminGetModerationActions: () => getModerationActions_exports,\n  ComAtprotoAdminGetModerationReport: () => getModerationReport_exports,\n  ComAtprotoAdminGetModerationReports: () => getModerationReports_exports,\n  ComAtprotoAdminGetRecord: () => getRecord_exports,\n  ComAtprotoAdminGetRepo: () => getRepo_exports,\n  ComAtprotoAdminRebaseRepo: () => rebaseRepo_exports,\n  ComAtprotoAdminResolveModerationReports: () => resolveModerationReports_exports,\n  ComAtprotoAdminReverseModerationAction: () => reverseModerationAction_exports,\n  ComAtprotoAdminSearchRepos: () => searchRepos_exports,\n  ComAtprotoAdminSendEmail: () => sendEmail_exports,\n  ComAtprotoAdminTakeModerationAction: () => takeModerationAction_exports,\n  ComAtprotoAdminUpdateAccountEmail: () => updateAccountEmail_exports,\n  ComAtprotoAdminUpdateAccountHandle: () => updateAccountHandle_exports,\n  ComAtprotoIdentityResolveHandle: () => resolveHandle_exports,\n  ComAtprotoIdentityUpdateHandle: () => updateHandle_exports,\n  ComAtprotoLabelDefs: () => defs_exports2,\n  ComAtprotoLabelQueryLabels: () => queryLabels_exports,\n  ComAtprotoLabelSubscribeLabels: () => subscribeLabels_exports,\n  ComAtprotoModerationCreateReport: () => createReport_exports,\n  ComAtprotoModerationDefs: () => defs_exports3,\n  ComAtprotoRepoApplyWrites: () => applyWrites_exports,\n  ComAtprotoRepoCreateRecord: () => createRecord_exports,\n  ComAtprotoRepoDeleteRecord: () => deleteRecord_exports,\n  ComAtprotoRepoDescribeRepo: () => describeRepo_exports,\n  ComAtprotoRepoGetRecord: () => getRecord_exports2,\n  ComAtprotoRepoListRecords: () => listRecords_exports,\n  ComAtprotoRepoPutRecord: () => putRecord_exports,\n  ComAtprotoRepoRebaseRepo: () => rebaseRepo_exports2,\n  ComAtprotoRepoStrongRef: () => strongRef_exports,\n  ComAtprotoRepoUploadBlob: () => uploadBlob_exports,\n  ComAtprotoServerCreateAccount: () => createAccount_exports,\n  ComAtprotoServerCreateAppPassword: () => createAppPassword_exports,\n  ComAtprotoServerCreateInviteCode: () => createInviteCode_exports,\n  ComAtprotoServerCreateInviteCodes: () => createInviteCodes_exports,\n  ComAtprotoServerCreateSession: () => createSession_exports,\n  ComAtprotoServerDefs: () => defs_exports4,\n  ComAtprotoServerDeleteAccount: () => deleteAccount_exports,\n  ComAtprotoServerDeleteSession: () => deleteSession_exports,\n  ComAtprotoServerDescribeServer: () => describeServer_exports,\n  ComAtprotoServerGetAccountInviteCodes: () => getAccountInviteCodes_exports,\n  ComAtprotoServerGetSession: () => getSession_exports,\n  ComAtprotoServerListAppPasswords: () => listAppPasswords_exports,\n  ComAtprotoServerRefreshSession: () => refreshSession_exports,\n  ComAtprotoServerRequestAccountDelete: () => requestAccountDelete_exports,\n  ComAtprotoServerRequestPasswordReset: () => requestPasswordReset_exports,\n  ComAtprotoServerResetPassword: () => resetPassword_exports,\n  ComAtprotoServerRevokeAppPassword: () => revokeAppPassword_exports,\n  ComAtprotoSyncGetBlob: () => getBlob_exports,\n  ComAtprotoSyncGetBlocks: () => getBlocks_exports,\n  ComAtprotoSyncGetCheckout: () => getCheckout_exports,\n  ComAtprotoSyncGetCommitPath: () => getCommitPath_exports,\n  ComAtprotoSyncGetHead: () => getHead_exports,\n  ComAtprotoSyncGetRecord: () => getRecord_exports3,\n  ComAtprotoSyncGetRepo: () => getRepo_exports2,\n  ComAtprotoSyncListBlobs: () => listBlobs_exports,\n  ComAtprotoSyncListRepos: () => listRepos_exports,\n  ComAtprotoSyncNotifyOfUpdate: () => notifyOfUpdate_exports,\n  ComAtprotoSyncRequestCrawl: () => requestCrawl_exports,\n  ComAtprotoSyncSubscribeRepos: () => subscribeRepos_exports,\n  ComNS: () => ComNS,\n  EmbedNS: () => EmbedNS,\n  FeedNS: () => FeedNS,\n  FollowRecord: () => FollowRecord,\n  GeneratorRecord: () => GeneratorRecord,\n  GraphNS: () => GraphNS,\n  IdentityNS: () => IdentityNS,\n  LABELS: () => LABELS,\n  LABEL_GROUPS: () => LABEL_GROUPS,\n  LabelNS: () => LabelNS,\n  LikeRecord: () => LikeRecord,\n  ListRecord: () => ListRecord,\n  ListitemRecord: () => ListitemRecord,\n  ModerationDecision: () => ModerationDecision,\n  ModerationNS: () => ModerationNS,\n  NotificationNS: () => NotificationNS,\n  PostRecord: () => PostRecord,\n  ProfileRecord: () => ProfileRecord,\n  RepoNS: () => RepoNS,\n  RepostRecord: () => RepostRecord,\n  RichText: () => RichText,\n  RichTextSegment: () => RichTextSegment,\n  RichtextNS: () => RichtextNS,\n  ServerNS: () => ServerNS,\n  SyncNS: () => SyncNS,\n  UnicodeString: () => UnicodeString,\n  UnspeccedNS: () => UnspeccedNS,\n  default: () => AtpAgent,\n  jsonStringToLex: () => jsonStringToLex,\n  jsonToLex: () => jsonToLex,\n  lexToJson: () => lexToJson,\n  moderateFeedGenerator: () => moderateFeedGenerator,\n  moderatePost: () => moderatePost,\n  moderateProfile: () => moderateProfile,\n  moderateUserList: () => moderateUserList,\n  parseLanguage: () => parseLanguage,\n  sanitizeRichText: () => sanitizeRichText,\n  stringifyLex: () => stringifyLex\n});\nmodule.exports = __toCommonJS(src_exports4);\n\n// ../identifier/src/handle.ts\nvar ensureValidHandle = (handle2) => {\n  if (!/^[a-zA-Z0-9.-]*$/.test(handle2)) {\n    throw new InvalidHandleError(\n      \"Disallowed characters in handle (ASCII letters, digits, dashes, periods only)\"\n    );\n  }\n  if (handle2.length > 253) {\n    throw new InvalidHandleError(\"Handle is too long (253 chars max)\");\n  }\n  const labels = handle2.split(\".\");\n  if (labels.length < 2) {\n    throw new InvalidHandleError(\"Handle domain needs at least two parts\");\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i];\n    if (l.length < 1) {\n      throw new InvalidHandleError(\"Handle parts can not be empty\");\n    }\n    if (l.length > 63) {\n      throw new InvalidHandleError(\"Handle part too long (max 63 chars)\");\n    }\n    if (l.endsWith(\"-\") || l.startsWith(\"-\")) {\n      throw new InvalidHandleError(\n        \"Handle parts can not start or end with hyphens\"\n      );\n    }\n    if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {\n      throw new InvalidHandleError(\n        \"Handle final component (TLD) must start with ASCII letter\"\n      );\n    }\n  }\n};\nvar InvalidHandleError = class extends Error {\n};\n\n// ../identifier/src/did.ts\nvar ensureValidDid = (did2) => {\n  if (!/^[a-zA-Z0-9._:%-]*$/.test(did2)) {\n    throw new InvalidDidError(\n      \"Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)\"\n    );\n  }\n  const parts = did2.split(\":\");\n  if (parts.length < 3) {\n    throw new InvalidDidError(\n      \"DID requires prefix, method, and method-specific content\"\n    );\n  }\n  if (parts[0] != \"did\") {\n    throw new InvalidDidError('DID requires \"did:\" prefix');\n  }\n  if (!/^[a-z]+$/.test(parts[1])) {\n    throw new InvalidDidError(\"DID method must be lower-case letters\");\n  }\n  if (did2.endsWith(\":\") || did2.endsWith(\"%\")) {\n    throw new InvalidDidError('DID can not end with \":\" or \"%\"');\n  }\n  if (did2.length > 2 * 1024) {\n    throw new InvalidDidError(\"DID is too long (2048 chars max)\");\n  }\n};\nvar InvalidDidError = class extends Error {\n};\n\n// ../nsid/src/index.ts\nvar NSID = class {\n  constructor(nsid2) {\n    this.segments = [];\n    ensureValidNsid(nsid2);\n    this.segments = nsid2.split(\".\");\n  }\n  static parse(nsid2) {\n    return new NSID(nsid2);\n  }\n  static create(authority, name2) {\n    const segments = [...authority.split(\".\").reverse(), name2].join(\".\");\n    return new NSID(segments);\n  }\n  static isValid(nsid2) {\n    try {\n      NSID.parse(nsid2);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  get authority() {\n    return this.segments.slice(0, this.segments.length - 1).reverse().join(\".\");\n  }\n  get name() {\n    return this.segments.at(this.segments.length - 1);\n  }\n  toString() {\n    return this.segments.join(\".\");\n  }\n};\nvar ensureValidNsid = (nsid2) => {\n  const toCheck = nsid2;\n  if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {\n    throw new InvalidNsidError(\n      \"Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)\"\n    );\n  }\n  if (toCheck.length > 253 + 1 + 63) {\n    throw new InvalidNsidError(\"NSID is too long (317 chars max)\");\n  }\n  const labels = toCheck.split(\".\");\n  if (labels.length < 3) {\n    throw new InvalidNsidError(\"NSID needs at least three parts\");\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i];\n    if (l.length < 1) {\n      throw new InvalidNsidError(\"NSID parts can not be empty\");\n    }\n    if (l.length > 63) {\n      throw new InvalidNsidError(\"NSID part too long (max 63 chars)\");\n    }\n    if (l.endsWith(\"-\") || l.startsWith(\"-\")) {\n      throw new InvalidNsidError(\"NSID parts can not start or end with hyphen\");\n    }\n    if (/^[0-9]/.test(l) && i == 0) {\n      throw new InvalidNsidError(\"NSID first part may not start with a digit\");\n    }\n    if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {\n      throw new InvalidNsidError(\"NSID name part must be only letters\");\n    }\n  }\n};\nvar InvalidNsidError = class extends Error {\n};\n\n// ../uri/src/validation.ts\nvar ensureValidAtUri = (uri2) => {\n  const uriParts = uri2.split(\"#\");\n  if (uriParts.length > 2) {\n    throw new Error('ATURI can have at most one \"#\", separating fragment out');\n  }\n  const fragmentPart = uriParts[1] || null;\n  uri2 = uriParts[0];\n  if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri2)) {\n    throw new Error(\"Disallowed characters in ATURI (ASCII)\");\n  }\n  const parts = uri2.split(\"/\");\n  if (parts.length >= 3 && (parts[0] != \"at:\" || parts[1].length != 0)) {\n    throw new Error('ATURI must start with \"at://\"');\n  }\n  if (parts.length < 3) {\n    throw new Error(\"ATURI requires at least method and authority sections\");\n  }\n  try {\n    ensureValidHandle(parts[2]);\n  } catch {\n    try {\n      ensureValidDid(parts[2]);\n    } catch {\n      throw new Error(\"ATURI authority must be a valid handle or DID\");\n    }\n  }\n  if (parts.length >= 4) {\n    if (parts[3].length == 0) {\n      throw new Error(\n        \"ATURI can not have a slash after authority without a path segment\"\n      );\n    }\n    try {\n      ensureValidNsid(parts[3]);\n    } catch {\n      throw new Error(\n        \"ATURI requires first path segment (if supplied) to be valid NSID\"\n      );\n    }\n  }\n  if (parts.length >= 5) {\n    if (parts[4].length == 0) {\n      throw new Error(\n        \"ATURI can not have a slash after collection, unless record key is provided\"\n      );\n    }\n  }\n  if (parts.length >= 6) {\n    throw new Error(\n      \"ATURI path can have at most two parts, and no trailing slash\"\n    );\n  }\n  if (uriParts.length >= 2 && fragmentPart == null) {\n    throw new Error(\"ATURI fragment must be non-empty and start with slash\");\n  }\n  if (fragmentPart != null) {\n    if (fragmentPart.length == 0 || fragmentPart[0] != \"/\") {\n      throw new Error(\"ATURI fragment must be non-empty and start with slash\");\n    }\n    if (!/^\\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\\]/-]*$/.test(fragmentPart)) {\n      throw new Error(\"Disallowed characters in ATURI fragment (ASCII)\");\n    }\n  }\n  if (uri2.length > 8 * 1024) {\n    throw new Error(\"ATURI is far too long\");\n  }\n};\n\n// ../uri/src/index.ts\nvar ATP_URI_REGEX = /^(at:\\/\\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i;\nvar RELATIVE_REGEX = /^(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i;\nvar AtUri = class {\n  constructor(uri2, base3) {\n    let parsed;\n    if (base3) {\n      parsed = parse(base3);\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${base3}`);\n      }\n      const relativep = parseRelative(uri2);\n      if (!relativep) {\n        throw new Error(`Invalid path: ${uri2}`);\n      }\n      Object.assign(parsed, relativep);\n    } else {\n      parsed = parse(uri2);\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${uri2}`);\n      }\n    }\n    this.hash = parsed.hash;\n    this.host = parsed.host;\n    this.pathname = parsed.pathname;\n    this.searchParams = parsed.searchParams;\n  }\n  static make(handleOrDid, collection, rkey) {\n    let str = handleOrDid;\n    if (collection)\n      str += \"/\" + collection;\n    if (rkey)\n      str += \"/\" + rkey;\n    return new AtUri(str);\n  }\n  get protocol() {\n    return \"at:\";\n  }\n  get origin() {\n    return `at://${this.host}`;\n  }\n  get hostname() {\n    return this.host;\n  }\n  set hostname(v) {\n    this.host = v;\n  }\n  get search() {\n    return this.searchParams.toString();\n  }\n  set search(v) {\n    this.searchParams = new URLSearchParams(v);\n  }\n  get collection() {\n    return this.pathname.split(\"/\").filter(Boolean)[0] || \"\";\n  }\n  set collection(v) {\n    const parts = this.pathname.split(\"/\").filter(Boolean);\n    parts[0] = v;\n    this.pathname = parts.join(\"/\");\n  }\n  get rkey() {\n    return this.pathname.split(\"/\").filter(Boolean)[1] || \"\";\n  }\n  set rkey(v) {\n    const parts = this.pathname.split(\"/\").filter(Boolean);\n    if (!parts[0])\n      parts[0] = \"undefined\";\n    parts[1] = v;\n    this.pathname = parts.join(\"/\");\n  }\n  get href() {\n    return this.toString();\n  }\n  toString() {\n    let path = this.pathname || \"/\";\n    if (!path.startsWith(\"/\")) {\n      path = `/${path}`;\n    }\n    let qs = this.searchParams.toString();\n    if (qs && !qs.startsWith(\"?\")) {\n      qs = `?${qs}`;\n    }\n    let hash = this.hash;\n    if (hash && !hash.startsWith(\"#\")) {\n      hash = `#${hash}`;\n    }\n    return `at://${this.host}${path}${qs}${hash}`;\n  }\n};\nfunction parse(str) {\n  const match = ATP_URI_REGEX.exec(str);\n  if (match) {\n    return {\n      hash: match[5] || \"\",\n      host: match[2] || \"\",\n      pathname: match[3] || \"\",\n      searchParams: new URLSearchParams(match[4] || \"\")\n    };\n  }\n  return void 0;\n}\nfunction parseRelative(str) {\n  const match = RELATIVE_REGEX.exec(str);\n  if (match) {\n    return {\n      hash: match[3] || \"\",\n      pathname: match[1] || \"\",\n      searchParams: new URLSearchParams(match[2] || \"\")\n    };\n  }\n  return void 0;\n}\n\n// ../../node_modules/zod/lib/index.mjs\nvar util;\n(function(util2) {\n  util2.assertEqual = (val) => val;\n  function assertIs(_arg) {\n  }\n  util2.assertIs = assertIs;\n  function assertNever(_x) {\n    throw new Error();\n  }\n  util2.assertNever = assertNever;\n  util2.arrayToEnum = (items) => {\n    const obj = {};\n    for (const item of items) {\n      obj[item] = item;\n    }\n    return obj;\n  };\n  util2.getValidEnumValues = (obj) => {\n    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n    const filtered = {};\n    for (const k of validKeys) {\n      filtered[k] = obj[k];\n    }\n    return util2.objectValues(filtered);\n  };\n  util2.objectValues = (obj) => {\n    return util2.objectKeys(obj).map(function(e) {\n      return obj[e];\n    });\n  };\n  util2.objectKeys = typeof Object.keys === \"function\" ? (obj) => Object.keys(obj) : (object2) => {\n    const keys = [];\n    for (const key in object2) {\n      if (Object.prototype.hasOwnProperty.call(object2, key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n  util2.find = (arr, checker) => {\n    for (const item of arr) {\n      if (checker(item))\n        return item;\n    }\n    return void 0;\n  };\n  util2.isInteger = typeof Number.isInteger === \"function\" ? (val) => Number.isInteger(val) : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n  function joinValues(array2, separator = \" | \") {\n    return array2.map((val) => typeof val === \"string\" ? `'${val}'` : val).join(separator);\n  }\n  util2.joinValues = joinValues;\n  util2.jsonStringifyReplacer = (_, value) => {\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  };\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil2) {\n  objectUtil2.mergeShapes = (first, second) => {\n    return {\n      ...first,\n      ...second\n    };\n  };\n})(objectUtil || (objectUtil = {}));\nvar ZodParsedType = util.arrayToEnum([\n  \"string\",\n  \"nan\",\n  \"number\",\n  \"integer\",\n  \"float\",\n  \"boolean\",\n  \"date\",\n  \"bigint\",\n  \"symbol\",\n  \"function\",\n  \"undefined\",\n  \"null\",\n  \"array\",\n  \"object\",\n  \"unknown\",\n  \"promise\",\n  \"void\",\n  \"never\",\n  \"map\",\n  \"set\"\n]);\nvar getParsedType = (data) => {\n  const t = typeof data;\n  switch (t) {\n    case \"undefined\":\n      return ZodParsedType.undefined;\n    case \"string\":\n      return ZodParsedType.string;\n    case \"number\":\n      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n    case \"boolean\":\n      return ZodParsedType.boolean;\n    case \"function\":\n      return ZodParsedType.function;\n    case \"bigint\":\n      return ZodParsedType.bigint;\n    case \"symbol\":\n      return ZodParsedType.symbol;\n    case \"object\":\n      if (Array.isArray(data)) {\n        return ZodParsedType.array;\n      }\n      if (data === null) {\n        return ZodParsedType.null;\n      }\n      if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n        return ZodParsedType.promise;\n      }\n      if (typeof Map !== \"undefined\" && data instanceof Map) {\n        return ZodParsedType.map;\n      }\n      if (typeof Set !== \"undefined\" && data instanceof Set) {\n        return ZodParsedType.set;\n      }\n      if (typeof Date !== \"undefined\" && data instanceof Date) {\n        return ZodParsedType.date;\n      }\n      return ZodParsedType.object;\n    default:\n      return ZodParsedType.unknown;\n  }\n};\nvar ZodIssueCode = util.arrayToEnum([\n  \"invalid_type\",\n  \"invalid_literal\",\n  \"custom\",\n  \"invalid_union\",\n  \"invalid_union_discriminator\",\n  \"invalid_enum_value\",\n  \"unrecognized_keys\",\n  \"invalid_arguments\",\n  \"invalid_return_type\",\n  \"invalid_date\",\n  \"invalid_string\",\n  \"too_small\",\n  \"too_big\",\n  \"invalid_intersection_types\",\n  \"not_multiple_of\",\n  \"not_finite\"\n]);\nvar quotelessJson = (obj) => {\n  const json = JSON.stringify(obj, null, 2);\n  return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nvar ZodError = class extends Error {\n  constructor(issues) {\n    super();\n    this.issues = [];\n    this.addIssue = (sub) => {\n      this.issues = [...this.issues, sub];\n    };\n    this.addIssues = (subs = []) => {\n      this.issues = [...this.issues, ...subs];\n    };\n    const actualProto = new.target.prototype;\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(this, actualProto);\n    } else {\n      this.__proto__ = actualProto;\n    }\n    this.name = \"ZodError\";\n    this.issues = issues;\n  }\n  get errors() {\n    return this.issues;\n  }\n  format(_mapper) {\n    const mapper = _mapper || function(issue) {\n      return issue.message;\n    };\n    const fieldErrors = { _errors: [] };\n    const processError = (error) => {\n      for (const issue of error.issues) {\n        if (issue.code === \"invalid_union\") {\n          issue.unionErrors.map(processError);\n        } else if (issue.code === \"invalid_return_type\") {\n          processError(issue.returnTypeError);\n        } else if (issue.code === \"invalid_arguments\") {\n          processError(issue.argumentsError);\n        } else if (issue.path.length === 0) {\n          fieldErrors._errors.push(mapper(issue));\n        } else {\n          let curr = fieldErrors;\n          let i = 0;\n          while (i < issue.path.length) {\n            const el = issue.path[i];\n            const terminal = i === issue.path.length - 1;\n            if (!terminal) {\n              curr[el] = curr[el] || { _errors: [] };\n            } else {\n              curr[el] = curr[el] || { _errors: [] };\n              curr[el]._errors.push(mapper(issue));\n            }\n            curr = curr[el];\n            i++;\n          }\n        }\n      }\n    };\n    processError(this);\n    return fieldErrors;\n  }\n  toString() {\n    return this.message;\n  }\n  get message() {\n    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n  }\n  get isEmpty() {\n    return this.issues.length === 0;\n  }\n  flatten(mapper = (issue) => issue.message) {\n    const fieldErrors = {};\n    const formErrors = [];\n    for (const sub of this.issues) {\n      if (sub.path.length > 0) {\n        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n        fieldErrors[sub.path[0]].push(mapper(sub));\n      } else {\n        formErrors.push(mapper(sub));\n      }\n    }\n    return { formErrors, fieldErrors };\n  }\n  get formErrors() {\n    return this.flatten();\n  }\n};\nZodError.create = (issues) => {\n  const error = new ZodError(issues);\n  return error;\n};\nvar errorMap = (issue, _ctx) => {\n  let message;\n  switch (issue.code) {\n    case ZodIssueCode.invalid_type:\n      if (issue.received === ZodParsedType.undefined) {\n        message = \"Required\";\n      } else {\n        message = `Expected ${issue.expected}, received ${issue.received}`;\n      }\n      break;\n    case ZodIssueCode.invalid_literal:\n      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n      break;\n    case ZodIssueCode.unrecognized_keys:\n      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n      break;\n    case ZodIssueCode.invalid_union:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_union_discriminator:\n      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n      break;\n    case ZodIssueCode.invalid_enum_value:\n      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n      break;\n    case ZodIssueCode.invalid_arguments:\n      message = `Invalid function arguments`;\n      break;\n    case ZodIssueCode.invalid_return_type:\n      message = `Invalid function return type`;\n      break;\n    case ZodIssueCode.invalid_date:\n      message = `Invalid date`;\n      break;\n    case ZodIssueCode.invalid_string:\n      if (typeof issue.validation === \"object\") {\n        if (\"includes\" in issue.validation) {\n          message = `Invalid input: must include \"${issue.validation.includes}\"`;\n          if (typeof issue.validation.position === \"number\") {\n            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n          }\n        } else if (\"startsWith\" in issue.validation) {\n          message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n        } else if (\"endsWith\" in issue.validation) {\n          message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n        } else {\n          util.assertNever(issue.validation);\n        }\n      } else if (issue.validation !== \"regex\") {\n        message = `Invalid ${issue.validation}`;\n      } else {\n        message = \"Invalid\";\n      }\n      break;\n    case ZodIssueCode.too_small:\n      if (issue.type === \"array\")\n        message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n      else if (issue.type === \"string\")\n        message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n      else if (issue.type === \"number\")\n        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n      else if (issue.type === \"date\")\n        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n      else\n        message = \"Invalid input\";\n      break;\n    case ZodIssueCode.too_big:\n      if (issue.type === \"array\")\n        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n      else if (issue.type === \"string\")\n        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n      else if (issue.type === \"number\")\n        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n      else if (issue.type === \"bigint\")\n        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n      else if (issue.type === \"date\")\n        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n      else\n        message = \"Invalid input\";\n      break;\n    case ZodIssueCode.custom:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_intersection_types:\n      message = `Intersection results could not be merged`;\n      break;\n    case ZodIssueCode.not_multiple_of:\n      message = `Number must be a multiple of ${issue.multipleOf}`;\n      break;\n    case ZodIssueCode.not_finite:\n      message = \"Number must be finite\";\n      break;\n    default:\n      message = _ctx.defaultError;\n      util.assertNever(issue);\n  }\n  return { message };\n};\nvar overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n  overrideErrorMap = map;\n}\nfunction getErrorMap() {\n  return overrideErrorMap;\n}\nvar makeIssue = (params2) => {\n  const { data, path, errorMaps, issueData } = params2;\n  const fullPath = [...path, ...issueData.path || []];\n  const fullIssue = {\n    ...issueData,\n    path: fullPath\n  };\n  let errorMessage = \"\";\n  const maps = errorMaps.filter((m) => !!m).slice().reverse();\n  for (const map of maps) {\n    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n  }\n  return {\n    ...issueData,\n    path: fullPath,\n    message: issueData.message || errorMessage\n  };\n};\nvar EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n  const issue = makeIssue({\n    issueData,\n    data: ctx.data,\n    path: ctx.path,\n    errorMaps: [\n      ctx.common.contextualErrorMap,\n      ctx.schemaErrorMap,\n      getErrorMap(),\n      errorMap\n    ].filter((x) => !!x)\n  });\n  ctx.common.issues.push(issue);\n}\nvar ParseStatus = class {\n  constructor() {\n    this.value = \"valid\";\n  }\n  dirty() {\n    if (this.value === \"valid\")\n      this.value = \"dirty\";\n  }\n  abort() {\n    if (this.value !== \"aborted\")\n      this.value = \"aborted\";\n  }\n  static mergeArray(status, results) {\n    const arrayValue = [];\n    for (const s of results) {\n      if (s.status === \"aborted\")\n        return INVALID;\n      if (s.status === \"dirty\")\n        status.dirty();\n      arrayValue.push(s.value);\n    }\n    return { status: status.value, value: arrayValue };\n  }\n  static async mergeObjectAsync(status, pairs) {\n    const syncPairs = [];\n    for (const pair of pairs) {\n      syncPairs.push({\n        key: await pair.key,\n        value: await pair.value\n      });\n    }\n    return ParseStatus.mergeObjectSync(status, syncPairs);\n  }\n  static mergeObjectSync(status, pairs) {\n    const finalObject = {};\n    for (const pair of pairs) {\n      const { key, value } = pair;\n      if (key.status === \"aborted\")\n        return INVALID;\n      if (value.status === \"aborted\")\n        return INVALID;\n      if (key.status === \"dirty\")\n        status.dirty();\n      if (value.status === \"dirty\")\n        status.dirty();\n      if (typeof value.value !== \"undefined\" || pair.alwaysSet) {\n        finalObject[key.value] = value.value;\n      }\n    }\n    return { status: status.value, value: finalObject };\n  }\n};\nvar INVALID = Object.freeze({\n  status: \"aborted\"\n});\nvar DIRTY = (value) => ({ status: \"dirty\", value });\nvar OK = (value) => ({ status: \"valid\", value });\nvar isAborted = (x) => x.status === \"aborted\";\nvar isDirty = (x) => x.status === \"dirty\";\nvar isValid = (x) => x.status === \"valid\";\nvar isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\nvar errorUtil;\n(function(errorUtil2) {\n  errorUtil2.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n  errorUtil2.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nvar ParseInputLazyPath = class {\n  constructor(parent, value, path, key) {\n    this._cachedPath = [];\n    this.parent = parent;\n    this.data = value;\n    this._path = path;\n    this._key = key;\n  }\n  get path() {\n    if (!this._cachedPath.length) {\n      if (this._key instanceof Array) {\n        this._cachedPath.push(...this._path, ...this._key);\n      } else {\n        this._cachedPath.push(...this._path, this._key);\n      }\n    }\n    return this._cachedPath;\n  }\n};\nvar handleResult = (ctx, result) => {\n  if (isValid(result)) {\n    return { success: true, data: result.value };\n  } else {\n    if (!ctx.common.issues.length) {\n      throw new Error(\"Validation failed but no issues detected.\");\n    }\n    return {\n      success: false,\n      get error() {\n        if (this._error)\n          return this._error;\n        const error = new ZodError(ctx.common.issues);\n        this._error = error;\n        return this._error;\n      }\n    };\n  }\n};\nfunction processCreateParams(params2) {\n  if (!params2)\n    return {};\n  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params2;\n  if (errorMap2 && (invalid_type_error || required_error)) {\n    throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n  }\n  if (errorMap2)\n    return { errorMap: errorMap2, description };\n  const customMap = (iss, ctx) => {\n    if (iss.code !== \"invalid_type\")\n      return { message: ctx.defaultError };\n    if (typeof ctx.data === \"undefined\") {\n      return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n    }\n    return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n  };\n  return { errorMap: customMap, description };\n}\nvar ZodType = class {\n  constructor(def2) {\n    this.spa = this.safeParseAsync;\n    this._def = def2;\n    this.parse = this.parse.bind(this);\n    this.safeParse = this.safeParse.bind(this);\n    this.parseAsync = this.parseAsync.bind(this);\n    this.safeParseAsync = this.safeParseAsync.bind(this);\n    this.spa = this.spa.bind(this);\n    this.refine = this.refine.bind(this);\n    this.refinement = this.refinement.bind(this);\n    this.superRefine = this.superRefine.bind(this);\n    this.optional = this.optional.bind(this);\n    this.nullable = this.nullable.bind(this);\n    this.nullish = this.nullish.bind(this);\n    this.array = this.array.bind(this);\n    this.promise = this.promise.bind(this);\n    this.or = this.or.bind(this);\n    this.and = this.and.bind(this);\n    this.transform = this.transform.bind(this);\n    this.brand = this.brand.bind(this);\n    this.default = this.default.bind(this);\n    this.catch = this.catch.bind(this);\n    this.describe = this.describe.bind(this);\n    this.pipe = this.pipe.bind(this);\n    this.isNullable = this.isNullable.bind(this);\n    this.isOptional = this.isOptional.bind(this);\n  }\n  get description() {\n    return this._def.description;\n  }\n  _getType(input) {\n    return getParsedType(input.data);\n  }\n  _getOrReturnCtx(input, ctx) {\n    return ctx || {\n      common: input.parent.common,\n      data: input.data,\n      parsedType: getParsedType(input.data),\n      schemaErrorMap: this._def.errorMap,\n      path: input.path,\n      parent: input.parent\n    };\n  }\n  _processInputParams(input) {\n    return {\n      status: new ParseStatus(),\n      ctx: {\n        common: input.parent.common,\n        data: input.data,\n        parsedType: getParsedType(input.data),\n        schemaErrorMap: this._def.errorMap,\n        path: input.path,\n        parent: input.parent\n      }\n    };\n  }\n  _parseSync(input) {\n    const result = this._parse(input);\n    if (isAsync(result)) {\n      throw new Error(\"Synchronous parse encountered promise.\");\n    }\n    return result;\n  }\n  _parseAsync(input) {\n    const result = this._parse(input);\n    return Promise.resolve(result);\n  }\n  parse(data, params2) {\n    const result = this.safeParse(data, params2);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  safeParse(data, params2) {\n    var _a;\n    const ctx = {\n      common: {\n        issues: [],\n        async: (_a = params2 === null || params2 === void 0 ? void 0 : params2.async) !== null && _a !== void 0 ? _a : false,\n        contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap\n      },\n      path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n    return handleResult(ctx, result);\n  }\n  async parseAsync(data, params2) {\n    const result = await this.safeParseAsync(data, params2);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  async safeParseAsync(data, params2) {\n    const ctx = {\n      common: {\n        issues: [],\n        contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap,\n        async: true\n      },\n      path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n    return handleResult(ctx, result);\n  }\n  refine(check, message) {\n    const getIssueProperties = (val) => {\n      if (typeof message === \"string\" || typeof message === \"undefined\") {\n        return { message };\n      } else if (typeof message === \"function\") {\n        return message(val);\n      } else {\n        return message;\n      }\n    };\n    return this._refinement((val, ctx) => {\n      const result = check(val);\n      const setError = () => ctx.addIssue({\n        code: ZodIssueCode.custom,\n        ...getIssueProperties(val)\n      });\n      if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n        return result.then((data) => {\n          if (!data) {\n            setError();\n            return false;\n          } else {\n            return true;\n          }\n        });\n      }\n      if (!result) {\n        setError();\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  refinement(check, refinementData) {\n    return this._refinement((val, ctx) => {\n      if (!check(val)) {\n        ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  _refinement(refinement) {\n    return new ZodEffects({\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"refinement\", refinement }\n    });\n  }\n  superRefine(refinement) {\n    return this._refinement(refinement);\n  }\n  optional() {\n    return ZodOptional.create(this, this._def);\n  }\n  nullable() {\n    return ZodNullable.create(this, this._def);\n  }\n  nullish() {\n    return this.nullable().optional();\n  }\n  array() {\n    return ZodArray.create(this, this._def);\n  }\n  promise() {\n    return ZodPromise.create(this, this._def);\n  }\n  or(option) {\n    return ZodUnion.create([this, option], this._def);\n  }\n  and(incoming) {\n    return ZodIntersection.create(this, incoming, this._def);\n  }\n  transform(transform) {\n    return new ZodEffects({\n      ...processCreateParams(this._def),\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"transform\", transform }\n    });\n  }\n  default(def2) {\n    const defaultValueFunc = typeof def2 === \"function\" ? def2 : () => def2;\n    return new ZodDefault({\n      ...processCreateParams(this._def),\n      innerType: this,\n      defaultValue: defaultValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodDefault\n    });\n  }\n  brand() {\n    return new ZodBranded({\n      typeName: ZodFirstPartyTypeKind.ZodBranded,\n      type: this,\n      ...processCreateParams(this._def)\n    });\n  }\n  catch(def2) {\n    const catchValueFunc = typeof def2 === \"function\" ? def2 : () => def2;\n    return new ZodCatch({\n      ...processCreateParams(this._def),\n      innerType: this,\n      catchValue: catchValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodCatch\n    });\n  }\n  describe(description) {\n    const This = this.constructor;\n    return new This({\n      ...this._def,\n      description\n    });\n  }\n  pipe(target) {\n    return ZodPipeline.create(this, target);\n  }\n  isOptional() {\n    return this.safeParse(void 0).success;\n  }\n  isNullable() {\n    return this.safeParse(null).success;\n  }\n};\nvar cuidRegex = /^c[^\\s-]{8,}$/i;\nvar cuid2Regex = /^[a-z][a-z0-9]*$/;\nvar ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;\nvar uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nvar emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\nvar emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;\nvar ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nvar ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nvar datetimeRegex = (args) => {\n  if (args.precision) {\n    if (args.offset) {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n    } else {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n    }\n  } else if (args.precision === 0) {\n    if (args.offset) {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n    } else {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n    }\n  } else {\n    if (args.offset) {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n    } else {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n    }\n  }\n};\nfunction isValidIP(ip, version2) {\n  if ((version2 === \"v4\" || !version2) && ipv4Regex.test(ip)) {\n    return true;\n  }\n  if ((version2 === \"v6\" || !version2) && ipv6Regex.test(ip)) {\n    return true;\n  }\n  return false;\n}\nvar ZodString = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {\n      validation,\n      code: ZodIssueCode.invalid_string,\n      ...errorUtil.errToObj(message)\n    });\n    this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));\n    this.trim = () => new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"trim\" }]\n    });\n    this.toLowerCase = () => new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toLowerCase\" }]\n    });\n    this.toUpperCase = () => new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toUpperCase\" }]\n    });\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = String(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.string) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(\n        ctx2,\n        {\n          code: ZodIssueCode.invalid_type,\n          expected: ZodParsedType.string,\n          received: ctx2.parsedType\n        }\n      );\n      return INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx = void 0;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.length < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.length > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"length\") {\n        const tooBig = input.data.length > check.value;\n        const tooSmall = input.data.length < check.value;\n        if (tooBig || tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          if (tooBig) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_big,\n              maximum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          } else if (tooSmall) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_small,\n              minimum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          }\n          status.dirty();\n        }\n      } else if (check.kind === \"email\") {\n        if (!emailRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"email\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"emoji\") {\n        if (!emojiRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"emoji\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"uuid\") {\n        if (!uuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"uuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid\") {\n        if (!cuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid2\") {\n        if (!cuid2Regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid2\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ulid\") {\n        if (!ulidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ulid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"url\") {\n        try {\n          new URL(input.data);\n        } catch (_a) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"url\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"regex\") {\n        check.regex.lastIndex = 0;\n        const testResult = check.regex.test(input.data);\n        if (!testResult) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"regex\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"trim\") {\n        input.data = input.data.trim();\n      } else if (check.kind === \"includes\") {\n        if (!input.data.includes(check.value, check.position)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { includes: check.value, position: check.position },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"toLowerCase\") {\n        input.data = input.data.toLowerCase();\n      } else if (check.kind === \"toUpperCase\") {\n        input.data = input.data.toUpperCase();\n      } else if (check.kind === \"startsWith\") {\n        if (!input.data.startsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { startsWith: check.value },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"endsWith\") {\n        if (!input.data.endsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { endsWith: check.value },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"datetime\") {\n        const regex = datetimeRegex(check);\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"datetime\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ip\") {\n        if (!isValidIP(input.data, check.version)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ip\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  _addCheck(check) {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  email(message) {\n    return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n  }\n  url(message) {\n    return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n  }\n  emoji(message) {\n    return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n  }\n  uuid(message) {\n    return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n  }\n  cuid(message) {\n    return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n  }\n  cuid2(message) {\n    return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n  }\n  ulid(message) {\n    return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n  }\n  ip(options) {\n    return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n  }\n  datetime(options) {\n    var _a;\n    if (typeof options === \"string\") {\n      return this._addCheck({\n        kind: \"datetime\",\n        precision: null,\n        offset: false,\n        message: options\n      });\n    }\n    return this._addCheck({\n      kind: \"datetime\",\n      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n      offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n    });\n  }\n  regex(regex, message) {\n    return this._addCheck({\n      kind: \"regex\",\n      regex,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  includes(value, options) {\n    return this._addCheck({\n      kind: \"includes\",\n      value,\n      position: options === null || options === void 0 ? void 0 : options.position,\n      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n    });\n  }\n  startsWith(value, message) {\n    return this._addCheck({\n      kind: \"startsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  endsWith(value, message) {\n    return this._addCheck({\n      kind: \"endsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  min(minLength, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  max(maxLength, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  length(len, message) {\n    return this._addCheck({\n      kind: \"length\",\n      value: len,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  get isDatetime() {\n    return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n  }\n  get isEmail() {\n    return !!this._def.checks.find((ch) => ch.kind === \"email\");\n  }\n  get isURL() {\n    return !!this._def.checks.find((ch) => ch.kind === \"url\");\n  }\n  get isEmoji() {\n    return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n  }\n  get isUUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n  }\n  get isCUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n  }\n  get isCUID2() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n  }\n  get isULID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n  }\n  get isIP() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n  }\n  get minLength() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxLength() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max;\n  }\n};\nZodString.create = (params2) => {\n  var _a;\n  return new ZodString({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodString,\n    coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,\n    ...processCreateParams(params2)\n  });\n};\nfunction floatSafeRemainder(val, step) {\n  const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n  const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n  const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n  const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n  return valInt % stepInt / Math.pow(10, decCount);\n}\nvar ZodNumber = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n    this.step = this.multipleOf;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Number(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.number) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.number,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    let ctx = void 0;\n    const status = new ParseStatus();\n    for (const check of this._def.checks) {\n      if (check.kind === \"int\") {\n        if (!util.isInteger(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: \"integer\",\n            received: \"float\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (floatSafeRemainder(input.data, check.value) !== 0) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"finite\") {\n        if (!Number.isFinite(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_finite,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  int(message) {\n    return this._addCheck({\n      kind: \"int\",\n      message: errorUtil.toString(message)\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  finite(message) {\n    return this._addCheck({\n      kind: \"finite\",\n      message: errorUtil.toString(message)\n    });\n  }\n  safe(message) {\n    return this._addCheck({\n      kind: \"min\",\n      inclusive: true,\n      value: Number.MIN_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    })._addCheck({\n      kind: \"max\",\n      inclusive: true,\n      value: Number.MAX_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max;\n  }\n  get isInt() {\n    return !!this._def.checks.find((ch) => ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n  }\n  get isFinite() {\n    let max = null, min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n        return true;\n      } else if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      } else if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return Number.isFinite(min) && Number.isFinite(max);\n  }\n};\nZodNumber.create = (params2) => {\n  return new ZodNumber({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodNumber,\n    coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodBigInt = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = BigInt(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.bigint) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.bigint,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    let ctx = void 0;\n    const status = new ParseStatus();\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            type: \"bigint\",\n            minimum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            type: \"bigint\",\n            maximum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (input.data % check.value !== BigInt(0)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max;\n  }\n};\nZodBigInt.create = (params2) => {\n  var _a;\n  return new ZodBigInt({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodBigInt,\n    coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodBoolean = class extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Boolean(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.boolean) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.boolean,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodBoolean.create = (params2) => {\n  return new ZodBoolean({\n    typeName: ZodFirstPartyTypeKind.ZodBoolean,\n    coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodDate = class extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = new Date(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.date) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.date,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    if (isNaN(input.data.getTime())) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_date\n      });\n      return INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx = void 0;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.getTime() < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            minimum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.getTime() > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            maximum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return {\n      status: status.value,\n      value: new Date(input.data.getTime())\n    };\n  }\n  _addCheck(check) {\n    return new ZodDate({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  min(minDate, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  max(maxDate, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  get minDate() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min != null ? new Date(min) : null;\n  }\n  get maxDate() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max != null ? new Date(max) : null;\n  }\n};\nZodDate.create = (params2) => {\n  return new ZodDate({\n    checks: [],\n    coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,\n    typeName: ZodFirstPartyTypeKind.ZodDate,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodSymbol = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.symbol) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.symbol,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodSymbol.create = (params2) => {\n  return new ZodSymbol({\n    typeName: ZodFirstPartyTypeKind.ZodSymbol,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodUndefined = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.undefined,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodUndefined.create = (params2) => {\n  return new ZodUndefined({\n    typeName: ZodFirstPartyTypeKind.ZodUndefined,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNull = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.null) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.null,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodNull.create = (params2) => {\n  return new ZodNull({\n    typeName: ZodFirstPartyTypeKind.ZodNull,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodAny = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._any = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n};\nZodAny.create = (params2) => {\n  return new ZodAny({\n    typeName: ZodFirstPartyTypeKind.ZodAny,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodUnknown = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._unknown = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n};\nZodUnknown.create = (params2) => {\n  return new ZodUnknown({\n    typeName: ZodFirstPartyTypeKind.ZodUnknown,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNever = class extends ZodType {\n  _parse(input) {\n    const ctx = this._getOrReturnCtx(input);\n    addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.never,\n      received: ctx.parsedType\n    });\n    return INVALID;\n  }\n};\nZodNever.create = (params2) => {\n  return new ZodNever({\n    typeName: ZodFirstPartyTypeKind.ZodNever,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodVoid = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.void,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodVoid.create = (params2) => {\n  return new ZodVoid({\n    typeName: ZodFirstPartyTypeKind.ZodVoid,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodArray = class extends ZodType {\n  _parse(input) {\n    const { ctx, status } = this._processInputParams(input);\n    const def2 = this._def;\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (def2.exactLength !== null) {\n      const tooBig = ctx.data.length > def2.exactLength.value;\n      const tooSmall = ctx.data.length < def2.exactLength.value;\n      if (tooBig || tooSmall) {\n        addIssueToContext(ctx, {\n          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n          minimum: tooSmall ? def2.exactLength.value : void 0,\n          maximum: tooBig ? def2.exactLength.value : void 0,\n          type: \"array\",\n          inclusive: true,\n          exact: true,\n          message: def2.exactLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def2.minLength !== null) {\n      if (ctx.data.length < def2.minLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def2.minLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def2.minLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def2.maxLength !== null) {\n      if (ctx.data.length > def2.maxLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def2.maxLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def2.maxLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.all([...ctx.data].map((item, i) => {\n        return def2.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n      })).then((result2) => {\n        return ParseStatus.mergeArray(status, result2);\n      });\n    }\n    const result = [...ctx.data].map((item, i) => {\n      return def2.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n    });\n    return ParseStatus.mergeArray(status, result);\n  }\n  get element() {\n    return this._def.type;\n  }\n  min(minLength, message) {\n    return new ZodArray({\n      ...this._def,\n      minLength: { value: minLength, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxLength, message) {\n    return new ZodArray({\n      ...this._def,\n      maxLength: { value: maxLength, message: errorUtil.toString(message) }\n    });\n  }\n  length(len, message) {\n    return new ZodArray({\n      ...this._def,\n      exactLength: { value: len, message: errorUtil.toString(message) }\n    });\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n};\nZodArray.create = (schema2, params2) => {\n  return new ZodArray({\n    type: schema2,\n    minLength: null,\n    maxLength: null,\n    exactLength: null,\n    typeName: ZodFirstPartyTypeKind.ZodArray,\n    ...processCreateParams(params2)\n  });\n};\nfunction deepPartialify(schema2) {\n  if (schema2 instanceof ZodObject) {\n    const newShape = {};\n    for (const key in schema2.shape) {\n      const fieldSchema = schema2.shape[key];\n      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n    }\n    return new ZodObject({\n      ...schema2._def,\n      shape: () => newShape\n    });\n  } else if (schema2 instanceof ZodArray) {\n    return new ZodArray({\n      ...schema2._def,\n      type: deepPartialify(schema2.element)\n    });\n  } else if (schema2 instanceof ZodOptional) {\n    return ZodOptional.create(deepPartialify(schema2.unwrap()));\n  } else if (schema2 instanceof ZodNullable) {\n    return ZodNullable.create(deepPartialify(schema2.unwrap()));\n  } else if (schema2 instanceof ZodTuple) {\n    return ZodTuple.create(schema2.items.map((item) => deepPartialify(item)));\n  } else {\n    return schema2;\n  }\n}\nvar ZodObject = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._cached = null;\n    this.nonstrict = this.passthrough;\n    this.augment = this.extend;\n  }\n  _getCached() {\n    if (this._cached !== null)\n      return this._cached;\n    const shape = this._def.shape();\n    const keys = util.objectKeys(shape);\n    return this._cached = { shape, keys };\n  }\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.object) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    const { status, ctx } = this._processInputParams(input);\n    const { shape, keys: shapeKeys } = this._getCached();\n    const extraKeys = [];\n    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n      for (const key in ctx.data) {\n        if (!shapeKeys.includes(key)) {\n          extraKeys.push(key);\n        }\n      }\n    }\n    const pairs = [];\n    for (const key of shapeKeys) {\n      const keyValidator = shape[key];\n      const value = ctx.data[key];\n      pairs.push({\n        key: { status: \"valid\", value: key },\n        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n        alwaysSet: key in ctx.data\n      });\n    }\n    if (this._def.catchall instanceof ZodNever) {\n      const unknownKeys = this._def.unknownKeys;\n      if (unknownKeys === \"passthrough\") {\n        for (const key of extraKeys) {\n          pairs.push({\n            key: { status: \"valid\", value: key },\n            value: { status: \"valid\", value: ctx.data[key] }\n          });\n        }\n      } else if (unknownKeys === \"strict\") {\n        if (extraKeys.length > 0) {\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.unrecognized_keys,\n            keys: extraKeys\n          });\n          status.dirty();\n        }\n      } else if (unknownKeys === \"strip\")\n        ;\n      else {\n        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n      }\n    } else {\n      const catchall = this._def.catchall;\n      for (const key of extraKeys) {\n        const value = ctx.data[key];\n        pairs.push({\n          key: { status: \"valid\", value: key },\n          value: catchall._parse(\n            new ParseInputLazyPath(ctx, value, ctx.path, key)\n          ),\n          alwaysSet: key in ctx.data\n        });\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.resolve().then(async () => {\n        const syncPairs = [];\n        for (const pair of pairs) {\n          const key = await pair.key;\n          syncPairs.push({\n            key,\n            value: await pair.value,\n            alwaysSet: pair.alwaysSet\n          });\n        }\n        return syncPairs;\n      }).then((syncPairs) => {\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n      });\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get shape() {\n    return this._def.shape();\n  }\n  strict(message) {\n    errorUtil.errToObj;\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strict\",\n      ...message !== void 0 ? {\n        errorMap: (issue, ctx) => {\n          var _a, _b, _c, _d;\n          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n          if (issue.code === \"unrecognized_keys\")\n            return {\n              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\n            };\n          return {\n            message: defaultError\n          };\n        }\n      } : {}\n    });\n  }\n  strip() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strip\"\n    });\n  }\n  passthrough() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"passthrough\"\n    });\n  }\n  extend(augmentation) {\n    return new ZodObject({\n      ...this._def,\n      shape: () => ({\n        ...this._def.shape(),\n        ...augmentation\n      })\n    });\n  }\n  merge(merging) {\n    const merged = new ZodObject({\n      unknownKeys: merging._def.unknownKeys,\n      catchall: merging._def.catchall,\n      shape: () => ({\n        ...this._def.shape(),\n        ...merging._def.shape()\n      }),\n      typeName: ZodFirstPartyTypeKind.ZodObject\n    });\n    return merged;\n  }\n  setKey(key, schema2) {\n    return this.augment({ [key]: schema2 });\n  }\n  catchall(index) {\n    return new ZodObject({\n      ...this._def,\n      catchall: index\n    });\n  }\n  pick(mask) {\n    const shape = {};\n    util.objectKeys(mask).forEach((key) => {\n      if (mask[key] && this.shape[key]) {\n        shape[key] = this.shape[key];\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  omit(mask) {\n    const shape = {};\n    util.objectKeys(this.shape).forEach((key) => {\n      if (!mask[key]) {\n        shape[key] = this.shape[key];\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  deepPartial() {\n    return deepPartialify(this);\n  }\n  partial(mask) {\n    const newShape = {};\n    util.objectKeys(this.shape).forEach((key) => {\n      const fieldSchema = this.shape[key];\n      if (mask && !mask[key]) {\n        newShape[key] = fieldSchema;\n      } else {\n        newShape[key] = fieldSchema.optional();\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  required(mask) {\n    const newShape = {};\n    util.objectKeys(this.shape).forEach((key) => {\n      if (mask && !mask[key]) {\n        newShape[key] = this.shape[key];\n      } else {\n        const fieldSchema = this.shape[key];\n        let newField = fieldSchema;\n        while (newField instanceof ZodOptional) {\n          newField = newField._def.innerType;\n        }\n        newShape[key] = newField;\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  keyof() {\n    return createZodEnum(util.objectKeys(this.shape));\n  }\n};\nZodObject.create = (shape, params2) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params2)\n  });\n};\nZodObject.strictCreate = (shape, params2) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strict\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params2)\n  });\n};\nZodObject.lazycreate = (shape, params2) => {\n  return new ZodObject({\n    shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodUnion = class extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const options = this._def.options;\n    function handleResults(results) {\n      for (const result of results) {\n        if (result.result.status === \"valid\") {\n          return result.result;\n        }\n      }\n      for (const result of results) {\n        if (result.result.status === \"dirty\") {\n          ctx.common.issues.push(...result.ctx.common.issues);\n          return result.result;\n        }\n      }\n      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return Promise.all(options.map(async (option) => {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        return {\n          result: await option._parseAsync({\n            data: ctx.data,\n            path: ctx.path,\n            parent: childCtx\n          }),\n          ctx: childCtx\n        };\n      })).then(handleResults);\n    } else {\n      let dirty = void 0;\n      const issues = [];\n      for (const option of options) {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        const result = option._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: childCtx\n        });\n        if (result.status === \"valid\") {\n          return result;\n        } else if (result.status === \"dirty\" && !dirty) {\n          dirty = { result, ctx: childCtx };\n        }\n        if (childCtx.common.issues.length) {\n          issues.push(childCtx.common.issues);\n        }\n      }\n      if (dirty) {\n        ctx.common.issues.push(...dirty.ctx.common.issues);\n        return dirty.result;\n      }\n      const unionErrors = issues.map((issues2) => new ZodError(issues2));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n  }\n  get options() {\n    return this._def.options;\n  }\n};\nZodUnion.create = (types, params2) => {\n  return new ZodUnion({\n    options: types,\n    typeName: ZodFirstPartyTypeKind.ZodUnion,\n    ...processCreateParams(params2)\n  });\n};\nvar getDiscriminator = (type) => {\n  if (type instanceof ZodLazy) {\n    return getDiscriminator(type.schema);\n  } else if (type instanceof ZodEffects) {\n    return getDiscriminator(type.innerType());\n  } else if (type instanceof ZodLiteral) {\n    return [type.value];\n  } else if (type instanceof ZodEnum) {\n    return type.options;\n  } else if (type instanceof ZodNativeEnum) {\n    return Object.keys(type.enum);\n  } else if (type instanceof ZodDefault) {\n    return getDiscriminator(type._def.innerType);\n  } else if (type instanceof ZodUndefined) {\n    return [void 0];\n  } else if (type instanceof ZodNull) {\n    return [null];\n  } else {\n    return null;\n  }\n};\nvar ZodDiscriminatedUnion = class extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const discriminator = this.discriminator;\n    const discriminatorValue = ctx.data[discriminator];\n    const option = this.optionsMap.get(discriminatorValue);\n    if (!option) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union_discriminator,\n        options: Array.from(this.optionsMap.keys()),\n        path: [discriminator]\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return option._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    } else {\n      return option._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    }\n  }\n  get discriminator() {\n    return this._def.discriminator;\n  }\n  get options() {\n    return this._def.options;\n  }\n  get optionsMap() {\n    return this._def.optionsMap;\n  }\n  static create(discriminator, options, params2) {\n    const optionsMap = /* @__PURE__ */ new Map();\n    for (const type of options) {\n      const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n      if (!discriminatorValues) {\n        throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n      }\n      for (const value of discriminatorValues) {\n        if (optionsMap.has(value)) {\n          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n        }\n        optionsMap.set(value, type);\n      }\n    }\n    return new ZodDiscriminatedUnion({\n      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n      discriminator,\n      options,\n      optionsMap,\n      ...processCreateParams(params2)\n    });\n  }\n};\nfunction mergeValues(a, b) {\n  const aType = getParsedType(a);\n  const bType = getParsedType(b);\n  if (a === b) {\n    return { valid: true, data: a };\n  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n    const bKeys = util.objectKeys(b);\n    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n    const newObj = { ...a, ...b };\n    for (const key of sharedKeys) {\n      const sharedValue = mergeValues(a[key], b[key]);\n      if (!sharedValue.valid) {\n        return { valid: false };\n      }\n      newObj[key] = sharedValue.data;\n    }\n    return { valid: true, data: newObj };\n  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n    if (a.length !== b.length) {\n      return { valid: false };\n    }\n    const newArray = [];\n    for (let index = 0; index < a.length; index++) {\n      const itemA = a[index];\n      const itemB = b[index];\n      const sharedValue = mergeValues(itemA, itemB);\n      if (!sharedValue.valid) {\n        return { valid: false };\n      }\n      newArray.push(sharedValue.data);\n    }\n    return { valid: true, data: newArray };\n  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n    return { valid: true, data: a };\n  } else {\n    return { valid: false };\n  }\n}\nvar ZodIntersection = class extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    const handleParsed = (parsedLeft, parsedRight) => {\n      if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n        return INVALID;\n      }\n      const merged = mergeValues(parsedLeft.value, parsedRight.value);\n      if (!merged.valid) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.invalid_intersection_types\n        });\n        return INVALID;\n      }\n      if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n        status.dirty();\n      }\n      return { status: status.value, value: merged.data };\n    };\n    if (ctx.common.async) {\n      return Promise.all([\n        this._def.left._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        }),\n        this._def.right._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        })\n      ]).then(([left, right]) => handleParsed(left, right));\n    } else {\n      return handleParsed(this._def.left._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }), this._def.right._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }));\n    }\n  }\n};\nZodIntersection.create = (left, right, params2) => {\n  return new ZodIntersection({\n    left,\n    right,\n    typeName: ZodFirstPartyTypeKind.ZodIntersection,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodTuple = class extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (ctx.data.length < this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        minimum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      return INVALID;\n    }\n    const rest = this._def.rest;\n    if (!rest && ctx.data.length > this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_big,\n        maximum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      status.dirty();\n    }\n    const items = [...ctx.data].map((item, itemIndex) => {\n      const schema2 = this._def.items[itemIndex] || this._def.rest;\n      if (!schema2)\n        return null;\n      return schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n    }).filter((x) => !!x);\n    if (ctx.common.async) {\n      return Promise.all(items).then((results) => {\n        return ParseStatus.mergeArray(status, results);\n      });\n    } else {\n      return ParseStatus.mergeArray(status, items);\n    }\n  }\n  get items() {\n    return this._def.items;\n  }\n  rest(rest) {\n    return new ZodTuple({\n      ...this._def,\n      rest\n    });\n  }\n};\nZodTuple.create = (schemas2, params2) => {\n  if (!Array.isArray(schemas2)) {\n    throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n  }\n  return new ZodTuple({\n    items: schemas2,\n    typeName: ZodFirstPartyTypeKind.ZodTuple,\n    rest: null,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodRecord = class extends ZodType {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const pairs = [];\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    for (const key in ctx.data) {\n      pairs.push({\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))\n      });\n    }\n    if (ctx.common.async) {\n      return ParseStatus.mergeObjectAsync(status, pairs);\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get element() {\n    return this._def.valueType;\n  }\n  static create(first, second, third) {\n    if (second instanceof ZodType) {\n      return new ZodRecord({\n        keyType: first,\n        valueType: second,\n        typeName: ZodFirstPartyTypeKind.ZodRecord,\n        ...processCreateParams(third)\n      });\n    }\n    return new ZodRecord({\n      keyType: ZodString.create(),\n      valueType: first,\n      typeName: ZodFirstPartyTypeKind.ZodRecord,\n      ...processCreateParams(second)\n    });\n  }\n};\nvar ZodMap = class extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.map) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.map,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n      return {\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"]))\n      };\n    });\n    if (ctx.common.async) {\n      const finalMap = /* @__PURE__ */ new Map();\n      return Promise.resolve().then(async () => {\n        for (const pair of pairs) {\n          const key = await pair.key;\n          const value = await pair.value;\n          if (key.status === \"aborted\" || value.status === \"aborted\") {\n            return INVALID;\n          }\n          if (key.status === \"dirty\" || value.status === \"dirty\") {\n            status.dirty();\n          }\n          finalMap.set(key.value, value.value);\n        }\n        return { status: status.value, value: finalMap };\n      });\n    } else {\n      const finalMap = /* @__PURE__ */ new Map();\n      for (const pair of pairs) {\n        const key = pair.key;\n        const value = pair.value;\n        if (key.status === \"aborted\" || value.status === \"aborted\") {\n          return INVALID;\n        }\n        if (key.status === \"dirty\" || value.status === \"dirty\") {\n          status.dirty();\n        }\n        finalMap.set(key.value, value.value);\n      }\n      return { status: status.value, value: finalMap };\n    }\n  }\n};\nZodMap.create = (keyType, valueType, params2) => {\n  return new ZodMap({\n    valueType,\n    keyType,\n    typeName: ZodFirstPartyTypeKind.ZodMap,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodSet = class extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.set) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.set,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const def2 = this._def;\n    if (def2.minSize !== null) {\n      if (ctx.data.size < def2.minSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def2.minSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def2.minSize.message\n        });\n        status.dirty();\n      }\n    }\n    if (def2.maxSize !== null) {\n      if (ctx.data.size > def2.maxSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def2.maxSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def2.maxSize.message\n        });\n        status.dirty();\n      }\n    }\n    const valueType = this._def.valueType;\n    function finalizeSet(elements2) {\n      const parsedSet = /* @__PURE__ */ new Set();\n      for (const element of elements2) {\n        if (element.status === \"aborted\")\n          return INVALID;\n        if (element.status === \"dirty\")\n          status.dirty();\n        parsedSet.add(element.value);\n      }\n      return { status: status.value, value: parsedSet };\n    }\n    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n    if (ctx.common.async) {\n      return Promise.all(elements).then((elements2) => finalizeSet(elements2));\n    } else {\n      return finalizeSet(elements);\n    }\n  }\n  min(minSize, message) {\n    return new ZodSet({\n      ...this._def,\n      minSize: { value: minSize, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxSize, message) {\n    return new ZodSet({\n      ...this._def,\n      maxSize: { value: maxSize, message: errorUtil.toString(message) }\n    });\n  }\n  size(size, message) {\n    return this.min(size, message).max(size, message);\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n};\nZodSet.create = (valueType, params2) => {\n  return new ZodSet({\n    valueType,\n    minSize: null,\n    maxSize: null,\n    typeName: ZodFirstPartyTypeKind.ZodSet,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodFunction = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.validate = this.implement;\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.function) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.function,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    function makeArgsIssue(args, error) {\n      return makeIssue({\n        data: args,\n        path: ctx.path,\n        errorMaps: [\n          ctx.common.contextualErrorMap,\n          ctx.schemaErrorMap,\n          getErrorMap(),\n          errorMap\n        ].filter((x) => !!x),\n        issueData: {\n          code: ZodIssueCode.invalid_arguments,\n          argumentsError: error\n        }\n      });\n    }\n    function makeReturnsIssue(returns, error) {\n      return makeIssue({\n        data: returns,\n        path: ctx.path,\n        errorMaps: [\n          ctx.common.contextualErrorMap,\n          ctx.schemaErrorMap,\n          getErrorMap(),\n          errorMap\n        ].filter((x) => !!x),\n        issueData: {\n          code: ZodIssueCode.invalid_return_type,\n          returnTypeError: error\n        }\n      });\n    }\n    const params2 = { errorMap: ctx.common.contextualErrorMap };\n    const fn = ctx.data;\n    if (this._def.returns instanceof ZodPromise) {\n      return OK(async (...args) => {\n        const error = new ZodError([]);\n        const parsedArgs = await this._def.args.parseAsync(args, params2).catch((e) => {\n          error.addIssue(makeArgsIssue(args, e));\n          throw error;\n        });\n        const result = await fn(...parsedArgs);\n        const parsedReturns = await this._def.returns._def.type.parseAsync(result, params2).catch((e) => {\n          error.addIssue(makeReturnsIssue(result, e));\n          throw error;\n        });\n        return parsedReturns;\n      });\n    } else {\n      return OK((...args) => {\n        const parsedArgs = this._def.args.safeParse(args, params2);\n        if (!parsedArgs.success) {\n          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n        }\n        const result = fn(...parsedArgs.data);\n        const parsedReturns = this._def.returns.safeParse(result, params2);\n        if (!parsedReturns.success) {\n          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n        }\n        return parsedReturns.data;\n      });\n    }\n  }\n  parameters() {\n    return this._def.args;\n  }\n  returnType() {\n    return this._def.returns;\n  }\n  args(...items) {\n    return new ZodFunction({\n      ...this._def,\n      args: ZodTuple.create(items).rest(ZodUnknown.create())\n    });\n  }\n  returns(returnType) {\n    return new ZodFunction({\n      ...this._def,\n      returns: returnType\n    });\n  }\n  implement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  strictImplement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  static create(args, returns, params2) {\n    return new ZodFunction({\n      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n      returns: returns || ZodUnknown.create(),\n      typeName: ZodFirstPartyTypeKind.ZodFunction,\n      ...processCreateParams(params2)\n    });\n  }\n};\nvar ZodLazy = class extends ZodType {\n  get schema() {\n    return this._def.getter();\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const lazySchema = this._def.getter();\n    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n  }\n};\nZodLazy.create = (getter, params2) => {\n  return new ZodLazy({\n    getter,\n    typeName: ZodFirstPartyTypeKind.ZodLazy,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodLiteral = class extends ZodType {\n  _parse(input) {\n    if (input.data !== this._def.value) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_literal,\n        expected: this._def.value\n      });\n      return INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n  get value() {\n    return this._def.value;\n  }\n};\nZodLiteral.create = (value, params2) => {\n  return new ZodLiteral({\n    value,\n    typeName: ZodFirstPartyTypeKind.ZodLiteral,\n    ...processCreateParams(params2)\n  });\n};\nfunction createZodEnum(values, params2) {\n  return new ZodEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodEnum,\n    ...processCreateParams(params2)\n  });\n}\nvar ZodEnum = class extends ZodType {\n  _parse(input) {\n    if (typeof input.data !== \"string\") {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (this._def.values.indexOf(input.data) === -1) {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get options() {\n    return this._def.values;\n  }\n  get enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Values() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  extract(values) {\n    return ZodEnum.create(values);\n  }\n  exclude(values) {\n    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));\n  }\n};\nZodEnum.create = createZodEnum;\nvar ZodNativeEnum = class extends ZodType {\n  _parse(input) {\n    const nativeEnumValues = util.getValidEnumValues(this._def.values);\n    const ctx = this._getOrReturnCtx(input);\n    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (nativeEnumValues.indexOf(input.data) === -1) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get enum() {\n    return this._def.values;\n  }\n};\nZodNativeEnum.create = (values, params2) => {\n  return new ZodNativeEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodPromise = class extends ZodType {\n  unwrap() {\n    return this._def.type;\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.promise,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n    return OK(promisified.then((data) => {\n      return this._def.type.parseAsync(data, {\n        path: ctx.path,\n        errorMap: ctx.common.contextualErrorMap\n      });\n    }));\n  }\n};\nZodPromise.create = (schema2, params2) => {\n  return new ZodPromise({\n    type: schema2,\n    typeName: ZodFirstPartyTypeKind.ZodPromise,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodEffects = class extends ZodType {\n  innerType() {\n    return this._def.schema;\n  }\n  sourceType() {\n    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    const effect = this._def.effect || null;\n    if (effect.type === \"preprocess\") {\n      const processed = effect.transform(ctx.data);\n      if (ctx.common.async) {\n        return Promise.resolve(processed).then((processed2) => {\n          return this._def.schema._parseAsync({\n            data: processed2,\n            path: ctx.path,\n            parent: ctx\n          });\n        });\n      } else {\n        return this._def.schema._parseSync({\n          data: processed,\n          path: ctx.path,\n          parent: ctx\n        });\n      }\n    }\n    const checkCtx = {\n      addIssue: (arg) => {\n        addIssueToContext(ctx, arg);\n        if (arg.fatal) {\n          status.abort();\n        } else {\n          status.dirty();\n        }\n      },\n      get path() {\n        return ctx.path;\n      }\n    };\n    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n    if (effect.type === \"refinement\") {\n      const executeRefinement = (acc) => {\n        const result = effect.refinement(acc, checkCtx);\n        if (ctx.common.async) {\n          return Promise.resolve(result);\n        }\n        if (result instanceof Promise) {\n          throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n        }\n        return acc;\n      };\n      if (ctx.common.async === false) {\n        const inner = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inner.status === \"aborted\")\n          return INVALID;\n        if (inner.status === \"dirty\")\n          status.dirty();\n        executeRefinement(inner.value);\n        return { status: status.value, value: inner.value };\n      } else {\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n          if (inner.status === \"aborted\")\n            return INVALID;\n          if (inner.status === \"dirty\")\n            status.dirty();\n          return executeRefinement(inner.value).then(() => {\n            return { status: status.value, value: inner.value };\n          });\n        });\n      }\n    }\n    if (effect.type === \"transform\") {\n      if (ctx.common.async === false) {\n        const base3 = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (!isValid(base3))\n          return base3;\n        const result = effect.transform(base3.value, checkCtx);\n        if (result instanceof Promise) {\n          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n        }\n        return { status: status.value, value: result };\n      } else {\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base3) => {\n          if (!isValid(base3))\n            return base3;\n          return Promise.resolve(effect.transform(base3.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n        });\n      }\n    }\n    util.assertNever(effect);\n  }\n};\nZodEffects.create = (schema2, effect, params2) => {\n  return new ZodEffects({\n    schema: schema2,\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    effect,\n    ...processCreateParams(params2)\n  });\n};\nZodEffects.createWithPreprocess = (preprocess, schema2, params2) => {\n  return new ZodEffects({\n    schema: schema2,\n    effect: { type: \"preprocess\", transform: preprocess },\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodOptional = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.undefined) {\n      return OK(void 0);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n};\nZodOptional.create = (type, params2) => {\n  return new ZodOptional({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodOptional,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNullable = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.null) {\n      return OK(null);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n};\nZodNullable.create = (type, params2) => {\n  return new ZodNullable({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodNullable,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodDefault = class extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    let data = ctx.data;\n    if (ctx.parsedType === ZodParsedType.undefined) {\n      data = this._def.defaultValue();\n    }\n    return this._def.innerType._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  removeDefault() {\n    return this._def.innerType;\n  }\n};\nZodDefault.create = (type, params2) => {\n  return new ZodDefault({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodDefault,\n    defaultValue: typeof params2.default === \"function\" ? params2.default : () => params2.default,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodCatch = class extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const newCtx = {\n      ...ctx,\n      common: {\n        ...ctx.common,\n        issues: []\n      }\n    };\n    const result = this._def.innerType._parse({\n      data: newCtx.data,\n      path: newCtx.path,\n      parent: {\n        ...newCtx\n      }\n    });\n    if (isAsync(result)) {\n      return result.then((result2) => {\n        return {\n          status: \"valid\",\n          value: result2.status === \"valid\" ? result2.value : this._def.catchValue({\n            get error() {\n              return new ZodError(newCtx.common.issues);\n            },\n            input: newCtx.data\n          })\n        };\n      });\n    } else {\n      return {\n        status: \"valid\",\n        value: result.status === \"valid\" ? result.value : this._def.catchValue({\n          get error() {\n            return new ZodError(newCtx.common.issues);\n          },\n          input: newCtx.data\n        })\n      };\n    }\n  }\n  removeCatch() {\n    return this._def.innerType;\n  }\n};\nZodCatch.create = (type, params2) => {\n  return new ZodCatch({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodCatch,\n    catchValue: typeof params2.catch === \"function\" ? params2.catch : () => params2.catch,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNaN = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.nan) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.nan,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n};\nZodNaN.create = (params2) => {\n  return new ZodNaN({\n    typeName: ZodFirstPartyTypeKind.ZodNaN,\n    ...processCreateParams(params2)\n  });\n};\nvar BRAND = Symbol(\"zod_brand\");\nvar ZodBranded = class extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const data = ctx.data;\n    return this._def.type._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  unwrap() {\n    return this._def.type;\n  }\n};\nvar ZodPipeline = class extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.common.async) {\n      const handleAsync = async () => {\n        const inResult = await this._def.in._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inResult.status === \"aborted\")\n          return INVALID;\n        if (inResult.status === \"dirty\") {\n          status.dirty();\n          return DIRTY(inResult.value);\n        } else {\n          return this._def.out._parseAsync({\n            data: inResult.value,\n            path: ctx.path,\n            parent: ctx\n          });\n        }\n      };\n      return handleAsync();\n    } else {\n      const inResult = this._def.in._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n      if (inResult.status === \"aborted\")\n        return INVALID;\n      if (inResult.status === \"dirty\") {\n        status.dirty();\n        return {\n          status: \"dirty\",\n          value: inResult.value\n        };\n      } else {\n        return this._def.out._parseSync({\n          data: inResult.value,\n          path: ctx.path,\n          parent: ctx\n        });\n      }\n    }\n  }\n  static create(a, b) {\n    return new ZodPipeline({\n      in: a,\n      out: b,\n      typeName: ZodFirstPartyTypeKind.ZodPipeline\n    });\n  }\n};\nvar custom = (check, params2 = {}, fatal) => {\n  if (check)\n    return ZodAny.create().superRefine((data, ctx) => {\n      var _a, _b;\n      if (!check(data)) {\n        const p = typeof params2 === \"function\" ? params2(data) : typeof params2 === \"string\" ? { message: params2 } : params2;\n        const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n        const p2 = typeof p === \"string\" ? { message: p } : p;\n        ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n      }\n    });\n  return ZodAny.create();\n};\nvar late = {\n  object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind2) {\n  ZodFirstPartyTypeKind2[\"ZodString\"] = \"ZodString\";\n  ZodFirstPartyTypeKind2[\"ZodNumber\"] = \"ZodNumber\";\n  ZodFirstPartyTypeKind2[\"ZodNaN\"] = \"ZodNaN\";\n  ZodFirstPartyTypeKind2[\"ZodBigInt\"] = \"ZodBigInt\";\n  ZodFirstPartyTypeKind2[\"ZodBoolean\"] = \"ZodBoolean\";\n  ZodFirstPartyTypeKind2[\"ZodDate\"] = \"ZodDate\";\n  ZodFirstPartyTypeKind2[\"ZodSymbol\"] = \"ZodSymbol\";\n  ZodFirstPartyTypeKind2[\"ZodUndefined\"] = \"ZodUndefined\";\n  ZodFirstPartyTypeKind2[\"ZodNull\"] = \"ZodNull\";\n  ZodFirstPartyTypeKind2[\"ZodAny\"] = \"ZodAny\";\n  ZodFirstPartyTypeKind2[\"ZodUnknown\"] = \"ZodUnknown\";\n  ZodFirstPartyTypeKind2[\"ZodNever\"] = \"ZodNever\";\n  ZodFirstPartyTypeKind2[\"ZodVoid\"] = \"ZodVoid\";\n  ZodFirstPartyTypeKind2[\"ZodArray\"] = \"ZodArray\";\n  ZodFirstPartyTypeKind2[\"ZodObject\"] = \"ZodObject\";\n  ZodFirstPartyTypeKind2[\"ZodUnion\"] = \"ZodUnion\";\n  ZodFirstPartyTypeKind2[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n  ZodFirstPartyTypeKind2[\"ZodIntersection\"] = \"ZodIntersection\";\n  ZodFirstPartyTypeKind2[\"ZodTuple\"] = \"ZodTuple\";\n  ZodFirstPartyTypeKind2[\"ZodRecord\"] = \"ZodRecord\";\n  ZodFirstPartyTypeKind2[\"ZodMap\"] = \"ZodMap\";\n  ZodFirstPartyTypeKind2[\"ZodSet\"] = \"ZodSet\";\n  ZodFirstPartyTypeKind2[\"ZodFunction\"] = \"ZodFunction\";\n  ZodFirstPartyTypeKind2[\"ZodLazy\"] = \"ZodLazy\";\n  ZodFirstPartyTypeKind2[\"ZodLiteral\"] = \"ZodLiteral\";\n  ZodFirstPartyTypeKind2[\"ZodEnum\"] = \"ZodEnum\";\n  ZodFirstPartyTypeKind2[\"ZodEffects\"] = \"ZodEffects\";\n  ZodFirstPartyTypeKind2[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n  ZodFirstPartyTypeKind2[\"ZodOptional\"] = \"ZodOptional\";\n  ZodFirstPartyTypeKind2[\"ZodNullable\"] = \"ZodNullable\";\n  ZodFirstPartyTypeKind2[\"ZodDefault\"] = \"ZodDefault\";\n  ZodFirstPartyTypeKind2[\"ZodCatch\"] = \"ZodCatch\";\n  ZodFirstPartyTypeKind2[\"ZodPromise\"] = \"ZodPromise\";\n  ZodFirstPartyTypeKind2[\"ZodBranded\"] = \"ZodBranded\";\n  ZodFirstPartyTypeKind2[\"ZodPipeline\"] = \"ZodPipeline\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nvar instanceOfType = (cls, params2 = {\n  message: `Input not instance of ${cls.name}`\n}) => custom((data) => data instanceof cls, params2);\nvar stringType = ZodString.create;\nvar numberType = ZodNumber.create;\nvar nanType = ZodNaN.create;\nvar bigIntType = ZodBigInt.create;\nvar booleanType = ZodBoolean.create;\nvar dateType = ZodDate.create;\nvar symbolType = ZodSymbol.create;\nvar undefinedType = ZodUndefined.create;\nvar nullType = ZodNull.create;\nvar anyType = ZodAny.create;\nvar unknownType = ZodUnknown.create;\nvar neverType = ZodNever.create;\nvar voidType = ZodVoid.create;\nvar arrayType = ZodArray.create;\nvar objectType = ZodObject.create;\nvar strictObjectType = ZodObject.strictCreate;\nvar unionType = ZodUnion.create;\nvar discriminatedUnionType = ZodDiscriminatedUnion.create;\nvar intersectionType = ZodIntersection.create;\nvar tupleType = ZodTuple.create;\nvar recordType = ZodRecord.create;\nvar mapType = ZodMap.create;\nvar setType = ZodSet.create;\nvar functionType = ZodFunction.create;\nvar lazyType = ZodLazy.create;\nvar literalType = ZodLiteral.create;\nvar enumType = ZodEnum.create;\nvar nativeEnumType = ZodNativeEnum.create;\nvar promiseType = ZodPromise.create;\nvar effectsType = ZodEffects.create;\nvar optionalType = ZodOptional.create;\nvar nullableType = ZodNullable.create;\nvar preprocessType = ZodEffects.createWithPreprocess;\nvar pipelineType = ZodPipeline.create;\nvar ostring = () => stringType().optional();\nvar onumber = () => numberType().optional();\nvar oboolean = () => booleanType().optional();\nvar coerce = {\n  string: (arg) => ZodString.create({ ...arg, coerce: true }),\n  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),\n  boolean: (arg) => ZodBoolean.create({\n    ...arg,\n    coerce: true\n  }),\n  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),\n  date: (arg) => ZodDate.create({ ...arg, coerce: true })\n};\nvar NEVER = INVALID;\nvar z = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  defaultErrorMap: errorMap,\n  setErrorMap,\n  getErrorMap,\n  makeIssue,\n  EMPTY_PATH,\n  addIssueToContext,\n  ParseStatus,\n  INVALID,\n  DIRTY,\n  OK,\n  isAborted,\n  isDirty,\n  isValid,\n  isAsync,\n  get util() {\n    return util;\n  },\n  get objectUtil() {\n    return objectUtil;\n  },\n  ZodParsedType,\n  getParsedType,\n  ZodType,\n  ZodString,\n  ZodNumber,\n  ZodBigInt,\n  ZodBoolean,\n  ZodDate,\n  ZodSymbol,\n  ZodUndefined,\n  ZodNull,\n  ZodAny,\n  ZodUnknown,\n  ZodNever,\n  ZodVoid,\n  ZodArray,\n  ZodObject,\n  ZodUnion,\n  ZodDiscriminatedUnion,\n  ZodIntersection,\n  ZodTuple,\n  ZodRecord,\n  ZodMap,\n  ZodSet,\n  ZodFunction,\n  ZodLazy,\n  ZodLiteral,\n  ZodEnum,\n  ZodNativeEnum,\n  ZodPromise,\n  ZodEffects,\n  ZodTransformer: ZodEffects,\n  ZodOptional,\n  ZodNullable,\n  ZodDefault,\n  ZodCatch,\n  ZodNaN,\n  BRAND,\n  ZodBranded,\n  ZodPipeline,\n  custom,\n  Schema: ZodType,\n  ZodSchema: ZodType,\n  late,\n  get ZodFirstPartyTypeKind() {\n    return ZodFirstPartyTypeKind;\n  },\n  coerce,\n  any: anyType,\n  array: arrayType,\n  bigint: bigIntType,\n  boolean: booleanType,\n  date: dateType,\n  discriminatedUnion: discriminatedUnionType,\n  effect: effectsType,\n  \"enum\": enumType,\n  \"function\": functionType,\n  \"instanceof\": instanceOfType,\n  intersection: intersectionType,\n  lazy: lazyType,\n  literal: literalType,\n  map: mapType,\n  nan: nanType,\n  nativeEnum: nativeEnumType,\n  never: neverType,\n  \"null\": nullType,\n  nullable: nullableType,\n  number: numberType,\n  object: objectType,\n  oboolean,\n  onumber,\n  optional: optionalType,\n  ostring,\n  pipeline: pipelineType,\n  preprocess: preprocessType,\n  promise: promiseType,\n  record: recordType,\n  set: setType,\n  strictObject: strictObjectType,\n  string: stringType,\n  symbol: symbolType,\n  transformer: effectsType,\n  tuple: tupleType,\n  \"undefined\": undefinedType,\n  union: unionType,\n  unknown: unknownType,\n  \"void\": voidType,\n  NEVER,\n  ZodIssueCode,\n  quotelessJson,\n  ZodError\n});\n\n// ../common-web/src/check.ts\nvar check_exports = {};\n__export(check_exports, {\n  assure: () => assure,\n  is: () => is,\n  isObject: () => isObject\n});\nvar is = (obj, def2) => {\n  return def2.safeParse(obj).success;\n};\nvar assure = (def2, obj) => {\n  return def2.parse(obj);\n};\nvar isObject = (obj) => {\n  return typeof obj === \"object\" && obj !== null;\n};\n\n// ../../node_modules/multiformats/esm/vendor/varint.js\nvar encode_1 = encode;\nvar MSB = 128;\nvar REST = 127;\nvar MSBALL = ~REST;\nvar INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128;\nvar REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError(\"Could not decode varint\");\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function(value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nvar varint_default = _brrp_varint;\n\n// ../../node_modules/multiformats/esm/src/varint.js\nvar decode2 = (data, offset = 0) => {\n  const code2 = varint_default.decode(data, offset);\n  return [\n    code2,\n    varint_default.decode.bytes\n  ];\n};\nvar encodeTo = (int, target, offset = 0) => {\n  varint_default.encode(int, target, offset);\n  return target;\n};\nvar encodingLength = (int) => {\n  return varint_default.encodingLength(int);\n};\n\n// ../../node_modules/multiformats/esm/src/bytes.js\nvar empty = new Uint8Array(0);\nvar equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nvar coerce2 = (o) => {\n  if (o instanceof Uint8Array && o.constructor.name === \"Uint8Array\")\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error(\"Unknown type, must be binary type\");\n};\nvar fromString = (str) => new TextEncoder().encode(str);\nvar toString = (b) => new TextDecoder().decode(b);\n\n// ../../node_modules/multiformats/esm/src/hashes/digest.js\nvar create = (code2, digest2) => {\n  const size = digest2.byteLength;\n  const sizeOffset = encodingLength(code2);\n  const digestOffset = sizeOffset + encodingLength(size);\n  const bytes2 = new Uint8Array(digestOffset + size);\n  encodeTo(code2, bytes2, 0);\n  encodeTo(size, bytes2, sizeOffset);\n  bytes2.set(digest2, digestOffset);\n  return new Digest(code2, size, digest2, bytes2);\n};\nvar decode3 = (multihash) => {\n  const bytes2 = coerce2(multihash);\n  const [code2, sizeOffset] = decode2(bytes2);\n  const [size, digestOffset] = decode2(bytes2.subarray(sizeOffset));\n  const digest2 = bytes2.subarray(sizeOffset + digestOffset);\n  if (digest2.byteLength !== size) {\n    throw new Error(\"Incorrect length\");\n  }\n  return new Digest(code2, size, digest2, bytes2);\n};\nvar equals2 = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equals(a.bytes, b.bytes);\n  }\n};\nvar Digest = class {\n  constructor(code2, size, digest2, bytes2) {\n    this.code = code2;\n    this.size = size;\n    this.digest = digest2;\n    this.bytes = bytes2;\n  }\n};\n\n// ../../node_modules/multiformats/esm/src/bases/base58.js\nvar base58_exports = {};\n__export(base58_exports, {\n  base58btc: () => base58btc,\n  base58flickr: () => base58flickr\n});\n\n// ../../node_modules/multiformats/esm/vendor/base-x.js\nfunction base(ALPHABET, name2) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError(\"Alphabet too long\");\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + \" is ambiguous\");\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode5(source) {\n    if (source instanceof Uint8Array)\n      ;\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError(\"Expected Uint8Array\");\n    }\n    if (source.length === 0) {\n      return \"\";\n    }\n    var zeroes = 0;\n    var length2 = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i2 = 0;\n      for (var it1 = size - 1; (carry !== 0 || i2 < length2) && it1 !== -1; it1--, i2++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error(\"Non-zero carry\");\n      }\n      length2 = i2;\n      pbegin++;\n    }\n    var it2 = size - length2;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== \"string\") {\n      throw new TypeError(\"Expected String\");\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === \" \") {\n      return;\n    }\n    var zeroes = 0;\n    var length2 = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i2 = 0;\n      for (var it3 = size - 1; (carry !== 0 || i2 < length2) && it3 !== -1; it3--, i2++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error(\"Non-zero carry\");\n      }\n      length2 = i2;\n      psz++;\n    }\n    if (source[psz] === \" \") {\n      return;\n    }\n    var it4 = size - length2;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j2 = zeroes;\n    while (it4 !== size) {\n      vch[j2++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode6(string3) {\n    var buffer = decodeUnsafe(string3);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${name2} character`);\n  }\n  return {\n    encode: encode5,\n    decodeUnsafe,\n    decode: decode6\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nvar base_x_default = _brrp__multiformats_scope_baseX;\n\n// ../../node_modules/multiformats/esm/src/bases/base.js\nvar Encoder = class {\n  constructor(name2, prefix, baseEncode) {\n    this.name = name2;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes2) {\n    if (bytes2 instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes2)}`;\n    } else {\n      throw Error(\"Unknown type, must be binary type\");\n    }\n  }\n};\nvar Decoder = class {\n  constructor(name2, prefix, baseDecode) {\n    this.name = name2;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === void 0) {\n      throw new Error(\"Invalid prefix character\");\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === \"string\") {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error(\"Can only multibase decode strings\");\n    }\n  }\n  or(decoder2) {\n    return or(this, decoder2);\n  }\n};\nvar ComposedDecoder = class {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder2) {\n    return or(this, decoder2);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder2 = this.decoders[prefix];\n    if (decoder2) {\n      return decoder2.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n  }\n};\nvar or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nvar Codec = class {\n  constructor(name2, prefix, baseEncode, baseDecode) {\n    this.name = name2;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name2, prefix, baseEncode);\n    this.decoder = new Decoder(name2, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n};\nvar from = ({ name: name2, prefix, encode: encode5, decode: decode6 }) => new Codec(name2, prefix, encode5, decode6);\nvar baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {\n  const { encode: encode5, decode: decode6 } = base_x_default(alphabet2, name2);\n  return from({\n    prefix,\n    name: name2,\n    encode: encode5,\n    decode: (text) => coerce2(decode6(text))\n  });\n};\nvar decode4 = (string3, alphabet2, bitsPerChar, name2) => {\n  const codes = {};\n  for (let i = 0; i < alphabet2.length; ++i) {\n    codes[alphabet2[i]] = i;\n  }\n  let end = string3.length;\n  while (string3[end - 1] === \"=\") {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string3[i]];\n    if (value === void 0) {\n      throw new SyntaxError(`Non-${name2} character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError(\"Unexpected end of data\");\n  }\n  return out;\n};\nvar encode2 = (data, alphabet2, bitsPerChar) => {\n  const pad = alphabet2[alphabet2.length - 1] === \"=\";\n  const mask = (1 << bitsPerChar) - 1;\n  let out = \"\";\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet2[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet2[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += \"=\";\n    }\n  }\n  return out;\n};\nvar rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {\n  return from({\n    prefix,\n    name: name2,\n    encode(input) {\n      return encode2(input, alphabet2, bitsPerChar);\n    },\n    decode(input) {\n      return decode4(input, alphabet2, bitsPerChar, name2);\n    }\n  });\n};\n\n// ../../node_modules/multiformats/esm/src/bases/base58.js\nvar base58btc = baseX({\n  name: \"base58btc\",\n  prefix: \"z\",\n  alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n});\nvar base58flickr = baseX({\n  name: \"base58flickr\",\n  prefix: \"Z\",\n  alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base32.js\nvar base32_exports = {};\n__export(base32_exports, {\n  base32: () => base32,\n  base32hex: () => base32hex,\n  base32hexpad: () => base32hexpad,\n  base32hexpadupper: () => base32hexpadupper,\n  base32hexupper: () => base32hexupper,\n  base32pad: () => base32pad,\n  base32padupper: () => base32padupper,\n  base32upper: () => base32upper,\n  base32z: () => base32z\n});\nvar base32 = rfc4648({\n  prefix: \"b\",\n  name: \"base32\",\n  alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n  bitsPerChar: 5\n});\nvar base32upper = rfc4648({\n  prefix: \"B\",\n  name: \"base32upper\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n  bitsPerChar: 5\n});\nvar base32pad = rfc4648({\n  prefix: \"c\",\n  name: \"base32pad\",\n  alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n  bitsPerChar: 5\n});\nvar base32padupper = rfc4648({\n  prefix: \"C\",\n  name: \"base32padupper\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n  bitsPerChar: 5\n});\nvar base32hex = rfc4648({\n  prefix: \"v\",\n  name: \"base32hex\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n  bitsPerChar: 5\n});\nvar base32hexupper = rfc4648({\n  prefix: \"V\",\n  name: \"base32hexupper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n  bitsPerChar: 5\n});\nvar base32hexpad = rfc4648({\n  prefix: \"t\",\n  name: \"base32hexpad\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n  bitsPerChar: 5\n});\nvar base32hexpadupper = rfc4648({\n  prefix: \"T\",\n  name: \"base32hexpadupper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n  bitsPerChar: 5\n});\nvar base32z = rfc4648({\n  prefix: \"h\",\n  name: \"base32z\",\n  alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n  bitsPerChar: 5\n});\n\n// ../../node_modules/multiformats/esm/src/cid.js\nvar CID = class {\n  constructor(version2, code2, multihash, bytes2) {\n    this.code = code2;\n    this.version = version2;\n    this.multihash = multihash;\n    this.bytes = bytes2;\n    this.byteOffset = bytes2.byteOffset;\n    this.byteLength = bytes2.byteLength;\n    this.asCID = this;\n    this._baseCache = /* @__PURE__ */ new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n      case 0: {\n        return this;\n      }\n      default: {\n        const { code: code2, multihash } = this;\n        if (code2 !== DAG_PB_CODE) {\n          throw new Error(\"Cannot convert a non dag-pb CID to CIDv0\");\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error(\"Cannot convert non sha2-256 multihash CID to CIDv0\");\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n      case 0: {\n        const { code: code2, digest: digest2 } = this.multihash;\n        const multihash = create(code2, digest2);\n        return CID.createV1(this.code, multihash);\n      }\n      case 1: {\n        return this;\n      }\n      default: {\n        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);\n  }\n  toString(base3) {\n    const { bytes: bytes2, version: version2, _baseCache } = this;\n    switch (version2) {\n      case 0:\n        return toStringV0(bytes2, _baseCache, base3 || base58btc.encoder);\n      default:\n        return toStringV1(bytes2, _baseCache, base3 || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return \"CID\";\n  }\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    return \"CID(\" + this.toString() + \")\";\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error(\"Deprecated, use .toString()\");\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error(\"Deprecated .buffer property, use .bytes to get Uint8Array instead\");\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const { version: version2, code: code2, multihash, bytes: bytes2 } = value;\n      return new CID(version2, code2, multihash, bytes2 || encodeCID(version2, code2, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const { version: version2, multihash, code: code2 } = value;\n      const digest2 = decode3(multihash);\n      return CID.create(version2, code2, digest2);\n    } else {\n      return null;\n    }\n  }\n  static create(version2, code2, digest2) {\n    if (typeof code2 !== \"number\") {\n      throw new Error(\"String codecs are no longer supported\");\n    }\n    switch (version2) {\n      case 0: {\n        if (code2 !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n        } else {\n          return new CID(version2, code2, digest2, digest2.bytes);\n        }\n      }\n      case 1: {\n        const bytes2 = encodeCID(version2, code2, digest2.bytes);\n        return new CID(version2, code2, digest2, bytes2);\n      }\n      default: {\n        throw new Error(\"Invalid version\");\n      }\n    }\n  }\n  static createV0(digest2) {\n    return CID.create(0, DAG_PB_CODE, digest2);\n  }\n  static createV1(code2, digest2) {\n    return CID.create(1, code2, digest2);\n  }\n  static decode(bytes2) {\n    const [cid2, remainder] = CID.decodeFirst(bytes2);\n    if (remainder.length) {\n      throw new Error(\"Incorrect length\");\n    }\n    return cid2;\n  }\n  static decodeFirst(bytes2) {\n    const specs = CID.inspectBytes(bytes2);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce2(bytes2.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error(\"Incorrect length\");\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid2 = specs.version === 0 ? CID.createV0(digest2) : CID.createV1(specs.codec, digest2);\n    return [\n      cid2,\n      bytes2.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length2] = decode2(initialBytes.subarray(offset));\n      offset += length2;\n      return i;\n    };\n    let version2 = next();\n    let codec = DAG_PB_CODE;\n    if (version2 === 18) {\n      version2 = 0;\n      offset = 0;\n    } else if (version2 === 1) {\n      codec = next();\n    }\n    if (version2 !== 0 && version2 !== 1) {\n      throw new RangeError(`Invalid CID version ${version2}`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version: version2,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base3) {\n    const [prefix, bytes2] = parseCIDtoBytes(source, base3);\n    const cid2 = CID.decode(bytes2);\n    cid2._baseCache.set(prefix, source);\n    return cid2;\n  }\n};\nvar parseCIDtoBytes = (source, base3) => {\n  switch (source[0]) {\n    case \"Q\": {\n      const decoder2 = base3 || base58btc;\n      return [\n        base58btc.prefix,\n        decoder2.decode(`${base58btc.prefix}${source}`)\n      ];\n    }\n    case base58btc.prefix: {\n      const decoder2 = base3 || base58btc;\n      return [\n        base58btc.prefix,\n        decoder2.decode(source)\n      ];\n    }\n    case base32.prefix: {\n      const decoder2 = base3 || base32;\n      return [\n        base32.prefix,\n        decoder2.decode(source)\n      ];\n    }\n    default: {\n      if (base3 == null) {\n        throw Error(\"To parse non base32 or base58btc encoded CID multibase decoder must be provided\");\n      }\n      return [\n        source[0],\n        base3.decode(source)\n      ];\n    }\n  }\n};\nvar toStringV0 = (bytes2, cache, base3) => {\n  const { prefix } = base3;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);\n  }\n  const cid2 = cache.get(prefix);\n  if (cid2 == null) {\n    const cid3 = base3.encode(bytes2).slice(1);\n    cache.set(prefix, cid3);\n    return cid3;\n  } else {\n    return cid2;\n  }\n};\nvar toStringV1 = (bytes2, cache, base3) => {\n  const { prefix } = base3;\n  const cid2 = cache.get(prefix);\n  if (cid2 == null) {\n    const cid3 = base3.encode(bytes2);\n    cache.set(prefix, cid3);\n    return cid3;\n  } else {\n    return cid2;\n  }\n};\nvar DAG_PB_CODE = 112;\nvar SHA_256_CODE = 18;\nvar encodeCID = (version2, code2, multihash) => {\n  const codeOffset = encodingLength(version2);\n  const hashOffset = codeOffset + encodingLength(code2);\n  const bytes2 = new Uint8Array(hashOffset + multihash.byteLength);\n  encodeTo(version2, bytes2, 0);\n  encodeTo(code2, bytes2, codeOffset);\n  bytes2.set(multihash, hashOffset);\n  return bytes2;\n};\nvar cidSymbol = Symbol.for(\"@ipld/js-cid/CID\");\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nvar hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nvar version = \"0.0.0-dev\";\nvar deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nvar IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\n// ../../node_modules/multiformats/esm/src/bases/identity.js\nvar identity_exports = {};\n__export(identity_exports, {\n  identity: () => identity\n});\nvar identity = from({\n  prefix: \"\\0\",\n  name: \"identity\",\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base2.js\nvar base2_exports = {};\n__export(base2_exports, {\n  base2: () => base2\n});\nvar base2 = rfc4648({\n  prefix: \"0\",\n  name: \"base2\",\n  alphabet: \"01\",\n  bitsPerChar: 1\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base8.js\nvar base8_exports = {};\n__export(base8_exports, {\n  base8: () => base8\n});\nvar base8 = rfc4648({\n  prefix: \"7\",\n  name: \"base8\",\n  alphabet: \"01234567\",\n  bitsPerChar: 3\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base10.js\nvar base10_exports = {};\n__export(base10_exports, {\n  base10: () => base10\n});\nvar base10 = baseX({\n  prefix: \"9\",\n  name: \"base10\",\n  alphabet: \"0123456789\"\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base16.js\nvar base16_exports = {};\n__export(base16_exports, {\n  base16: () => base16,\n  base16upper: () => base16upper\n});\nvar base16 = rfc4648({\n  prefix: \"f\",\n  name: \"base16\",\n  alphabet: \"0123456789abcdef\",\n  bitsPerChar: 4\n});\nvar base16upper = rfc4648({\n  prefix: \"F\",\n  name: \"base16upper\",\n  alphabet: \"0123456789ABCDEF\",\n  bitsPerChar: 4\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base36.js\nvar base36_exports = {};\n__export(base36_exports, {\n  base36: () => base36,\n  base36upper: () => base36upper\n});\nvar base36 = baseX({\n  prefix: \"k\",\n  name: \"base36\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n});\nvar base36upper = baseX({\n  prefix: \"K\",\n  name: \"base36upper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base64.js\nvar base64_exports = {};\n__export(base64_exports, {\n  base64: () => base64,\n  base64pad: () => base64pad,\n  base64url: () => base64url,\n  base64urlpad: () => base64urlpad\n});\nvar base64 = rfc4648({\n  prefix: \"m\",\n  name: \"base64\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n  bitsPerChar: 6\n});\nvar base64pad = rfc4648({\n  prefix: \"M\",\n  name: \"base64pad\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n  bitsPerChar: 6\n});\nvar base64url = rfc4648({\n  prefix: \"u\",\n  name: \"base64url\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n  bitsPerChar: 6\n});\nvar base64urlpad = rfc4648({\n  prefix: \"U\",\n  name: \"base64urlpad\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n  bitsPerChar: 6\n});\n\n// ../../node_modules/multiformats/esm/src/bases/base256emoji.js\nvar base256emoji_exports = {};\n__export(base256emoji_exports, {\n  base256emoji: () => base256emoji\n});\nvar alphabet = Array.from(\"\\u{1F680}\\u{1FA90}\\u2604\\u{1F6F0}\\u{1F30C}\\u{1F311}\\u{1F312}\\u{1F313}\\u{1F314}\\u{1F315}\\u{1F316}\\u{1F317}\\u{1F318}\\u{1F30D}\\u{1F30F}\\u{1F30E}\\u{1F409}\\u2600\\u{1F4BB}\\u{1F5A5}\\u{1F4BE}\\u{1F4BF}\\u{1F602}\\u2764\\u{1F60D}\\u{1F923}\\u{1F60A}\\u{1F64F}\\u{1F495}\\u{1F62D}\\u{1F618}\\u{1F44D}\\u{1F605}\\u{1F44F}\\u{1F601}\\u{1F525}\\u{1F970}\\u{1F494}\\u{1F496}\\u{1F499}\\u{1F622}\\u{1F914}\\u{1F606}\\u{1F644}\\u{1F4AA}\\u{1F609}\\u263A\\u{1F44C}\\u{1F917}\\u{1F49C}\\u{1F614}\\u{1F60E}\\u{1F607}\\u{1F339}\\u{1F926}\\u{1F389}\\u{1F49E}\\u270C\\u2728\\u{1F937}\\u{1F631}\\u{1F60C}\\u{1F338}\\u{1F64C}\\u{1F60B}\\u{1F497}\\u{1F49A}\\u{1F60F}\\u{1F49B}\\u{1F642}\\u{1F493}\\u{1F929}\\u{1F604}\\u{1F600}\\u{1F5A4}\\u{1F603}\\u{1F4AF}\\u{1F648}\\u{1F447}\\u{1F3B6}\\u{1F612}\\u{1F92D}\\u2763\\u{1F61C}\\u{1F48B}\\u{1F440}\\u{1F62A}\\u{1F611}\\u{1F4A5}\\u{1F64B}\\u{1F61E}\\u{1F629}\\u{1F621}\\u{1F92A}\\u{1F44A}\\u{1F973}\\u{1F625}\\u{1F924}\\u{1F449}\\u{1F483}\\u{1F633}\\u270B\\u{1F61A}\\u{1F61D}\\u{1F634}\\u{1F31F}\\u{1F62C}\\u{1F643}\\u{1F340}\\u{1F337}\\u{1F63B}\\u{1F613}\\u2B50\\u2705\\u{1F97A}\\u{1F308}\\u{1F608}\\u{1F918}\\u{1F4A6}\\u2714\\u{1F623}\\u{1F3C3}\\u{1F490}\\u2639\\u{1F38A}\\u{1F498}\\u{1F620}\\u261D\\u{1F615}\\u{1F33A}\\u{1F382}\\u{1F33B}\\u{1F610}\\u{1F595}\\u{1F49D}\\u{1F64A}\\u{1F639}\\u{1F5E3}\\u{1F4AB}\\u{1F480}\\u{1F451}\\u{1F3B5}\\u{1F91E}\\u{1F61B}\\u{1F534}\\u{1F624}\\u{1F33C}\\u{1F62B}\\u26BD\\u{1F919}\\u2615\\u{1F3C6}\\u{1F92B}\\u{1F448}\\u{1F62E}\\u{1F646}\\u{1F37B}\\u{1F343}\\u{1F436}\\u{1F481}\\u{1F632}\\u{1F33F}\\u{1F9E1}\\u{1F381}\\u26A1\\u{1F31E}\\u{1F388}\\u274C\\u270A\\u{1F44B}\\u{1F630}\\u{1F928}\\u{1F636}\\u{1F91D}\\u{1F6B6}\\u{1F4B0}\\u{1F353}\\u{1F4A2}\\u{1F91F}\\u{1F641}\\u{1F6A8}\\u{1F4A8}\\u{1F92C}\\u2708\\u{1F380}\\u{1F37A}\\u{1F913}\\u{1F619}\\u{1F49F}\\u{1F331}\\u{1F616}\\u{1F476}\\u{1F974}\\u25B6\\u27A1\\u2753\\u{1F48E}\\u{1F4B8}\\u2B07\\u{1F628}\\u{1F31A}\\u{1F98B}\\u{1F637}\\u{1F57A}\\u26A0\\u{1F645}\\u{1F61F}\\u{1F635}\\u{1F44E}\\u{1F932}\\u{1F920}\\u{1F927}\\u{1F4CC}\\u{1F535}\\u{1F485}\\u{1F9D0}\\u{1F43E}\\u{1F352}\\u{1F617}\\u{1F911}\\u{1F30A}\\u{1F92F}\\u{1F437}\\u260E\\u{1F4A7}\\u{1F62F}\\u{1F486}\\u{1F446}\\u{1F3A4}\\u{1F647}\\u{1F351}\\u2744\\u{1F334}\\u{1F4A3}\\u{1F438}\\u{1F48C}\\u{1F4CD}\\u{1F940}\\u{1F922}\\u{1F445}\\u{1F4A1}\\u{1F4A9}\\u{1F450}\\u{1F4F8}\\u{1F47B}\\u{1F910}\\u{1F92E}\\u{1F3BC}\\u{1F975}\\u{1F6A9}\\u{1F34E}\\u{1F34A}\\u{1F47C}\\u{1F48D}\\u{1F4E3}\\u{1F942}\");\nvar alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nvar alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode3(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, \"\");\n}\nfunction decode5(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === void 0) {\n      throw new Error(`Non-base256emoji character: ${char}`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nvar base256emoji = from({\n  prefix: \"\\u{1F680}\",\n  name: \"base256emoji\",\n  encode: encode3,\n  decode: decode5\n});\n\n// ../../node_modules/multiformats/esm/src/hashes/sha2-browser.js\nvar sha2_browser_exports = {};\n__export(sha2_browser_exports, {\n  sha256: () => sha256,\n  sha512: () => sha512\n});\n\n// ../../node_modules/multiformats/esm/src/hashes/hasher.js\nvar from2 = ({ name: name2, code: code2, encode: encode5 }) => new Hasher(name2, code2, encode5);\nvar Hasher = class {\n  constructor(name2, code2, encode5) {\n    this.name = name2;\n    this.code = code2;\n    this.encode = encode5;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? create(this.code, result) : result.then((digest2) => create(this.code, digest2));\n    } else {\n      throw Error(\"Unknown type, must be binary type\");\n    }\n  }\n};\n\n// ../../node_modules/multiformats/esm/src/hashes/sha2-browser.js\nvar sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));\nvar sha256 = from2({\n  name: \"sha2-256\",\n  code: 18,\n  encode: sha(\"SHA-256\")\n});\nvar sha512 = from2({\n  name: \"sha2-512\",\n  code: 19,\n  encode: sha(\"SHA-512\")\n});\n\n// ../../node_modules/multiformats/esm/src/hashes/identity.js\nvar identity_exports2 = {};\n__export(identity_exports2, {\n  identity: () => identity2\n});\nvar code = 0;\nvar name = \"identity\";\nvar encode4 = coerce2;\nvar digest = (input) => create(code, encode4(input));\nvar identity2 = {\n  code,\n  name,\n  encode: encode4,\n  digest\n};\n\n// ../../node_modules/multiformats/esm/src/codecs/json.js\nvar textEncoder = new TextEncoder();\nvar textDecoder = new TextDecoder();\n\n// ../../node_modules/multiformats/esm/src/basics.js\nvar bases = {\n  ...identity_exports,\n  ...base2_exports,\n  ...base8_exports,\n  ...base10_exports,\n  ...base16_exports,\n  ...base32_exports,\n  ...base36_exports,\n  ...base58_exports,\n  ...base64_exports,\n  ...base256emoji_exports\n};\nvar hashes = {\n  ...sha2_browser_exports,\n  ...identity_exports2\n};\n\n// ../../node_modules/uint8arrays/esm/src/util/bases.js\nfunction createCodec(name2, prefix, encode5, decode6) {\n  return {\n    name: name2,\n    prefix,\n    encoder: {\n      name: name2,\n      prefix,\n      encode: encode5\n    },\n    decoder: { decode: decode6 }\n  };\n}\nvar string = createCodec(\"utf8\", \"u\", (buf) => {\n  const decoder2 = new TextDecoder(\"utf8\");\n  return \"u\" + decoder2.decode(buf);\n}, (str) => {\n  const encoder2 = new TextEncoder();\n  return encoder2.encode(str.substring(1));\n});\nvar ascii = createCodec(\"ascii\", \"a\", (buf) => {\n  let string3 = \"a\";\n  for (let i = 0; i < buf.length; i++) {\n    string3 += String.fromCharCode(buf[i]);\n  }\n  return string3;\n}, (str) => {\n  str = str.substring(1);\n  const buf = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nvar BASES = {\n  utf8: string,\n  \"utf-8\": string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii,\n  binary: ascii,\n  ...bases\n};\nvar bases_default = BASES;\n\n// ../../node_modules/uint8arrays/esm/src/from-string.js\nfunction fromString2(string3, encoding = \"utf8\") {\n  const base3 = bases_default[encoding];\n  if (!base3) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n  return base3.decoder.decode(`${base3.prefix}${string3}`);\n}\n\n// ../../node_modules/uint8arrays/esm/src/to-string.js\nfunction toString2(array2, encoding = \"utf8\") {\n  const base3 = bases_default[encoding];\n  if (!base3) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n  return base3.encoder.encode(array2).substring(1);\n}\n\n// ../common-web/src/ipld.ts\nvar jsonToIpld = (val) => {\n  if (Array.isArray(val)) {\n    return val.map((item) => jsonToIpld(item));\n  }\n  if (val && typeof val === \"object\") {\n    if (typeof val[\"$link\"] === \"string\" && Object.keys(val).length === 1) {\n      return CID.parse(val[\"$link\"]);\n    }\n    if (typeof val[\"$bytes\"] === \"string\" && Object.keys(val).length === 1) {\n      return fromString2(val[\"$bytes\"], \"base64\");\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = jsonToIpld(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\nvar ipldToJson = (val) => {\n  if (Array.isArray(val)) {\n    return val.map((item) => ipldToJson(item));\n  }\n  if (val && typeof val === \"object\") {\n    if (val instanceof Uint8Array) {\n      return {\n        $bytes: toString2(val, \"base64\")\n      };\n    }\n    if (CID.asCID(val)) {\n      return {\n        $link: val.toString()\n      };\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToJson(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\n\n// ../common-web/src/types.ts\nvar cidSchema = z.any().refine((obj) => CID.asCID(obj) !== null, {\n  message: \"Not a CID\"\n}).transform((obj) => CID.asCID(obj));\nvar schema = {\n  cid: cidSchema,\n  bytes: z.instanceof(Uint8Array),\n  string: z.string(),\n  array: z.array(z.unknown()),\n  map: z.record(z.string(), z.unknown()),\n  unknown: z.unknown()\n};\nvar def = {\n  cid: {\n    name: \"cid\",\n    schema: schema.cid\n  },\n  bytes: {\n    name: \"bytes\",\n    schema: schema.bytes\n  },\n  string: {\n    name: \"string\",\n    schema: schema.string\n  },\n  map: {\n    name: \"map\",\n    schema: schema.map\n  },\n  unknown: {\n    name: \"unknown\",\n    schema: schema.unknown\n  }\n};\n\n// ../common-web/src/times.ts\nvar SECOND = 1e3;\nvar MINUTE = SECOND * 60;\nvar HOUR = MINUTE * 60;\nvar DAY = HOUR * 24;\n\n// ../common-web/src/strings.ts\nvar import_graphemer = __toESM(require_lib());\nvar utf8Len = (str) => {\n  return new TextEncoder().encode(str).byteLength;\n};\nvar graphemeLen = (str) => {\n  const splitter = new import_graphemer.default();\n  return splitter.countGraphemes(str);\n};\nvar parseLanguage = (langTag) => {\n  const parsed = langTag.match(bcp47Regexp);\n  if (!parsed?.groups)\n    return null;\n  const parts = parsed.groups;\n  return {\n    grandfathered: parts.grandfathered,\n    language: parts.language,\n    extlang: parts.extlang,\n    script: parts.script,\n    region: parts.region,\n    variant: parts.variant,\n    extension: parts.extension,\n    privateUse: parts.privateUseA || parts.privateUseB\n  };\n};\nvar validateLanguage = (langTag) => {\n  return bcp47Regexp.test(langTag);\n};\nvar bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;\n\n// ../lexicon/src/validators/formats.ts\nvar import_iso_datestring_validator = __toESM(require_dist());\nfunction datetime(path, value) {\n  try {\n    if (!(0, import_iso_datestring_validator.isValidISODateString)(value)) {\n      throw new Error();\n    }\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(\n        `${path} must be an iso8601 formatted datetime`\n      )\n    };\n  }\n  return { success: true, value };\n}\nfunction uri(path, value) {\n  const isUri = value.match(/^\\w+:(?:\\/\\/)?[^\\s/][^\\s]*$/) !== null;\n  if (!isUri) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a uri`)\n    };\n  }\n  return { success: true, value };\n}\nfunction atUri(path, value) {\n  try {\n    ensureValidAtUri(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid at-uri`)\n    };\n  }\n  return { success: true, value };\n}\nfunction did(path, value) {\n  try {\n    ensureValidDid(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid did`)\n    };\n  }\n  return { success: true, value };\n}\nfunction handle(path, value) {\n  try {\n    ensureValidHandle(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid handle`)\n    };\n  }\n  return { success: true, value };\n}\nfunction atIdentifier(path, value) {\n  const isDid = did(path, value);\n  if (!isDid.success) {\n    const isHandle2 = handle(path, value);\n    if (!isHandle2.success) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be a valid did or a handle`)\n      };\n    }\n  }\n  return { success: true, value };\n}\nfunction nsid(path, value) {\n  try {\n    ensureValidNsid(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid nsid`)\n    };\n  }\n  return { success: true, value };\n}\nfunction cid(path, value) {\n  try {\n    CID.parse(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a cid string`)\n    };\n  }\n  return { success: true, value };\n}\nfunction language(path, value) {\n  if (validateLanguage(value)) {\n    return { success: true, value };\n  }\n  return {\n    success: false,\n    error: new ValidationError(\n      `${path} must be a well-formed BCP 47 language tag`\n    )\n  };\n}\n\n// ../lexicon/src/validators/primitives.ts\nfunction validate(lexicons2, path, def2, value) {\n  switch (def2.type) {\n    case \"boolean\":\n      return boolean(lexicons2, path, def2, value);\n    case \"integer\":\n      return integer(lexicons2, path, def2, value);\n    case \"string\":\n      return string2(lexicons2, path, def2, value);\n    case \"bytes\":\n      return bytes(lexicons2, path, def2, value);\n    case \"cid-link\":\n      return cidLink(lexicons2, path, def2, value);\n    case \"unknown\":\n      return unknown(lexicons2, path, def2, value);\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)\n      };\n  }\n}\nfunction boolean(lexicons2, path, def2, value) {\n  def2 = def2;\n  const type = typeof value;\n  if (type === \"undefined\") {\n    if (typeof def2.default === \"boolean\") {\n      return { success: true, value: def2.default };\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`)\n    };\n  } else if (type !== \"boolean\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`)\n    };\n  }\n  if (typeof def2.const === \"boolean\") {\n    if (value !== def2.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def2.const}`)\n      };\n    }\n  }\n  return { success: true, value };\n}\nfunction integer(lexicons2, path, def2, value) {\n  def2 = def2;\n  const type = typeof value;\n  if (type === \"undefined\") {\n    if (typeof def2.default === \"number\") {\n      return { success: true, value: def2.default };\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`)\n    };\n  } else if (!Number.isInteger(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`)\n    };\n  }\n  if (typeof def2.const === \"number\") {\n    if (value !== def2.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def2.const}`)\n      };\n    }\n  }\n  if (Array.isArray(def2.enum)) {\n    if (!def2.enum.includes(value)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be one of (${def2.enum.join(\"|\")})`\n        )\n      };\n    }\n  }\n  if (typeof def2.maximum === \"number\") {\n    if (value > def2.maximum) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} can not be greater than ${def2.maximum}`\n        )\n      };\n    }\n  }\n  if (typeof def2.minimum === \"number\") {\n    if (value < def2.minimum) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} can not be less than ${def2.minimum}`\n        )\n      };\n    }\n  }\n  return { success: true, value };\n}\nfunction string2(lexicons2, path, def2, value) {\n  def2 = def2;\n  if (typeof value === \"undefined\") {\n    if (typeof def2.default === \"string\") {\n      return { success: true, value: def2.default };\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`)\n    };\n  } else if (typeof value !== \"string\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`)\n    };\n  }\n  if (typeof def2.const === \"string\") {\n    if (value !== def2.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def2.const}`)\n      };\n    }\n  }\n  if (Array.isArray(def2.enum)) {\n    if (!def2.enum.includes(value)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be one of (${def2.enum.join(\"|\")})`\n        )\n      };\n    }\n  }\n  if (typeof def2.maxLength === \"number\") {\n    if (utf8Len(value) > def2.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be longer than ${def2.maxLength} characters`\n        )\n      };\n    }\n  }\n  if (typeof def2.minLength === \"number\") {\n    if (utf8Len(value) < def2.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be shorter than ${def2.minLength} characters`\n        )\n      };\n    }\n  }\n  if (typeof def2.maxGraphemes === \"number\") {\n    if (graphemeLen(value) > def2.maxGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be longer than ${def2.maxGraphemes} graphemes`\n        )\n      };\n    }\n  }\n  if (typeof def2.minGraphemes === \"number\") {\n    if (graphemeLen(value) < def2.minGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be shorter than ${def2.minGraphemes} graphemes`\n        )\n      };\n    }\n  }\n  if (typeof def2.format === \"string\") {\n    switch (def2.format) {\n      case \"datetime\":\n        return datetime(path, value);\n      case \"uri\":\n        return uri(path, value);\n      case \"at-uri\":\n        return atUri(path, value);\n      case \"did\":\n        return did(path, value);\n      case \"handle\":\n        return handle(path, value);\n      case \"at-identifier\":\n        return atIdentifier(path, value);\n      case \"nsid\":\n        return nsid(path, value);\n      case \"cid\":\n        return cid(path, value);\n      case \"language\":\n        return language(path, value);\n    }\n  }\n  return { success: true, value };\n}\nfunction bytes(lexicons2, path, def2, value) {\n  def2 = def2;\n  if (!value || !(value instanceof Uint8Array)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a byte array`)\n    };\n  }\n  if (typeof def2.maxLength === \"number\") {\n    if (value.byteLength > def2.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be larger than ${def2.maxLength} bytes`\n        )\n      };\n    }\n  }\n  if (typeof def2.minLength === \"number\") {\n    if (value.byteLength < def2.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be smaller than ${def2.minLength} bytes`\n        )\n      };\n    }\n  }\n  return { success: true, value };\n}\nfunction cidLink(lexicons2, path, def2, value) {\n  if (CID.asCID(value) === null) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a CID`)\n    };\n  }\n  return { success: true, value };\n}\nfunction unknown(lexicons2, path, def2, value) {\n  if (!value || typeof value !== \"object\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`)\n    };\n  }\n  return { success: true, value };\n}\n\n// ../lexicon/src/blob-refs.ts\nvar typedJsonBlobRef = z.object({\n  $type: z.literal(\"blob\"),\n  ref: schema.cid,\n  mimeType: z.string(),\n  size: z.number()\n}).strict();\nvar untypedJsonBlobRef = z.object({\n  cid: z.string(),\n  mimeType: z.string()\n}).strict();\nvar jsonBlobRef = z.union([typedJsonBlobRef, untypedJsonBlobRef]);\nvar BlobRef = class {\n  constructor(ref, mimeType, size, original) {\n    this.ref = ref;\n    this.mimeType = mimeType;\n    this.size = size;\n    this.original = original ?? {\n      $type: \"blob\",\n      ref,\n      mimeType,\n      size\n    };\n  }\n  static asBlobRef(obj) {\n    if (check_exports.is(obj, jsonBlobRef)) {\n      return BlobRef.fromJsonRef(obj);\n    }\n    return null;\n  }\n  static fromJsonRef(json) {\n    if (check_exports.is(json, typedJsonBlobRef)) {\n      return new BlobRef(json.ref, json.mimeType, json.size);\n    } else {\n      return new BlobRef(CID.parse(json.cid), json.mimeType, -1, json);\n    }\n  }\n  ipld() {\n    return {\n      $type: \"blob\",\n      ref: this.ref,\n      mimeType: this.mimeType,\n      size: this.size\n    };\n  }\n  toJSON() {\n    return ipldToJson(this.ipld());\n  }\n};\n\n// ../lexicon/src/validators/blob.ts\nfunction blob(lexicons2, path, def2, value) {\n  if (!value || !(value instanceof BlobRef)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} should be a blob ref`)\n    };\n  }\n  return { success: true, value };\n}\n\n// ../lexicon/src/validators/complex.ts\nfunction validate2(lexicons2, path, def2, value) {\n  switch (def2.type) {\n    case \"boolean\":\n      return boolean(lexicons2, path, def2, value);\n    case \"integer\":\n      return integer(lexicons2, path, def2, value);\n    case \"string\":\n      return string2(lexicons2, path, def2, value);\n    case \"bytes\":\n      return bytes(lexicons2, path, def2, value);\n    case \"cid-link\":\n      return cidLink(lexicons2, path, def2, value);\n    case \"unknown\":\n      return unknown(lexicons2, path, def2, value);\n    case \"object\":\n      return object(lexicons2, path, def2, value);\n    case \"array\":\n      return array(lexicons2, path, def2, value);\n    case \"blob\":\n      return blob(lexicons2, path, def2, value);\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)\n      };\n  }\n}\nfunction array(lexicons2, path, def2, value) {\n  if (!Array.isArray(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an array`)\n    };\n  }\n  if (typeof def2.maxLength === \"number\") {\n    if (value.length > def2.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not have more than ${def2.maxLength} elements`\n        )\n      };\n    }\n  }\n  if (typeof def2.minLength === \"number\") {\n    if (value.length < def2.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not have fewer than ${def2.minLength} elements`\n        )\n      };\n    }\n  }\n  const itemsDef = def2.items;\n  for (let i = 0; i < value.length; i++) {\n    const itemValue = value[i];\n    const itemPath = `${path}/${i}`;\n    const res = validateOneOf(lexicons2, itemPath, itemsDef, itemValue);\n    if (!res.success) {\n      return res;\n    }\n  }\n  return { success: true, value };\n}\nfunction object(lexicons2, path, def2, value) {\n  def2 = def2;\n  if (!value || typeof value !== \"object\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`)\n    };\n  }\n  const requiredProps = new Set(def2.required);\n  const nullableProps = new Set(def2.nullable);\n  let resultValue = value;\n  if (typeof def2.properties === \"object\") {\n    for (const key in def2.properties) {\n      if (value[key] === null && nullableProps.has(key)) {\n        continue;\n      }\n      const propDef = def2.properties[key];\n      const propPath = `${path}/${key}`;\n      const validated = validateOneOf(lexicons2, propPath, propDef, value[key]);\n      const propValue = validated.success ? validated.value : value[key];\n      const propIsUndefined = typeof propValue === \"undefined\";\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`)\n        };\n      } else if (!propIsUndefined && !validated.success) {\n        return validated;\n      }\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          resultValue = { ...value };\n        }\n        resultValue[key] = propValue;\n      }\n    }\n  }\n  return { success: true, value: resultValue };\n}\n\n// ../lexicon/src/util.ts\nfunction toLexUri(str, baseUri) {\n  if (str.split(\"#\").length > 2) {\n    throw new Error(\"Uri can only have one hash segment\");\n  }\n  if (str.startsWith(\"lex:\")) {\n    return str;\n  }\n  if (str.startsWith(\"#\")) {\n    if (!baseUri) {\n      throw new Error(`Unable to resolve uri without anchor: ${str}`);\n    }\n    return `${baseUri}${str}`;\n  }\n  return `lex:${str}`;\n}\nfunction validateOneOf(lexicons2, path, def2, value, mustBeObj = false) {\n  let error;\n  let concreteDefs;\n  if (def2.type === \"union\") {\n    if (!isDiscriminatedObject(value)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be an object which includes the \"$type\" property`\n        )\n      };\n    }\n    if (!refsContainType(def2.refs, value.$type)) {\n      if (def2.closed) {\n        return {\n          success: false,\n          error: new ValidationError(\n            `${path} $type must be one of ${def2.refs.join(\", \")}`\n          )\n        };\n      }\n      return { success: true, value };\n    } else {\n      concreteDefs = toConcreteTypes(lexicons2, {\n        type: \"ref\",\n        ref: value.$type\n      });\n    }\n  } else {\n    concreteDefs = toConcreteTypes(lexicons2, def2);\n  }\n  for (const concreteDef of concreteDefs) {\n    const result = mustBeObj ? object(lexicons2, path, concreteDef, value) : validate2(lexicons2, path, concreteDef, value);\n    if (result.success) {\n      return result;\n    }\n    error ?? (error = result.error);\n  }\n  if (concreteDefs.length > 1) {\n    return {\n      success: false,\n      error: new ValidationError(\n        `${path} did not match any of the expected definitions`\n      )\n    };\n  }\n  return { success: false, error };\n}\nfunction assertValidOneOf(lexicons2, path, def2, value, mustBeObj = false) {\n  const res = validateOneOf(lexicons2, path, def2, value, mustBeObj);\n  if (!res.success)\n    throw res.error;\n  return res.value;\n}\nfunction toConcreteTypes(lexicons2, def2) {\n  if (def2.type === \"ref\") {\n    return [lexicons2.getDefOrThrow(def2.ref)];\n  } else if (def2.type === \"union\") {\n    return def2.refs.map((ref) => lexicons2.getDefOrThrow(ref)).flat();\n  } else {\n    return [def2];\n  }\n}\nfunction requiredPropertiesRefinement(object2, ctx) {\n  if (object2.required === void 0) {\n    return;\n  }\n  if (!Array.isArray(object2.required)) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.invalid_type,\n      received: typeof object2.required,\n      expected: \"array\"\n    });\n    return;\n  }\n  if (object2.properties === void 0) {\n    if (object2.required.length > 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Required fields defined but no properties defined`\n      });\n    }\n    return;\n  }\n  for (const field of object2.required) {\n    if (object2.properties[field] === void 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Required field \"${field}\" not defined`\n      });\n    }\n  }\n}\nvar refsContainType = (refs, type) => {\n  const lexUri = toLexUri(type);\n  if (refs.includes(lexUri)) {\n    return true;\n  }\n  if (lexUri.endsWith(\"#main\")) {\n    return refs.includes(lexUri.replace(\"#main\", \"\"));\n  } else {\n    return refs.includes(lexUri + \"#main\");\n  }\n};\n\n// ../lexicon/src/types.ts\nvar lexBoolean = z.object({\n  type: z.literal(\"boolean\"),\n  description: z.string().optional(),\n  default: z.boolean().optional(),\n  const: z.boolean().optional()\n}).strict();\nvar lexInteger = z.object({\n  type: z.literal(\"integer\"),\n  description: z.string().optional(),\n  default: z.number().int().optional(),\n  minimum: z.number().int().optional(),\n  maximum: z.number().int().optional(),\n  enum: z.number().int().array().optional(),\n  const: z.number().int().optional()\n}).strict();\nvar lexStringFormat = z.enum([\n  \"datetime\",\n  \"uri\",\n  \"at-uri\",\n  \"did\",\n  \"handle\",\n  \"at-identifier\",\n  \"nsid\",\n  \"cid\",\n  \"language\"\n]);\nvar lexString = z.object({\n  type: z.literal(\"string\"),\n  format: lexStringFormat.optional(),\n  description: z.string().optional(),\n  default: z.string().optional(),\n  minLength: z.number().int().optional(),\n  maxLength: z.number().int().optional(),\n  minGraphemes: z.number().int().optional(),\n  maxGraphemes: z.number().int().optional(),\n  enum: z.string().array().optional(),\n  const: z.string().optional(),\n  knownValues: z.string().array().optional()\n}).strict();\nvar lexUnknown = z.object({\n  type: z.literal(\"unknown\"),\n  description: z.string().optional()\n}).strict();\nvar lexPrimitive = z.discriminatedUnion(\"type\", [\n  lexBoolean,\n  lexInteger,\n  lexString,\n  lexUnknown\n]);\nvar lexBytes = z.object({\n  type: z.literal(\"bytes\"),\n  description: z.string().optional(),\n  maxLength: z.number().optional(),\n  minLength: z.number().optional()\n}).strict();\nvar lexCidLink = z.object({\n  type: z.literal(\"cid-link\"),\n  description: z.string().optional()\n}).strict();\nvar lexIpldType = z.discriminatedUnion(\"type\", [lexBytes, lexCidLink]);\nvar lexRef = z.object({\n  type: z.literal(\"ref\"),\n  description: z.string().optional(),\n  ref: z.string()\n}).strict();\nvar lexRefUnion = z.object({\n  type: z.literal(\"union\"),\n  description: z.string().optional(),\n  refs: z.string().array(),\n  closed: z.boolean().optional()\n}).strict();\nvar lexRefVariant = z.discriminatedUnion(\"type\", [lexRef, lexRefUnion]);\nvar lexBlob = z.object({\n  type: z.literal(\"blob\"),\n  description: z.string().optional(),\n  accept: z.string().array().optional(),\n  maxSize: z.number().optional()\n}).strict();\nvar lexArray = z.object({\n  type: z.literal(\"array\"),\n  description: z.string().optional(),\n  items: z.union([lexPrimitive, lexIpldType, lexBlob, lexRefVariant]),\n  minLength: z.number().int().optional(),\n  maxLength: z.number().int().optional()\n}).strict();\nvar lexPrimitiveArray = lexArray.merge(\n  z.object({\n    items: lexPrimitive\n  }).strict()\n);\nvar lexToken = z.object({\n  type: z.literal(\"token\"),\n  description: z.string().optional()\n}).strict();\nvar lexObject = z.object({\n  type: z.literal(\"object\"),\n  description: z.string().optional(),\n  required: z.string().array().optional(),\n  nullable: z.string().array().optional(),\n  properties: z.record(\n    z.union([lexRefVariant, lexIpldType, lexArray, lexBlob, lexPrimitive])\n  ).optional()\n}).strict().superRefine(requiredPropertiesRefinement);\nvar lexXrpcParameters = z.object({\n  type: z.literal(\"params\"),\n  description: z.string().optional(),\n  required: z.string().array().optional(),\n  properties: z.record(z.union([lexPrimitive, lexPrimitiveArray]))\n}).strict().superRefine(requiredPropertiesRefinement);\nvar lexXrpcBody = z.object({\n  description: z.string().optional(),\n  encoding: z.string(),\n  schema: z.union([lexRefVariant, lexObject]).optional()\n}).strict();\nvar lexXrpcSubscriptionMessage = z.object({\n  description: z.string().optional(),\n  schema: z.union([lexRefVariant, lexObject]).optional()\n}).strict();\nvar lexXrpcError = z.object({\n  name: z.string(),\n  description: z.string().optional()\n}).strict();\nvar lexXrpcQuery = z.object({\n  type: z.literal(\"query\"),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  output: lexXrpcBody.optional(),\n  errors: lexXrpcError.array().optional()\n}).strict();\nvar lexXrpcProcedure = z.object({\n  type: z.literal(\"procedure\"),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  input: lexXrpcBody.optional(),\n  output: lexXrpcBody.optional(),\n  errors: lexXrpcError.array().optional()\n}).strict();\nvar lexXrpcSubscription = z.object({\n  type: z.literal(\"subscription\"),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  message: lexXrpcSubscriptionMessage.optional(),\n  errors: lexXrpcError.array().optional()\n}).strict();\nvar lexRecord = z.object({\n  type: z.literal(\"record\"),\n  description: z.string().optional(),\n  key: z.string().optional(),\n  record: lexObject\n}).strict();\nvar lexUserType = z.custom(\n  (val) => {\n    if (!val || typeof val !== \"object\") {\n      return;\n    }\n    if (val[\"type\"] === void 0) {\n      return;\n    }\n    switch (val[\"type\"]) {\n      case \"record\":\n        return lexRecord.parse(val);\n      case \"query\":\n        return lexXrpcQuery.parse(val);\n      case \"procedure\":\n        return lexXrpcProcedure.parse(val);\n      case \"subscription\":\n        return lexXrpcSubscription.parse(val);\n      case \"blob\":\n        return lexBlob.parse(val);\n      case \"array\":\n        return lexArray.parse(val);\n      case \"token\":\n        return lexToken.parse(val);\n      case \"object\":\n        return lexObject.parse(val);\n      case \"boolean\":\n        return lexBoolean.parse(val);\n      case \"integer\":\n        return lexInteger.parse(val);\n      case \"string\":\n        return lexString.parse(val);\n      case \"bytes\":\n        return lexBytes.parse(val);\n      case \"cid-link\":\n        return lexCidLink.parse(val);\n      case \"unknown\":\n        return lexUnknown.parse(val);\n    }\n  },\n  (val) => {\n    if (!val || typeof val !== \"object\") {\n      return {\n        message: \"Must be an object\",\n        fatal: true\n      };\n    }\n    if (val[\"type\"] === void 0) {\n      return {\n        message: \"Must have a type\",\n        fatal: true\n      };\n    }\n    return {\n      message: `Invalid type: ${val[\"type\"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,\n      fatal: true\n    };\n  }\n);\nvar lexiconDoc = z.object({\n  lexicon: z.literal(1),\n  id: z.string().refine((v) => NSID.isValid(v), {\n    message: \"Must be a valid NSID\"\n  }),\n  revision: z.number().optional(),\n  description: z.string().optional(),\n  defs: z.record(lexUserType)\n}).strict().superRefine((doc, ctx) => {\n  for (const defId in doc.defs) {\n    const def2 = doc.defs[defId];\n    if (defId !== \"main\" && (def2.type === \"record\" || def2.type === \"procedure\" || def2.type === \"query\" || def2.type === \"subscription\")) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Records, procedures, queries, and subscriptions must be the main definition.`\n      });\n    }\n  }\n});\nfunction isObj(obj) {\n  return obj !== null && typeof obj === \"object\";\n}\nfunction hasProp(data, prop) {\n  return prop in data;\n}\nvar discriminatedObject = z.object({ $type: z.string() });\nfunction isDiscriminatedObject(value) {\n  return discriminatedObject.safeParse(value).success;\n}\nvar LexiconDocMalformedError = class extends Error {\n  constructor(message, schemaDef, issues) {\n    super(message);\n    this.schemaDef = schemaDef;\n    this.issues = issues;\n    this.schemaDef = schemaDef;\n    this.issues = issues;\n  }\n};\nvar ValidationError = class extends Error {\n};\nvar InvalidLexiconError = class extends Error {\n};\nvar LexiconDefNotFoundError = class extends Error {\n};\n\n// ../lexicon/src/validators/xrpc.ts\nfunction params(lexicons2, path, def2, val) {\n  const value = val && typeof val === \"object\" ? val : {};\n  const requiredProps = new Set(def2.required ?? []);\n  let resultValue = value;\n  if (typeof def2.properties === \"object\") {\n    for (const key in def2.properties) {\n      const propDef = def2.properties[key];\n      const validated = propDef.type === \"array\" ? array(lexicons2, key, propDef, value[key]) : validate(lexicons2, key, propDef, value[key]);\n      const propValue = validated.success ? validated.value : value[key];\n      const propIsUndefined = typeof propValue === \"undefined\";\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`)\n        };\n      } else if (!propIsUndefined && !validated.success) {\n        return validated;\n      }\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          resultValue = { ...value };\n        }\n        resultValue[key] = propValue;\n      }\n    }\n  }\n  return { success: true, value: resultValue };\n}\n\n// ../lexicon/src/validation.ts\nfunction assertValidRecord(lexicons2, def2, value) {\n  const res = object(lexicons2, \"Record\", def2.record, value);\n  if (!res.success)\n    throw res.error;\n  return res.value;\n}\nfunction assertValidXrpcParams(lexicons2, def2, value) {\n  if (def2.parameters) {\n    const res = params(lexicons2, \"Params\", def2.parameters, value);\n    if (!res.success)\n      throw res.error;\n    return res.value;\n  }\n}\nfunction assertValidXrpcInput(lexicons2, def2, value) {\n  if (def2.input?.schema) {\n    return assertValidOneOf(lexicons2, \"Input\", def2.input.schema, value, true);\n  }\n}\nfunction assertValidXrpcOutput(lexicons2, def2, value) {\n  if (def2.output?.schema) {\n    return assertValidOneOf(lexicons2, \"Output\", def2.output.schema, value, true);\n  }\n}\nfunction assertValidXrpcMessage(lexicons2, def2, value) {\n  if (def2.message?.schema) {\n    return assertValidOneOf(\n      lexicons2,\n      \"Message\",\n      def2.message.schema,\n      value,\n      true\n    );\n  }\n}\n\n// ../lexicon/src/lexicons.ts\nvar Lexicons = class {\n  constructor(docs) {\n    this.docs = /* @__PURE__ */ new Map();\n    this.defs = /* @__PURE__ */ new Map();\n    if (docs?.length) {\n      for (const doc of docs) {\n        this.add(doc);\n      }\n    }\n  }\n  add(doc) {\n    try {\n      lexiconDoc.parse(doc);\n    } catch (e) {\n      if (e instanceof ZodError) {\n        throw new LexiconDocMalformedError(\n          `Failed to parse schema definition ${doc.id}`,\n          doc,\n          e.issues\n        );\n      } else {\n        throw e;\n      }\n    }\n    const validatedDoc = doc;\n    const uri2 = toLexUri(validatedDoc.id);\n    if (this.docs.has(uri2)) {\n      throw new Error(`${uri2} has already been registered`);\n    }\n    resolveRefUris(validatedDoc, uri2);\n    this.docs.set(uri2, validatedDoc);\n    for (const [defUri, def2] of iterDefs(validatedDoc)) {\n      this.defs.set(defUri, def2);\n    }\n  }\n  remove(uri2) {\n    uri2 = toLexUri(uri2);\n    const doc = this.docs.get(uri2);\n    if (!doc) {\n      throw new Error(`Unable to remove \"${uri2}\": does not exist`);\n    }\n    for (const [defUri, _def] of iterDefs(doc)) {\n      this.defs.delete(defUri);\n    }\n    this.docs.delete(uri2);\n  }\n  get(uri2) {\n    uri2 = toLexUri(uri2);\n    return this.docs.get(uri2);\n  }\n  getDef(uri2) {\n    uri2 = toLexUri(uri2);\n    return this.defs.get(uri2);\n  }\n  getDefOrThrow(uri2, types) {\n    const def2 = this.getDef(uri2);\n    if (!def2) {\n      throw new LexiconDefNotFoundError(`Lexicon not found: ${uri2}`);\n    }\n    if (types && !types.includes(def2.type)) {\n      throw new InvalidLexiconError(\n        `Not a ${types.join(\" or \")} lexicon: ${uri2}`\n      );\n    }\n    return def2;\n  }\n  validate(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"record\", \"object\"]);\n    if (!isObj(value)) {\n      throw new ValidationError(`Value must be an object`);\n    }\n    if (def2.type === \"record\") {\n      return object(this, \"Record\", def2.record, value);\n    } else if (def2.type === \"object\") {\n      return object(this, \"Object\", def2, value);\n    } else {\n      throw new InvalidLexiconError(\"Definition must be a record or object\");\n    }\n  }\n  assertValidRecord(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"record\"]);\n    if (!isObj(value)) {\n      throw new ValidationError(`Record must be an object`);\n    }\n    if (!hasProp(value, \"$type\") || typeof value.$type !== \"string\") {\n      throw new ValidationError(`Record/$type must be a string`);\n    }\n    const $type = value.$type || \"\";\n    if (toLexUri($type) !== lexUri) {\n      throw new ValidationError(\n        `Invalid $type: must be ${lexUri}, got ${$type}`\n      );\n    }\n    return assertValidRecord(this, def2, value);\n  }\n  assertValidXrpcParams(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\n      \"query\",\n      \"procedure\",\n      \"subscription\"\n    ]);\n    return assertValidXrpcParams(\n      this,\n      def2,\n      value\n    );\n  }\n  assertValidXrpcInput(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"procedure\"]);\n    return assertValidXrpcInput(this, def2, value);\n  }\n  assertValidXrpcOutput(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"query\", \"procedure\"]);\n    return assertValidXrpcOutput(\n      this,\n      def2,\n      value\n    );\n  }\n  assertValidXrpcMessage(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"subscription\"]);\n    return assertValidXrpcMessage(this, def2, value);\n  }\n  resolveLexUri(lexUri, ref) {\n    lexUri = toLexUri(lexUri);\n    return toLexUri(ref, lexUri);\n  }\n};\nfunction* iterDefs(doc) {\n  for (const defId in doc.defs) {\n    yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];\n    if (defId === \"main\") {\n      yield [`lex:${doc.id}`, doc.defs[defId]];\n    }\n  }\n}\nfunction resolveRefUris(obj, baseUri) {\n  for (const k in obj) {\n    if (obj.type === \"ref\") {\n      obj.ref = toLexUri(obj.ref, baseUri);\n    } else if (obj.type === \"union\") {\n      obj.refs = obj.refs.map((ref) => toLexUri(ref, baseUri));\n    } else if (Array.isArray(obj[k])) {\n      obj[k] = obj[k].map((item) => {\n        if (typeof item === \"string\") {\n          return item.startsWith(\"#\") ? toLexUri(item, baseUri) : item;\n        } else if (item && typeof item === \"object\") {\n          return resolveRefUris(item, baseUri);\n        }\n        return item;\n      });\n    } else if (obj[k] && typeof obj[k] === \"object\") {\n      obj[k] = resolveRefUris(obj[k], baseUri);\n    }\n  }\n  return obj;\n}\n\n// ../lexicon/src/serialize.ts\nvar lexToIpld = (val) => {\n  if (Array.isArray(val)) {\n    return val.map((item) => lexToIpld(item));\n  }\n  if (val && typeof val === \"object\") {\n    if (val instanceof BlobRef) {\n      return val.original;\n    }\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val;\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = lexToIpld(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\nvar ipldToLex = (val) => {\n  if (Array.isArray(val)) {\n    return val.map((item) => ipldToLex(item));\n  }\n  if (val && typeof val === \"object\") {\n    if ((val[\"$type\"] === \"blob\" || typeof val[\"cid\"] === \"string\" && typeof val[\"mimeType\"] === \"string\") && check_exports.is(val, jsonBlobRef)) {\n      return BlobRef.fromJsonRef(val);\n    }\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val;\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToLex(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\nvar lexToJson = (val) => {\n  return ipldToJson(lexToIpld(val));\n};\nvar stringifyLex = (val) => {\n  return JSON.stringify(lexToJson(val));\n};\nvar jsonToLex = (val) => {\n  return ipldToLex(jsonToIpld(val));\n};\nvar jsonStringToLex = (val) => {\n  return jsonToLex(JSON.parse(val));\n};\n\n// ../xrpc/src/types.ts\nvar errorResponseBody = z.object({\n  error: z.string().optional(),\n  message: z.string().optional()\n});\nvar ResponseType = /* @__PURE__ */ ((ResponseType2) => {\n  ResponseType2[ResponseType2[\"Unknown\"] = 1] = \"Unknown\";\n  ResponseType2[ResponseType2[\"InvalidResponse\"] = 2] = \"InvalidResponse\";\n  ResponseType2[ResponseType2[\"Success\"] = 200] = \"Success\";\n  ResponseType2[ResponseType2[\"InvalidRequest\"] = 400] = \"InvalidRequest\";\n  ResponseType2[ResponseType2[\"AuthRequired\"] = 401] = \"AuthRequired\";\n  ResponseType2[ResponseType2[\"Forbidden\"] = 403] = \"Forbidden\";\n  ResponseType2[ResponseType2[\"XRPCNotSupported\"] = 404] = \"XRPCNotSupported\";\n  ResponseType2[ResponseType2[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\n  ResponseType2[ResponseType2[\"RateLimitExceeded\"] = 429] = \"RateLimitExceeded\";\n  ResponseType2[ResponseType2[\"InternalServerError\"] = 500] = \"InternalServerError\";\n  ResponseType2[ResponseType2[\"MethodNotImplemented\"] = 501] = \"MethodNotImplemented\";\n  ResponseType2[ResponseType2[\"UpstreamFailure\"] = 502] = \"UpstreamFailure\";\n  ResponseType2[ResponseType2[\"NotEnoughResources\"] = 503] = \"NotEnoughResources\";\n  ResponseType2[ResponseType2[\"UpstreamTimeout\"] = 504] = \"UpstreamTimeout\";\n  return ResponseType2;\n})(ResponseType || {});\nvar ResponseTypeNames = {\n  [2 /* InvalidResponse */]: \"InvalidResponse\",\n  [200 /* Success */]: \"Success\",\n  [400 /* InvalidRequest */]: \"InvalidRequest\",\n  [401 /* AuthRequired */]: \"AuthenticationRequired\",\n  [403 /* Forbidden */]: \"Forbidden\",\n  [404 /* XRPCNotSupported */]: \"XRPCNotSupported\",\n  [413 /* PayloadTooLarge */]: \"PayloadTooLarge\",\n  [429 /* RateLimitExceeded */]: \"RateLimitExceeded\",\n  [500 /* InternalServerError */]: \"InternalServerError\",\n  [501 /* MethodNotImplemented */]: \"MethodNotImplemented\",\n  [502 /* UpstreamFailure */]: \"UpstreamFailure\",\n  [503 /* NotEnoughResources */]: \"NotEnoughResources\",\n  [504 /* UpstreamTimeout */]: \"UpstreamTimeout\"\n};\nvar ResponseTypeStrings = {\n  [2 /* InvalidResponse */]: \"Invalid Response\",\n  [200 /* Success */]: \"Success\",\n  [400 /* InvalidRequest */]: \"Invalid Request\",\n  [401 /* AuthRequired */]: \"Authentication Required\",\n  [403 /* Forbidden */]: \"Forbidden\",\n  [404 /* XRPCNotSupported */]: \"XRPC Not Supported\",\n  [413 /* PayloadTooLarge */]: \"Payload Too Large\",\n  [429 /* RateLimitExceeded */]: \"Rate Limit Exceeded\",\n  [500 /* InternalServerError */]: \"Internal Server Error\",\n  [501 /* MethodNotImplemented */]: \"Method Not Implemented\",\n  [502 /* UpstreamFailure */]: \"Upstream Failure\",\n  [503 /* NotEnoughResources */]: \"Not Enough Resources\",\n  [504 /* UpstreamTimeout */]: \"Upstream Timeout\"\n};\nvar XRPCResponse = class {\n  constructor(data, headers) {\n    this.data = data;\n    this.headers = headers;\n    this.success = true;\n  }\n};\nvar XRPCError = class extends Error {\n  constructor(status, error, message) {\n    super(message || error || ResponseTypeStrings[status]);\n    this.status = status;\n    this.error = error;\n    this.success = false;\n    if (!this.error) {\n      this.error = ResponseTypeNames[status];\n    }\n  }\n};\nvar XRPCInvalidResponseError = class extends XRPCError {\n  constructor(lexiconNsid, validationError, responseBody) {\n    super(\n      2 /* InvalidResponse */,\n      ResponseTypeStrings[2 /* InvalidResponse */],\n      `The server gave an invalid response and may be out of date.`\n    );\n    this.lexiconNsid = lexiconNsid;\n    this.validationError = validationError;\n    this.responseBody = responseBody;\n  }\n};\n\n// ../xrpc/src/util.ts\nfunction getMethodSchemaHTTPMethod(schema2) {\n  if (schema2.type === \"procedure\") {\n    return \"post\";\n  }\n  return \"get\";\n}\nfunction constructMethodCallUri(nsid2, schema2, serviceUri, params2) {\n  const uri2 = new URL(serviceUri);\n  uri2.pathname = `/xrpc/${nsid2}`;\n  if (params2) {\n    for (const [key, value] of Object.entries(params2)) {\n      const paramSchema = schema2.parameters?.properties?.[key];\n      if (!paramSchema) {\n        throw new Error(`Invalid query parameter: ${key}`);\n      }\n      if (value !== void 0) {\n        if (paramSchema.type === \"array\") {\n          const vals = [];\n          vals.concat(value).forEach((val) => {\n            uri2.searchParams.append(\n              key,\n              encodeQueryParam(paramSchema.items.type, val)\n            );\n          });\n        } else {\n          uri2.searchParams.set(key, encodeQueryParam(paramSchema.type, value));\n        }\n      }\n    }\n  }\n  return uri2.toString();\n}\nfunction encodeQueryParam(type, value) {\n  if (type === \"string\" || type === \"unknown\") {\n    return String(value);\n  }\n  if (type === \"float\") {\n    return String(Number(value));\n  } else if (type === \"integer\") {\n    return String(Number(value) | 0);\n  } else if (type === \"boolean\") {\n    return value ? \"true\" : \"false\";\n  } else if (type === \"datetime\") {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    return String(value);\n  }\n  throw new Error(`Unsupported query param type: ${type}`);\n}\nfunction normalizeHeaders(headers) {\n  const normalized = {};\n  for (const [header, value] of Object.entries(headers)) {\n    normalized[header.toLowerCase()] = value;\n  }\n  return normalized;\n}\nfunction constructMethodCallHeaders(schema2, data, opts) {\n  const headers = opts?.headers || {};\n  if (schema2.type === \"procedure\") {\n    if (opts?.encoding) {\n      headers[\"Content-Type\"] = opts.encoding;\n    }\n    if (data && typeof data === \"object\") {\n      if (!headers[\"Content-Type\"]) {\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n    }\n  }\n  return headers;\n}\nfunction encodeMethodCallBody(headers, data) {\n  if (!headers[\"content-type\"] || typeof data === \"undefined\") {\n    return void 0;\n  }\n  if (data instanceof ArrayBuffer) {\n    return data;\n  }\n  if (headers[\"content-type\"].startsWith(\"text/\")) {\n    return new TextEncoder().encode(data.toString());\n  }\n  if (headers[\"content-type\"].startsWith(\"application/json\")) {\n    return new TextEncoder().encode(stringifyLex(data));\n  }\n  return data;\n}\nfunction httpResponseCodeToEnum(status) {\n  let resCode;\n  if (status in ResponseType) {\n    resCode = status;\n  } else if (status >= 100 && status < 200) {\n    resCode = 404 /* XRPCNotSupported */;\n  } else if (status >= 200 && status < 300) {\n    resCode = 200 /* Success */;\n  } else if (status >= 300 && status < 400) {\n    resCode = 404 /* XRPCNotSupported */;\n  } else if (status >= 400 && status < 500) {\n    resCode = 400 /* InvalidRequest */;\n  } else {\n    resCode = 500 /* InternalServerError */;\n  }\n  return resCode;\n}\nfunction httpResponseBodyParse(mimeType, data) {\n  if (mimeType) {\n    if (mimeType.includes(\"application/json\") && data?.byteLength) {\n      try {\n        const str = new TextDecoder().decode(data);\n        return jsonStringToLex(str);\n      } catch (e) {\n        throw new XRPCError(\n          2 /* InvalidResponse */,\n          `Failed to parse response body: ${String(e)}`\n        );\n      }\n    }\n    if (mimeType.startsWith(\"text/\") && data?.byteLength) {\n      try {\n        return new TextDecoder().decode(data);\n      } catch (e) {\n        throw new XRPCError(\n          2 /* InvalidResponse */,\n          `Failed to parse response body: ${String(e)}`\n        );\n      }\n    }\n  }\n  if (data instanceof ArrayBuffer) {\n    return new Uint8Array(data);\n  }\n  return data;\n}\n\n// ../xrpc/src/client.ts\nvar Client = class {\n  constructor() {\n    this.fetch = defaultFetchHandler;\n    this.lex = new Lexicons();\n  }\n  async call(serviceUri, methodNsid, params2, data, opts) {\n    return this.service(serviceUri).call(methodNsid, params2, data, opts);\n  }\n  service(serviceUri) {\n    return new ServiceClient(this, serviceUri);\n  }\n  addLexicon(doc) {\n    this.lex.add(doc);\n  }\n  addLexicons(docs) {\n    for (const doc of docs) {\n      this.addLexicon(doc);\n    }\n  }\n  removeLexicon(uri2) {\n    this.lex.remove(uri2);\n  }\n};\nvar ServiceClient = class {\n  constructor(baseClient, serviceUri) {\n    this.headers = {};\n    this.baseClient = baseClient;\n    this.uri = typeof serviceUri === \"string\" ? new URL(serviceUri) : serviceUri;\n  }\n  setHeader(key, value) {\n    this.headers[key] = value;\n  }\n  unsetHeader(key) {\n    delete this.headers[key];\n  }\n  async call(methodNsid, params2, data, opts) {\n    const def2 = this.baseClient.lex.getDefOrThrow(methodNsid);\n    if (!def2 || def2.type !== \"query\" && def2.type !== \"procedure\") {\n      throw new Error(\n        `Invalid lexicon: ${methodNsid}. Must be a query or procedure.`\n      );\n    }\n    const httpMethod = getMethodSchemaHTTPMethod(def2);\n    const httpUri = constructMethodCallUri(methodNsid, def2, this.uri, params2);\n    const httpHeaders = constructMethodCallHeaders(def2, data, {\n      headers: {\n        ...this.headers,\n        ...opts?.headers\n      },\n      encoding: opts?.encoding\n    });\n    const res = await this.baseClient.fetch(\n      httpUri,\n      httpMethod,\n      httpHeaders,\n      data\n    );\n    const resCode = httpResponseCodeToEnum(res.status);\n    if (resCode === 200 /* Success */) {\n      try {\n        this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          throw new XRPCInvalidResponseError(methodNsid, e, res.body);\n        } else {\n          throw e;\n        }\n      }\n      return new XRPCResponse(res.body, res.headers);\n    } else {\n      if (res.body && isErrorResponseBody(res.body)) {\n        throw new XRPCError(resCode, res.body.error, res.body.message);\n      } else {\n        throw new XRPCError(resCode);\n      }\n    }\n  }\n};\nasync function defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody) {\n  try {\n    const headers = normalizeHeaders(httpHeaders);\n    const reqInit = {\n      method: httpMethod,\n      headers,\n      body: encodeMethodCallBody(headers, httpReqBody),\n      duplex: \"half\"\n    };\n    const res = await fetch(httpUri, reqInit);\n    const resBody = await res.arrayBuffer();\n    return {\n      status: res.status,\n      headers: Object.fromEntries(res.headers.entries()),\n      body: httpResponseBodyParse(res.headers.get(\"content-type\"), resBody)\n    };\n  } catch (e) {\n    throw new XRPCError(1 /* Unknown */, String(e));\n  }\n}\nfunction isErrorResponseBody(v) {\n  return errorResponseBody.safeParse(v).success;\n}\n\n// ../xrpc/src/index.ts\nvar defaultInst = new Client();\n\n// src/client/lexicons.ts\nvar schemaDict = {\n  ComAtprotoAdminDefs: {\n    lexicon: 1,\n    id: \"com.atproto.admin.defs\",\n    defs: {\n      actionView: {\n        type: \"object\",\n        required: [\n          \"id\",\n          \"action\",\n          \"subject\",\n          \"subjectBlobCids\",\n          \"reason\",\n          \"createdBy\",\n          \"createdAt\",\n          \"resolvedReportIds\"\n        ],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          action: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionType\"\n          },\n          subject: {\n            type: \"union\",\n            refs: [\n              \"lex:com.atproto.admin.defs#repoRef\",\n              \"lex:com.atproto.repo.strongRef\"\n            ]\n          },\n          subjectBlobCids: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          },\n          createLabelVals: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          },\n          negateLabelVals: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          },\n          reason: {\n            type: \"string\"\n          },\n          createdBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          reversal: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionReversal\"\n          },\n          resolvedReportIds: {\n            type: \"array\",\n            items: {\n              type: \"integer\"\n            }\n          }\n        }\n      },\n      actionViewDetail: {\n        type: \"object\",\n        required: [\n          \"id\",\n          \"action\",\n          \"subject\",\n          \"subjectBlobs\",\n          \"reason\",\n          \"createdBy\",\n          \"createdAt\",\n          \"resolvedReports\"\n        ],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          action: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionType\"\n          },\n          subject: {\n            type: \"union\",\n            refs: [\n              \"lex:com.atproto.admin.defs#repoView\",\n              \"lex:com.atproto.admin.defs#repoViewNotFound\",\n              \"lex:com.atproto.admin.defs#recordView\",\n              \"lex:com.atproto.admin.defs#recordViewNotFound\"\n            ]\n          },\n          subjectBlobs: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#blobView\"\n            }\n          },\n          createLabelVals: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          },\n          negateLabelVals: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          },\n          reason: {\n            type: \"string\"\n          },\n          createdBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          reversal: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionReversal\"\n          },\n          resolvedReports: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#reportView\"\n            }\n          }\n        }\n      },\n      actionViewCurrent: {\n        type: \"object\",\n        required: [\"id\", \"action\"],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          action: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionType\"\n          }\n        }\n      },\n      actionReversal: {\n        type: \"object\",\n        required: [\"reason\", \"createdBy\", \"createdAt\"],\n        properties: {\n          reason: {\n            type: \"string\"\n          },\n          createdBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      actionType: {\n        type: \"string\",\n        knownValues: [\n          \"lex:com.atproto.admin.defs#takedown\",\n          \"lex:com.atproto.admin.defs#flag\",\n          \"lex:com.atproto.admin.defs#acknowledge\",\n          \"lex:com.atproto.admin.defs#escalate\"\n        ]\n      },\n      takedown: {\n        type: \"token\",\n        description: \"Moderation action type: Takedown. Indicates that content should not be served by the PDS.\"\n      },\n      flag: {\n        type: \"token\",\n        description: \"Moderation action type: Flag. Indicates that the content was reviewed and considered to violate PDS rules, but may still be served.\"\n      },\n      acknowledge: {\n        type: \"token\",\n        description: \"Moderation action type: Acknowledge. Indicates that the content was reviewed and not considered to violate PDS rules.\"\n      },\n      escalate: {\n        type: \"token\",\n        description: \"Moderation action type: Escalate. Indicates that the content has been flagged for additional review.\"\n      },\n      reportView: {\n        type: \"object\",\n        required: [\n          \"id\",\n          \"reasonType\",\n          \"subject\",\n          \"reportedBy\",\n          \"createdAt\",\n          \"resolvedByActionIds\"\n        ],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          reasonType: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.moderation.defs#reasonType\"\n          },\n          reason: {\n            type: \"string\"\n          },\n          subjectRepoHandle: {\n            type: \"string\"\n          },\n          subject: {\n            type: \"union\",\n            refs: [\n              \"lex:com.atproto.admin.defs#repoRef\",\n              \"lex:com.atproto.repo.strongRef\"\n            ]\n          },\n          reportedBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          resolvedByActionIds: {\n            type: \"array\",\n            items: {\n              type: \"integer\"\n            }\n          }\n        }\n      },\n      reportViewDetail: {\n        type: \"object\",\n        required: [\n          \"id\",\n          \"reasonType\",\n          \"subject\",\n          \"reportedBy\",\n          \"createdAt\",\n          \"resolvedByActions\"\n        ],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          reasonType: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.moderation.defs#reasonType\"\n          },\n          reason: {\n            type: \"string\"\n          },\n          subject: {\n            type: \"union\",\n            refs: [\n              \"lex:com.atproto.admin.defs#repoView\",\n              \"lex:com.atproto.admin.defs#repoViewNotFound\",\n              \"lex:com.atproto.admin.defs#recordView\",\n              \"lex:com.atproto.admin.defs#recordViewNotFound\"\n            ]\n          },\n          reportedBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          resolvedByActions: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#actionView\"\n            }\n          }\n        }\n      },\n      repoView: {\n        type: \"object\",\n        required: [\n          \"did\",\n          \"handle\",\n          \"relatedRecords\",\n          \"indexedAt\",\n          \"moderation\"\n        ],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          email: {\n            type: \"string\"\n          },\n          relatedRecords: {\n            type: \"array\",\n            items: {\n              type: \"unknown\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderation\"\n          },\n          invitedBy: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.server.defs#inviteCode\"\n          },\n          invitesDisabled: {\n            type: \"boolean\"\n          },\n          inviteNote: {\n            type: \"string\"\n          }\n        }\n      },\n      repoViewDetail: {\n        type: \"object\",\n        required: [\n          \"did\",\n          \"handle\",\n          \"relatedRecords\",\n          \"indexedAt\",\n          \"moderation\"\n        ],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          email: {\n            type: \"string\"\n          },\n          relatedRecords: {\n            type: \"array\",\n            items: {\n              type: \"unknown\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderationDetail\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          },\n          invitedBy: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.server.defs#inviteCode\"\n          },\n          invites: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.server.defs#inviteCode\"\n            }\n          },\n          invitesDisabled: {\n            type: \"boolean\"\n          },\n          inviteNote: {\n            type: \"string\"\n          }\n        }\n      },\n      repoViewNotFound: {\n        type: \"object\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          }\n        }\n      },\n      repoRef: {\n        type: \"object\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          }\n        }\n      },\n      recordView: {\n        type: \"object\",\n        required: [\n          \"uri\",\n          \"cid\",\n          \"value\",\n          \"blobCids\",\n          \"indexedAt\",\n          \"moderation\",\n          \"repo\"\n        ],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          value: {\n            type: \"unknown\"\n          },\n          blobCids: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"cid\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderation\"\n          },\n          repo: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#repoView\"\n          }\n        }\n      },\n      recordViewDetail: {\n        type: \"object\",\n        required: [\n          \"uri\",\n          \"cid\",\n          \"value\",\n          \"blobs\",\n          \"indexedAt\",\n          \"moderation\",\n          \"repo\"\n        ],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          value: {\n            type: \"unknown\"\n          },\n          blobs: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#blobView\"\n            }\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderationDetail\"\n          },\n          repo: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#repoView\"\n          }\n        }\n      },\n      recordViewNotFound: {\n        type: \"object\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      moderation: {\n        type: \"object\",\n        properties: {\n          currentAction: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionViewCurrent\"\n          }\n        }\n      },\n      moderationDetail: {\n        type: \"object\",\n        required: [\"actions\", \"reports\"],\n        properties: {\n          currentAction: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionViewCurrent\"\n          },\n          actions: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#actionView\"\n            }\n          },\n          reports: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#reportView\"\n            }\n          }\n        }\n      },\n      blobView: {\n        type: \"object\",\n        required: [\"cid\", \"mimeType\", \"size\", \"createdAt\"],\n        properties: {\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          mimeType: {\n            type: \"string\"\n          },\n          size: {\n            type: \"integer\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          details: {\n            type: \"union\",\n            refs: [\n              \"lex:com.atproto.admin.defs#imageDetails\",\n              \"lex:com.atproto.admin.defs#videoDetails\"\n            ]\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderation\"\n          }\n        }\n      },\n      imageDetails: {\n        type: \"object\",\n        required: [\"width\", \"height\"],\n        properties: {\n          width: {\n            type: \"integer\"\n          },\n          height: {\n            type: \"integer\"\n          }\n        }\n      },\n      videoDetails: {\n        type: \"object\",\n        required: [\"width\", \"height\", \"length\"],\n        properties: {\n          width: {\n            type: \"integer\"\n          },\n          height: {\n            type: \"integer\"\n          },\n          length: {\n            type: \"integer\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminDisableAccountInvites: {\n    lexicon: 1,\n    id: \"com.atproto.admin.disableAccountInvites\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Disable an account from receiving new invite codes, but does not invalidate existing codes\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"account\"],\n            properties: {\n              account: {\n                type: \"string\",\n                format: \"did\"\n              },\n              note: {\n                type: \"string\",\n                description: \"Additionally add a note describing why the invites were disabled\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminDisableInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.admin.disableInviteCodes\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Disable some set of codes and/or all codes associated with a set of users\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            properties: {\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              },\n              accounts: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminEnableAccountInvites: {\n    lexicon: 1,\n    id: \"com.atproto.admin.enableAccountInvites\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Re-enable an accounts ability to receive invite codes\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"account\"],\n            properties: {\n              account: {\n                type: \"string\",\n                format: \"did\"\n              },\n              note: {\n                type: \"string\",\n                description: \"Additionally add a note describing why the invites were enabled\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getInviteCodes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Admin view of invite codes\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            sort: {\n              type: \"string\",\n              knownValues: [\"recent\", \"usage\"],\n              default: \"recent\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 500,\n              default: 100\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codes\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.defs#inviteCode\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetModerationAction: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getModerationAction\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"View details about a moderation action.\",\n        parameters: {\n          type: \"params\",\n          required: [\"id\"],\n          properties: {\n            id: {\n              type: \"integer\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionViewDetail\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetModerationActions: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getModerationActions\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List moderation actions related to a subject.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            subject: {\n              type: \"string\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actions\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              actions: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#actionView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetModerationReport: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getModerationReport\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"View details about a moderation report.\",\n        parameters: {\n          type: \"params\",\n          required: [\"id\"],\n          properties: {\n            id: {\n              type: \"integer\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#reportViewDetail\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetModerationReports: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getModerationReports\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List moderation reports related to a subject.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            subject: {\n              type: \"string\"\n            },\n            ignoreSubjects: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              }\n            },\n            actionedBy: {\n              type: \"string\",\n              format: \"did\",\n              description: \"Get all reports that were actioned by a specific moderator\"\n            },\n            reporters: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"Filter reports made by one or more DIDs\"\n            },\n            resolved: {\n              type: \"boolean\"\n            },\n            actionType: {\n              type: \"string\",\n              knownValues: [\n                \"com.atproto.admin.defs#takedown\",\n                \"com.atproto.admin.defs#flag\",\n                \"com.atproto.admin.defs#acknowledge\",\n                \"com.atproto.admin.defs#escalate\"\n              ]\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            },\n            reverse: {\n              type: \"boolean\",\n              description: \"Reverse the order of the returned records? when true, returns reports in chronological order\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"reports\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              reports: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#reportView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetRecord: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getRecord\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"View details about a record.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#recordViewDetail\"\n          }\n        },\n        errors: [\n          {\n            name: \"RecordNotFound\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoAdminGetRepo: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getRepo\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"View details about a repository.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#repoViewDetail\"\n          }\n        },\n        errors: [\n          {\n            name: \"RepoNotFound\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoAdminRebaseRepo: {\n    lexicon: 1,\n    id: \"com.atproto.admin.rebaseRepo\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Administrative action to rebase an account's repo\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by cid.\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"InvalidSwap\"\n          },\n          {\n            name: \"ConcurrentWrites\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoAdminResolveModerationReports: {\n    lexicon: 1,\n    id: \"com.atproto.admin.resolveModerationReports\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Resolve moderation reports by an action.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actionId\", \"reportIds\", \"createdBy\"],\n            properties: {\n              actionId: {\n                type: \"integer\"\n              },\n              reportIds: {\n                type: \"array\",\n                items: {\n                  type: \"integer\"\n                }\n              },\n              createdBy: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionView\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminReverseModerationAction: {\n    lexicon: 1,\n    id: \"com.atproto.admin.reverseModerationAction\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Reverse a moderation action.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"id\", \"reason\", \"createdBy\"],\n            properties: {\n              id: {\n                type: \"integer\"\n              },\n              reason: {\n                type: \"string\"\n              },\n              createdBy: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionView\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminSearchRepos: {\n    lexicon: 1,\n    id: \"com.atproto.admin.searchRepos\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find repositories based on a search term.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            term: {\n              type: \"string\"\n            },\n            invitedBy: {\n              type: \"string\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repos\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              repos: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#repoView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminSendEmail: {\n    lexicon: 1,\n    id: \"com.atproto.admin.sendEmail\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Send email to a user's primary email address\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"recipientDid\", \"content\"],\n            properties: {\n              recipientDid: {\n                type: \"string\",\n                format: \"did\"\n              },\n              content: {\n                type: \"string\"\n              },\n              subject: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"sent\"],\n            properties: {\n              sent: {\n                type: \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminTakeModerationAction: {\n    lexicon: 1,\n    id: \"com.atproto.admin.takeModerationAction\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Take a moderation action on a repo.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"action\", \"subject\", \"reason\", \"createdBy\"],\n            properties: {\n              action: {\n                type: \"string\",\n                knownValues: [\n                  \"com.atproto.admin.defs#takedown\",\n                  \"com.atproto.admin.defs#flag\",\n                  \"com.atproto.admin.defs#acknowledge\"\n                ]\n              },\n              subject: {\n                type: \"union\",\n                refs: [\n                  \"lex:com.atproto.admin.defs#repoRef\",\n                  \"lex:com.atproto.repo.strongRef\"\n                ]\n              },\n              subjectBlobCids: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"cid\"\n                }\n              },\n              createLabelVals: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              },\n              negateLabelVals: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              },\n              reason: {\n                type: \"string\"\n              },\n              createdBy: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#actionView\"\n          }\n        },\n        errors: [\n          {\n            name: \"SubjectHasAction\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoAdminUpdateAccountEmail: {\n    lexicon: 1,\n    id: \"com.atproto.admin.updateAccountEmail\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Administrative action to update an account's email\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"account\", \"email\"],\n            properties: {\n              account: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              email: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminUpdateAccountHandle: {\n    lexicon: 1,\n    id: \"com.atproto.admin.updateAccountHandle\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Administrative action to update an account's handle\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\", \"handle\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoIdentityResolveHandle: {\n    lexicon: 1,\n    id: \"com.atproto.identity.resolveHandle\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Provides the DID of a repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"handle\"],\n          properties: {\n            handle: {\n              type: \"string\",\n              format: \"handle\",\n              description: \"The handle to resolve.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoIdentityUpdateHandle: {\n    lexicon: 1,\n    id: \"com.atproto.identity.updateHandle\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Updates the handle of the account\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\"],\n            properties: {\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoLabelDefs: {\n    lexicon: 1,\n    id: \"com.atproto.label.defs\",\n    defs: {\n      label: {\n        type: \"object\",\n        description: \"Metadata tag on an atproto resource (eg, repo or record)\",\n        required: [\"src\", \"uri\", \"val\", \"cts\"],\n        properties: {\n          src: {\n            type: \"string\",\n            format: \"did\",\n            description: \"DID of the actor who created this label\"\n          },\n          uri: {\n            type: \"string\",\n            format: \"uri\",\n            description: \"AT URI of the record, repository (account), or other resource which this label applies to\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\",\n            description: \"optionally, CID specifying the specific version of 'uri' resource this label applies to\"\n          },\n          val: {\n            type: \"string\",\n            maxLength: 128,\n            description: \"the short string name of the value or type of this label\"\n          },\n          neg: {\n            type: \"boolean\",\n            description: \"if true, this is a negation label, overwriting a previous label\"\n          },\n          cts: {\n            type: \"string\",\n            format: \"datetime\",\n            description: \"timestamp when this label was created\"\n          }\n        }\n      },\n      selfLabels: {\n        type: \"object\",\n        description: \"Metadata tags on an atproto record, published by the author within the record.\",\n        required: [\"values\"],\n        properties: {\n          values: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#selfLabel\"\n            },\n            maxLength: 10\n          }\n        }\n      },\n      selfLabel: {\n        type: \"object\",\n        description: \"Metadata tag on an atproto record, published by the author within the record. Note -- schemas should use #selfLabels, not #selfLabel.\",\n        required: [\"val\"],\n        properties: {\n          val: {\n            type: \"string\",\n            maxLength: 128,\n            description: \"the short string name of the value or type of this label\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoLabelQueryLabels: {\n    lexicon: 1,\n    id: \"com.atproto.label.queryLabels\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find labels relevant to the provided URI patterns.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uriPatterns\"],\n          properties: {\n            uriPatterns: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI\"\n            },\n            sources: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"did\"\n              },\n              description: \"Optional list of label sources (DIDs) to filter on\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 250,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"labels\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              labels: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.label.defs#label\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoLabelSubscribeLabels: {\n    lexicon: 1,\n    id: \"com.atproto.label.subscribeLabels\",\n    defs: {\n      main: {\n        type: \"subscription\",\n        description: \"Subscribe to label updates\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            cursor: {\n              type: \"integer\",\n              description: \"The last known event to backfill from.\"\n            }\n          }\n        },\n        message: {\n          schema: {\n            type: \"union\",\n            refs: [\n              \"lex:com.atproto.label.subscribeLabels#labels\",\n              \"lex:com.atproto.label.subscribeLabels#info\"\n            ]\n          }\n        },\n        errors: [\n          {\n            name: \"FutureCursor\"\n          }\n        ]\n      },\n      labels: {\n        type: \"object\",\n        required: [\"seq\", \"labels\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      info: {\n        type: \"object\",\n        required: [\"name\"],\n        properties: {\n          name: {\n            type: \"string\",\n            knownValues: [\"OutdatedCursor\"]\n          },\n          message: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoModerationCreateReport: {\n    lexicon: 1,\n    id: \"com.atproto.moderation.createReport\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Report a repo or a record.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"reasonType\", \"subject\"],\n            properties: {\n              reasonType: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.moderation.defs#reasonType\"\n              },\n              reason: {\n                type: \"string\"\n              },\n              subject: {\n                type: \"union\",\n                refs: [\n                  \"lex:com.atproto.admin.defs#repoRef\",\n                  \"lex:com.atproto.repo.strongRef\"\n                ]\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\n              \"id\",\n              \"reasonType\",\n              \"subject\",\n              \"reportedBy\",\n              \"createdAt\"\n            ],\n            properties: {\n              id: {\n                type: \"integer\"\n              },\n              reasonType: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.moderation.defs#reasonType\"\n              },\n              reason: {\n                type: \"string\"\n              },\n              subject: {\n                type: \"union\",\n                refs: [\n                  \"lex:com.atproto.admin.defs#repoRef\",\n                  \"lex:com.atproto.repo.strongRef\"\n                ]\n              },\n              reportedBy: {\n                type: \"string\",\n                format: \"did\"\n              },\n              createdAt: {\n                type: \"string\",\n                format: \"datetime\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoModerationDefs: {\n    lexicon: 1,\n    id: \"com.atproto.moderation.defs\",\n    defs: {\n      reasonType: {\n        type: \"string\",\n        knownValues: [\n          \"com.atproto.moderation.defs#reasonSpam\",\n          \"com.atproto.moderation.defs#reasonViolation\",\n          \"com.atproto.moderation.defs#reasonMisleading\",\n          \"com.atproto.moderation.defs#reasonSexual\",\n          \"com.atproto.moderation.defs#reasonRude\",\n          \"com.atproto.moderation.defs#reasonOther\"\n        ]\n      },\n      reasonSpam: {\n        type: \"token\",\n        description: \"Spam: frequent unwanted promotion, replies, mentions\"\n      },\n      reasonViolation: {\n        type: \"token\",\n        description: \"Direct violation of server rules, laws, terms of service\"\n      },\n      reasonMisleading: {\n        type: \"token\",\n        description: \"Misleading identity, affiliation, or content\"\n      },\n      reasonSexual: {\n        type: \"token\",\n        description: \"Unwanted or mislabeled sexual content\"\n      },\n      reasonRude: {\n        type: \"token\",\n        description: \"Rude, harassing, explicit, or otherwise unwelcoming behavior\"\n      },\n      reasonOther: {\n        type: \"token\",\n        description: \"Other: reports not falling under another report category\"\n      }\n    }\n  },\n  ComAtprotoRepoApplyWrites: {\n    lexicon: 1,\n    id: \"com.atproto.repo.applyWrites\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Apply a batch transaction of creates, updates, and deletes.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"writes\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              validate: {\n                type: \"boolean\",\n                default: true,\n                description: \"Validate the records?\"\n              },\n              writes: {\n                type: \"array\",\n                items: {\n                  type: \"union\",\n                  refs: [\n                    \"lex:com.atproto.repo.applyWrites#create\",\n                    \"lex:com.atproto.repo.applyWrites#update\",\n                    \"lex:com.atproto.repo.applyWrites#delete\"\n                  ],\n                  closed: true\n                }\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"InvalidSwap\"\n          }\n        ]\n      },\n      create: {\n        type: \"object\",\n        description: \"Create a new record.\",\n        required: [\"collection\", \"value\"],\n        properties: {\n          collection: {\n            type: \"string\",\n            format: \"nsid\"\n          },\n          rkey: {\n            type: \"string\",\n            maxLength: 15\n          },\n          value: {\n            type: \"unknown\"\n          }\n        }\n      },\n      update: {\n        type: \"object\",\n        description: \"Update an existing record.\",\n        required: [\"collection\", \"rkey\", \"value\"],\n        properties: {\n          collection: {\n            type: \"string\",\n            format: \"nsid\"\n          },\n          rkey: {\n            type: \"string\"\n          },\n          value: {\n            type: \"unknown\"\n          }\n        }\n      },\n      delete: {\n        type: \"object\",\n        description: \"Delete an existing record.\",\n        required: [\"collection\", \"rkey\"],\n        properties: {\n          collection: {\n            type: \"string\",\n            format: \"nsid\"\n          },\n          rkey: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoCreateRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.createRecord\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create a new record.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"collection\", \"record\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              collection: {\n                type: \"string\",\n                format: \"nsid\",\n                description: \"The NSID of the record collection.\"\n              },\n              rkey: {\n                type: \"string\",\n                description: \"The key of the record.\",\n                maxLength: 15\n              },\n              validate: {\n                type: \"boolean\",\n                default: true,\n                description: \"Validate the record?\"\n              },\n              record: {\n                type: \"unknown\",\n                description: \"The record to create.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by cid.\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"cid\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"InvalidSwap\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoRepoDeleteRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.deleteRecord\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete a record, or ensure it doesn't exist.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"collection\", \"rkey\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              collection: {\n                type: \"string\",\n                format: \"nsid\",\n                description: \"The NSID of the record collection.\"\n              },\n              rkey: {\n                type: \"string\",\n                description: \"The key of the record.\"\n              },\n              swapRecord: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous record by cid.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by cid.\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"InvalidSwap\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoRepoDescribeRepo: {\n    lexicon: 1,\n    id: \"com.atproto.repo.describeRepo\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about the repo, including the list of collections.\",\n        parameters: {\n          type: \"params\",\n          required: [\"repo\"],\n          properties: {\n            repo: {\n              type: \"string\",\n              format: \"at-identifier\",\n              description: \"The handle or DID of the repo.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\n              \"handle\",\n              \"did\",\n              \"didDoc\",\n              \"collections\",\n              \"handleIsCorrect\"\n            ],\n            properties: {\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              didDoc: {\n                type: \"unknown\"\n              },\n              collections: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"nsid\"\n                }\n              },\n              handleIsCorrect: {\n                type: \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoGetRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.getRecord\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a record.\",\n        parameters: {\n          type: \"params\",\n          required: [\"repo\", \"collection\", \"rkey\"],\n          properties: {\n            repo: {\n              type: \"string\",\n              format: \"at-identifier\",\n              description: \"The handle or DID of the repo.\"\n            },\n            collection: {\n              type: \"string\",\n              format: \"nsid\",\n              description: \"The NSID of the record collection.\"\n            },\n            rkey: {\n              type: \"string\",\n              description: \"The key of the record.\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The CID of the version of the record. If not specified, then return the most recent version.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"value\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              },\n              value: {\n                type: \"unknown\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoListRecords: {\n    lexicon: 1,\n    id: \"com.atproto.repo.listRecords\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List a range of records in a collection.\",\n        parameters: {\n          type: \"params\",\n          required: [\"repo\", \"collection\"],\n          properties: {\n            repo: {\n              type: \"string\",\n              format: \"at-identifier\",\n              description: \"The handle or DID of the repo.\"\n            },\n            collection: {\n              type: \"string\",\n              format: \"nsid\",\n              description: \"The NSID of the record type.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n              description: \"The number of records to return.\"\n            },\n            cursor: {\n              type: \"string\"\n            },\n            rkeyStart: {\n              type: \"string\",\n              description: \"DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)\"\n            },\n            rkeyEnd: {\n              type: \"string\",\n              description: \"DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)\"\n            },\n            reverse: {\n              type: \"boolean\",\n              description: \"Reverse the order of the returned records?\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"records\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              records: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.repo.listRecords#record\"\n                }\n              }\n            }\n          }\n        }\n      },\n      record: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"value\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          value: {\n            type: \"unknown\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoPutRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.putRecord\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Write a record, creating or updating it as needed.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"collection\", \"rkey\", \"record\"],\n            nullable: [\"swapRecord\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              collection: {\n                type: \"string\",\n                format: \"nsid\",\n                description: \"The NSID of the record collection.\"\n              },\n              rkey: {\n                type: \"string\",\n                description: \"The key of the record.\",\n                maxLength: 15\n              },\n              validate: {\n                type: \"boolean\",\n                default: true,\n                description: \"Validate the record?\"\n              },\n              record: {\n                type: \"unknown\",\n                description: \"The record to write.\"\n              },\n              swapRecord: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous record by cid.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by cid.\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"cid\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"InvalidSwap\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoRepoRebaseRepo: {\n    lexicon: 1,\n    id: \"com.atproto.repo.rebaseRepo\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Simple rebase of repo that deletes history\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by cid.\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"InvalidSwap\"\n          },\n          {\n            name: \"ConcurrentWrites\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoRepoStrongRef: {\n    lexicon: 1,\n    id: \"com.atproto.repo.strongRef\",\n    description: \"A URI with a content-hash fingerprint.\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"uri\", \"cid\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoUploadBlob: {\n    lexicon: 1,\n    id: \"com.atproto.repo.uploadBlob\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Upload a new blob to be added to repo in a later request.\",\n        input: {\n          encoding: \"*/*\"\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"blob\"],\n            properties: {\n              blob: {\n                type: \"blob\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerCreateAccount: {\n    lexicon: 1,\n    id: \"com.atproto.server.createAccount\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an account.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\", \"email\", \"password\"],\n            properties: {\n              email: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              inviteCode: {\n                type: \"string\"\n              },\n              password: {\n                type: \"string\"\n              },\n              recoveryKey: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"accessJwt\", \"refreshJwt\", \"handle\", \"did\"],\n            properties: {\n              accessJwt: {\n                type: \"string\"\n              },\n              refreshJwt: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"InvalidHandle\"\n          },\n          {\n            name: \"InvalidPassword\"\n          },\n          {\n            name: \"InvalidInviteCode\"\n          },\n          {\n            name: \"HandleNotAvailable\"\n          },\n          {\n            name: \"UnsupportedDomain\"\n          },\n          {\n            name: \"UnresolvableDid\"\n          },\n          {\n            name: \"IncompatibleDidDoc\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoServerCreateAppPassword: {\n    lexicon: 1,\n    id: \"com.atproto.server.createAppPassword\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an app-specific password.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"name\"],\n            properties: {\n              name: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.server.createAppPassword#appPassword\"\n          }\n        },\n        errors: [\n          {\n            name: \"AccountTakedown\"\n          }\n        ]\n      },\n      appPassword: {\n        type: \"object\",\n        required: [\"name\", \"password\", \"createdAt\"],\n        properties: {\n          name: {\n            type: \"string\"\n          },\n          password: {\n            type: \"string\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerCreateInviteCode: {\n    lexicon: 1,\n    id: \"com.atproto.server.createInviteCode\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an invite code.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"useCount\"],\n            properties: {\n              useCount: {\n                type: \"integer\"\n              },\n              forAccount: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"code\"],\n            properties: {\n              code: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerCreateInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.server.createInviteCodes\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an invite code.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codeCount\", \"useCount\"],\n            properties: {\n              codeCount: {\n                type: \"integer\",\n                default: 1\n              },\n              useCount: {\n                type: \"integer\"\n              },\n              forAccounts: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"did\"\n                }\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codes\"],\n            properties: {\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.createInviteCodes#accountCodes\"\n                }\n              }\n            }\n          }\n        }\n      },\n      accountCodes: {\n        type: \"object\",\n        required: [\"account\", \"codes\"],\n        properties: {\n          account: {\n            type: \"string\"\n          },\n          codes: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerCreateSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.createSession\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an authentication session.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"identifier\", \"password\"],\n            properties: {\n              identifier: {\n                type: \"string\",\n                description: \"Handle or other identifier supported by the server for the authenticating user.\"\n              },\n              password: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"accessJwt\", \"refreshJwt\", \"handle\", \"did\"],\n            properties: {\n              accessJwt: {\n                type: \"string\"\n              },\n              refreshJwt: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              email: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"AccountTakedown\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoServerDefs: {\n    lexicon: 1,\n    id: \"com.atproto.server.defs\",\n    defs: {\n      inviteCode: {\n        type: \"object\",\n        required: [\n          \"code\",\n          \"available\",\n          \"disabled\",\n          \"forAccount\",\n          \"createdBy\",\n          \"createdAt\",\n          \"uses\"\n        ],\n        properties: {\n          code: {\n            type: \"string\"\n          },\n          available: {\n            type: \"integer\"\n          },\n          disabled: {\n            type: \"boolean\"\n          },\n          forAccount: {\n            type: \"string\"\n          },\n          createdBy: {\n            type: \"string\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          uses: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.server.defs#inviteCodeUse\"\n            }\n          }\n        }\n      },\n      inviteCodeUse: {\n        type: \"object\",\n        required: [\"usedBy\", \"usedAt\"],\n        properties: {\n          usedBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          usedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerDeleteAccount: {\n    lexicon: 1,\n    id: \"com.atproto.server.deleteAccount\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete a user account with a token and password.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\", \"password\", \"token\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              password: {\n                type: \"string\"\n              },\n              token: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"ExpiredToken\"\n          },\n          {\n            name: \"InvalidToken\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoServerDeleteSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.deleteSession\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete the current session.\"\n      }\n    }\n  },\n  ComAtprotoServerDescribeServer: {\n    lexicon: 1,\n    id: \"com.atproto.server.describeServer\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a document describing the service's accounts configuration.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"availableUserDomains\"],\n            properties: {\n              inviteCodeRequired: {\n                type: \"boolean\"\n              },\n              availableUserDomains: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              },\n              links: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.server.describeServer#links\"\n              }\n            }\n          }\n        }\n      },\n      links: {\n        type: \"object\",\n        properties: {\n          privacyPolicy: {\n            type: \"string\"\n          },\n          termsOfService: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerGetAccountInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.server.getAccountInviteCodes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get all invite codes for a given account\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            includeUsed: {\n              type: \"boolean\",\n              default: true\n            },\n            createAvailable: {\n              type: \"boolean\",\n              default: true\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codes\"],\n            properties: {\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.defs#inviteCode\"\n                }\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"DuplicateCreate\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoServerGetSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.getSession\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about the current session.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\", \"did\"],\n            properties: {\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              email: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerListAppPasswords: {\n    lexicon: 1,\n    id: \"com.atproto.server.listAppPasswords\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List all app-specific passwords.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"passwords\"],\n            properties: {\n              passwords: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.listAppPasswords#appPassword\"\n                }\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"AccountTakedown\"\n          }\n        ]\n      },\n      appPassword: {\n        type: \"object\",\n        required: [\"name\", \"createdAt\"],\n        properties: {\n          name: {\n            type: \"string\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerRefreshSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.refreshSession\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Refresh an authentication session.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"accessJwt\", \"refreshJwt\", \"handle\", \"did\"],\n            properties: {\n              accessJwt: {\n                type: \"string\"\n              },\n              refreshJwt: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"AccountTakedown\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoServerRequestAccountDelete: {\n    lexicon: 1,\n    id: \"com.atproto.server.requestAccountDelete\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Initiate a user account deletion via email.\"\n      }\n    }\n  },\n  ComAtprotoServerRequestPasswordReset: {\n    lexicon: 1,\n    id: \"com.atproto.server.requestPasswordReset\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Initiate a user account password reset via email.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"email\"],\n            properties: {\n              email: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerResetPassword: {\n    lexicon: 1,\n    id: \"com.atproto.server.resetPassword\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Reset a user account password using a token.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"token\", \"password\"],\n            properties: {\n              token: {\n                type: \"string\"\n              },\n              password: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"ExpiredToken\"\n          },\n          {\n            name: \"InvalidToken\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoServerRevokeAppPassword: {\n    lexicon: 1,\n    id: \"com.atproto.server.revokeAppPassword\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Revoke an app-specific password by name.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"name\"],\n            properties: {\n              name: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetBlob: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getBlob\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a blob associated with a given repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\", \"cid\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The CID of the blob to fetch\"\n            }\n          }\n        },\n        output: {\n          encoding: \"*/*\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetBlocks: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getBlocks\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Gets blocks from a given repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\", \"cids\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            cids: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetCheckout: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getCheckout\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Gets the repo state.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            commit: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The commit to get the checkout from. Defaults to current HEAD.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetCommitPath: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getCommitPath\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Gets the path of repo commits\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            latest: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The most recent commit\"\n            },\n            earliest: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The earliest commit to start from\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"commits\"],\n            properties: {\n              commits: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"cid\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetHead: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getHead\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Gets the current HEAD CID of a repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"root\"],\n            properties: {\n              root: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"HeadNotFound\"\n          }\n        ]\n      }\n    }\n  },\n  ComAtprotoSyncGetRecord: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getRecord\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Gets blocks needed for existence or non-existence of record.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\", \"collection\", \"rkey\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            collection: {\n              type: \"string\",\n              format: \"nsid\"\n            },\n            rkey: {\n              type: \"string\"\n            },\n            commit: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"An optional past commit CID.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetRepo: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getRepo\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Gets the repo state.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            earliest: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The earliest commit in the commit range (not inclusive)\"\n            },\n            latest: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The latest commit in the commit range (inclusive)\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncListBlobs: {\n    lexicon: 1,\n    id: \"com.atproto.sync.listBlobs\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List blob cids for some range of commits\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            latest: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The most recent commit\"\n            },\n            earliest: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The earliest commit to start from\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"cids\"],\n            properties: {\n              cids: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"cid\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncListRepos: {\n    lexicon: 1,\n    id: \"com.atproto.sync.listRepos\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List dids and root cids of hosted repos\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 1e3,\n              default: 500\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repos\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              repos: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.sync.listRepos#repo\"\n                }\n              }\n            }\n          }\n        }\n      },\n      repo: {\n        type: \"object\",\n        required: [\"did\", \"head\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          head: {\n            type: \"string\",\n            format: \"cid\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncNotifyOfUpdate: {\n    lexicon: 1,\n    id: \"com.atproto.sync.notifyOfUpdate\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Notify a crawling service of a recent update. Often when a long break between updates causes the connection with the crawling service to break.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"hostname\"],\n            properties: {\n              hostname: {\n                type: \"string\",\n                description: \"Hostname of the service that is notifying of update.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncRequestCrawl: {\n    lexicon: 1,\n    id: \"com.atproto.sync.requestCrawl\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Request a service to persistently crawl hosted repos.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"hostname\"],\n            properties: {\n              hostname: {\n                type: \"string\",\n                description: \"Hostname of the service that is requesting to be crawled.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncSubscribeRepos: {\n    lexicon: 1,\n    id: \"com.atproto.sync.subscribeRepos\",\n    defs: {\n      main: {\n        type: \"subscription\",\n        description: \"Subscribe to repo updates\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            cursor: {\n              type: \"integer\",\n              description: \"The last known event to backfill from.\"\n            }\n          }\n        },\n        message: {\n          schema: {\n            type: \"union\",\n            refs: [\n              \"lex:com.atproto.sync.subscribeRepos#commit\",\n              \"lex:com.atproto.sync.subscribeRepos#handle\",\n              \"lex:com.atproto.sync.subscribeRepos#migrate\",\n              \"lex:com.atproto.sync.subscribeRepos#tombstone\",\n              \"lex:com.atproto.sync.subscribeRepos#info\"\n            ]\n          }\n        },\n        errors: [\n          {\n            name: \"FutureCursor\"\n          },\n          {\n            name: \"ConsumerTooSlow\"\n          }\n        ]\n      },\n      commit: {\n        type: \"object\",\n        required: [\n          \"seq\",\n          \"rebase\",\n          \"tooBig\",\n          \"repo\",\n          \"commit\",\n          \"prev\",\n          \"blocks\",\n          \"ops\",\n          \"blobs\",\n          \"time\"\n        ],\n        nullable: [\"prev\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          rebase: {\n            type: \"boolean\"\n          },\n          tooBig: {\n            type: \"boolean\"\n          },\n          repo: {\n            type: \"string\",\n            format: \"did\"\n          },\n          commit: {\n            type: \"cid-link\"\n          },\n          prev: {\n            type: \"cid-link\"\n          },\n          blocks: {\n            type: \"bytes\",\n            description: \"CAR file containing relevant blocks\",\n            maxLength: 1e6\n          },\n          ops: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.sync.subscribeRepos#repoOp\"\n            },\n            maxLength: 200\n          },\n          blobs: {\n            type: \"array\",\n            items: {\n              type: \"cid-link\"\n            }\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      handle: {\n        type: \"object\",\n        required: [\"seq\", \"did\", \"handle\", \"time\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      migrate: {\n        type: \"object\",\n        required: [\"seq\", \"did\", \"migrateTo\", \"time\"],\n        nullable: [\"migrateTo\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          migrateTo: {\n            type: \"string\"\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      tombstone: {\n        type: \"object\",\n        required: [\"seq\", \"did\", \"time\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      info: {\n        type: \"object\",\n        required: [\"name\"],\n        properties: {\n          name: {\n            type: \"string\",\n            knownValues: [\"OutdatedCursor\"]\n          },\n          message: {\n            type: \"string\"\n          }\n        }\n      },\n      repoOp: {\n        type: \"object\",\n        required: [\"action\", \"path\", \"cid\"],\n        nullable: [\"cid\"],\n        properties: {\n          action: {\n            type: \"string\",\n            knownValues: [\"create\", \"update\", \"delete\"]\n          },\n          path: {\n            type: \"string\"\n          },\n          cid: {\n            type: \"cid-link\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorDefs: {\n    lexicon: 1,\n    id: \"app.bsky.actor.defs\",\n    description: \"A reference to an actor in the network.\",\n    defs: {\n      profileViewBasic: {\n        type: \"object\",\n        required: [\"did\", \"handle\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          displayName: {\n            type: \"string\",\n            maxGraphemes: 64,\n            maxLength: 640\n          },\n          avatar: {\n            type: \"string\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      profileView: {\n        type: \"object\",\n        required: [\"did\", \"handle\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          displayName: {\n            type: \"string\",\n            maxGraphemes: 64,\n            maxLength: 640\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 256,\n            maxLength: 2560\n          },\n          avatar: {\n            type: \"string\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      profileViewDetailed: {\n        type: \"object\",\n        required: [\"did\", \"handle\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          displayName: {\n            type: \"string\",\n            maxGraphemes: 64,\n            maxLength: 640\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 256,\n            maxLength: 2560\n          },\n          avatar: {\n            type: \"string\"\n          },\n          banner: {\n            type: \"string\"\n          },\n          followersCount: {\n            type: \"integer\"\n          },\n          followsCount: {\n            type: \"integer\"\n          },\n          postsCount: {\n            type: \"integer\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      viewerState: {\n        type: \"object\",\n        properties: {\n          muted: {\n            type: \"boolean\"\n          },\n          mutedByList: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listViewBasic\"\n          },\n          blockedBy: {\n            type: \"boolean\"\n          },\n          blocking: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          following: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          followedBy: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      preferences: {\n        type: \"array\",\n        items: {\n          type: \"union\",\n          refs: [\n            \"lex:app.bsky.actor.defs#adultContentPref\",\n            \"lex:app.bsky.actor.defs#contentLabelPref\",\n            \"lex:app.bsky.actor.defs#savedFeedsPref\"\n          ]\n        }\n      },\n      adultContentPref: {\n        type: \"object\",\n        required: [\"enabled\"],\n        properties: {\n          enabled: {\n            type: \"boolean\",\n            default: false\n          }\n        }\n      },\n      contentLabelPref: {\n        type: \"object\",\n        required: [\"label\", \"visibility\"],\n        properties: {\n          label: {\n            type: \"string\"\n          },\n          visibility: {\n            type: \"string\",\n            knownValues: [\"show\", \"warn\", \"hide\"]\n          }\n        }\n      },\n      savedFeedsPref: {\n        type: \"object\",\n        required: [\"pinned\", \"saved\"],\n        properties: {\n          pinned: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"at-uri\"\n            }\n          },\n          saved: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"at-uri\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetPreferences: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getPreferences\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get private preferences attached to the account.\",\n        parameters: {\n          type: \"params\",\n          properties: {}\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"preferences\"],\n            properties: {\n              preferences: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#preferences\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetProfile: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getProfile\",\n    defs: {\n      main: {\n        type: \"query\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewDetailed\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetProfiles: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getProfiles\",\n    defs: {\n      main: {\n        type: \"query\",\n        parameters: {\n          type: \"params\",\n          required: [\"actors\"],\n          properties: {\n            actors: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"at-identifier\"\n              },\n              maxLength: 25\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"profiles\"],\n            properties: {\n              profiles: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileViewDetailed\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetSuggestions: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getSuggestions\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of actors suggested for following. Used in discovery UIs.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actors\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              actors: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorProfile: {\n    lexicon: 1,\n    id: \"app.bsky.actor.profile\",\n    defs: {\n      main: {\n        type: \"record\",\n        key: \"literal:self\",\n        record: {\n          type: \"object\",\n          properties: {\n            displayName: {\n              type: \"string\",\n              maxGraphemes: 64,\n              maxLength: 640\n            },\n            description: {\n              type: \"string\",\n              maxGraphemes: 256,\n              maxLength: 2560\n            },\n            avatar: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            banner: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorPutPreferences: {\n    lexicon: 1,\n    id: \"app.bsky.actor.putPreferences\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Sets the private preferences attached to the account.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"preferences\"],\n            properties: {\n              preferences: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#preferences\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorSearchActors: {\n    lexicon: 1,\n    id: \"app.bsky.actor.searchActors\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find actors matching search criteria.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            term: {\n              type: \"string\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actors\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              actors: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorSearchActorsTypeahead: {\n    lexicon: 1,\n    id: \"app.bsky.actor.searchActorsTypeahead\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find actor suggestions for a search term.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            term: {\n              type: \"string\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actors\"],\n            properties: {\n              actors: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedExternal: {\n    lexicon: 1,\n    id: \"app.bsky.embed.external\",\n    description: \"A representation of some externally linked content, embedded in another form of content\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"external\"],\n        properties: {\n          external: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.external#external\"\n          }\n        }\n      },\n      external: {\n        type: \"object\",\n        required: [\"uri\", \"title\", \"description\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"uri\"\n          },\n          title: {\n            type: \"string\"\n          },\n          description: {\n            type: \"string\"\n          },\n          thumb: {\n            type: \"blob\",\n            accept: [\"image/*\"],\n            maxSize: 1e6\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"external\"],\n        properties: {\n          external: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.external#viewExternal\"\n          }\n        }\n      },\n      viewExternal: {\n        type: \"object\",\n        required: [\"uri\", \"title\", \"description\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"uri\"\n          },\n          title: {\n            type: \"string\"\n          },\n          description: {\n            type: \"string\"\n          },\n          thumb: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedImages: {\n    lexicon: 1,\n    id: \"app.bsky.embed.images\",\n    description: \"A set of images embedded in some other form of content\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"images\"],\n        properties: {\n          images: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.embed.images#image\"\n            },\n            maxLength: 4\n          }\n        }\n      },\n      image: {\n        type: \"object\",\n        required: [\"image\", \"alt\"],\n        properties: {\n          image: {\n            type: \"blob\",\n            accept: [\"image/*\"],\n            maxSize: 1e6\n          },\n          alt: {\n            type: \"string\"\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"images\"],\n        properties: {\n          images: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.embed.images#viewImage\"\n            },\n            maxLength: 4\n          }\n        }\n      },\n      viewImage: {\n        type: \"object\",\n        required: [\"thumb\", \"fullsize\", \"alt\"],\n        properties: {\n          thumb: {\n            type: \"string\"\n          },\n          fullsize: {\n            type: \"string\"\n          },\n          alt: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedRecord: {\n    lexicon: 1,\n    id: \"app.bsky.embed.record\",\n    description: \"A representation of a record embedded in another form of content\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"record\"],\n        properties: {\n          record: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.repo.strongRef\"\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"record\"],\n        properties: {\n          record: {\n            type: \"union\",\n            refs: [\n              \"lex:app.bsky.embed.record#viewRecord\",\n              \"lex:app.bsky.embed.record#viewNotFound\",\n              \"lex:app.bsky.embed.record#viewBlocked\",\n              \"lex:app.bsky.feed.defs#generatorView\",\n              \"lex:app.bsky.graph.defs#listView\"\n            ]\n          }\n        }\n      },\n      viewRecord: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"author\", \"value\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n          },\n          value: {\n            type: \"unknown\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          },\n          embeds: {\n            type: \"array\",\n            items: {\n              type: \"union\",\n              refs: [\n                \"lex:app.bsky.embed.images#view\",\n                \"lex:app.bsky.embed.external#view\",\n                \"lex:app.bsky.embed.record#view\",\n                \"lex:app.bsky.embed.recordWithMedia#view\"\n              ]\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      viewNotFound: {\n        type: \"object\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      viewBlocked: {\n        type: \"object\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedRecordWithMedia: {\n    lexicon: 1,\n    id: \"app.bsky.embed.recordWithMedia\",\n    description: \"A representation of a record embedded in another form of content, alongside other compatible embeds\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"record\", \"media\"],\n        properties: {\n          record: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.record\"\n          },\n          media: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.embed.images\", \"lex:app.bsky.embed.external\"]\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"record\", \"media\"],\n        properties: {\n          record: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.record#view\"\n          },\n          media: {\n            type: \"union\",\n            refs: [\n              \"lex:app.bsky.embed.images#view\",\n              \"lex:app.bsky.embed.external#view\"\n            ]\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedDefs: {\n    lexicon: 1,\n    id: \"app.bsky.feed.defs\",\n    defs: {\n      postView: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"author\", \"record\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n          },\n          record: {\n            type: \"unknown\"\n          },\n          embed: {\n            type: \"union\",\n            refs: [\n              \"lex:app.bsky.embed.images#view\",\n              \"lex:app.bsky.embed.external#view\",\n              \"lex:app.bsky.embed.record#view\",\n              \"lex:app.bsky.embed.recordWithMedia#view\"\n            ]\n          },\n          replyCount: {\n            type: \"integer\"\n          },\n          repostCount: {\n            type: \"integer\"\n          },\n          likeCount: {\n            type: \"integer\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      viewerState: {\n        type: \"object\",\n        properties: {\n          repost: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          like: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      feedViewPost: {\n        type: \"object\",\n        required: [\"post\"],\n        properties: {\n          post: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#postView\"\n          },\n          reply: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#replyRef\"\n          },\n          reason: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.feed.defs#reasonRepost\"]\n          }\n        }\n      },\n      replyRef: {\n        type: \"object\",\n        required: [\"root\", \"parent\"],\n        properties: {\n          root: {\n            type: \"union\",\n            refs: [\n              \"lex:app.bsky.feed.defs#postView\",\n              \"lex:app.bsky.feed.defs#notFoundPost\",\n              \"lex:app.bsky.feed.defs#blockedPost\"\n            ]\n          },\n          parent: {\n            type: \"union\",\n            refs: [\n              \"lex:app.bsky.feed.defs#postView\",\n              \"lex:app.bsky.feed.defs#notFoundPost\",\n              \"lex:app.bsky.feed.defs#blockedPost\"\n            ]\n          }\n        }\n      },\n      reasonRepost: {\n        type: \"object\",\n        required: [\"by\", \"indexedAt\"],\n        properties: {\n          by: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      threadViewPost: {\n        type: \"object\",\n        required: [\"post\"],\n        properties: {\n          post: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#postView\"\n          },\n          parent: {\n            type: \"union\",\n            refs: [\n              \"lex:app.bsky.feed.defs#threadViewPost\",\n              \"lex:app.bsky.feed.defs#notFoundPost\",\n              \"lex:app.bsky.feed.defs#blockedPost\"\n            ]\n          },\n          replies: {\n            type: \"array\",\n            items: {\n              type: \"union\",\n              refs: [\n                \"lex:app.bsky.feed.defs#threadViewPost\",\n                \"lex:app.bsky.feed.defs#notFoundPost\",\n                \"lex:app.bsky.feed.defs#blockedPost\"\n              ]\n            }\n          }\n        }\n      },\n      notFoundPost: {\n        type: \"object\",\n        required: [\"uri\", \"notFound\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          notFound: {\n            type: \"boolean\",\n            const: true\n          }\n        }\n      },\n      blockedPost: {\n        type: \"object\",\n        required: [\"uri\", \"blocked\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          blocked: {\n            type: \"boolean\",\n            const: true\n          }\n        }\n      },\n      generatorView: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"did\", \"creator\", \"displayName\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          creator: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          },\n          displayName: {\n            type: \"string\"\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 300,\n            maxLength: 3e3\n          },\n          descriptionFacets: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.richtext.facet\"\n            }\n          },\n          avatar: {\n            type: \"string\"\n          },\n          likeCount: {\n            type: \"integer\",\n            minimum: 0\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#generatorViewerState\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      generatorViewerState: {\n        type: \"object\",\n        properties: {\n          like: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      skeletonFeedPost: {\n        type: \"object\",\n        required: [\"post\"],\n        properties: {\n          post: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          reason: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.feed.defs#skeletonReasonRepost\"]\n          }\n        }\n      },\n      skeletonReasonRepost: {\n        type: \"object\",\n        required: [\"repost\"],\n        properties: {\n          repost: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedDescribeFeedGenerator: {\n    lexicon: 1,\n    id: \"app.bsky.feed.describeFeedGenerator\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Returns information about a given feed generator including TOS & offered feed URIs\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\", \"feeds\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.describeFeedGenerator#feed\"\n                }\n              },\n              links: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.feed.describeFeedGenerator#links\"\n              }\n            }\n          }\n        }\n      },\n      feed: {\n        type: \"object\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      links: {\n        type: \"object\",\n        properties: {\n          privacyPolicy: {\n            type: \"string\"\n          },\n          termsOfService: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGenerator: {\n    lexicon: 1,\n    id: \"app.bsky.feed.generator\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of the existence of a feed generator\",\n        key: \"any\",\n        record: {\n          type: \"object\",\n          required: [\"did\", \"displayName\", \"createdAt\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\"\n            },\n            displayName: {\n              type: \"string\",\n              maxGraphemes: 24,\n              maxLength: 240\n            },\n            description: {\n              type: \"string\",\n              maxGraphemes: 300,\n              maxLength: 3e3\n            },\n            descriptionFacets: {\n              type: \"array\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.richtext.facet\"\n              }\n            },\n            avatar: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetActorFeeds: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getActorFeeds\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Retrieve a list of feeds created by a given actor\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feeds\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#generatorView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetAuthorFeed: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getAuthorFeed\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"A view of an actor's feed.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            },\n            filter: {\n              type: \"string\",\n              knownValues: [\n                \"posts_with_replies\",\n                \"posts_no_replies\",\n                \"posts_with_media\"\n              ],\n              default: \"posts_with_replies\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"BlockedActor\"\n          },\n          {\n            name: \"BlockedByActor\"\n          }\n        ]\n      }\n    }\n  },\n  AppBskyFeedGetFeed: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeed\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Compose and hydrate a feed from a user's selected feed generator\",\n        parameters: {\n          type: \"params\",\n          required: [\"feed\"],\n          properties: {\n            feed: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"UnknownFeed\"\n          }\n        ]\n      }\n    }\n  },\n  AppBskyFeedGetFeedGenerator: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeedGenerator\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about a specific feed offered by a feed generator, such as its online status\",\n        parameters: {\n          type: \"params\",\n          required: [\"feed\"],\n          properties: {\n            feed: {\n              type: \"string\",\n              format: \"at-uri\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"view\", \"isOnline\", \"isValid\"],\n            properties: {\n              view: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.feed.defs#generatorView\"\n              },\n              isOnline: {\n                type: \"boolean\"\n              },\n              isValid: {\n                type: \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetFeedGenerators: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeedGenerators\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about a list of feed generators\",\n        parameters: {\n          type: \"params\",\n          required: [\"feeds\"],\n          properties: {\n            feeds: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"at-uri\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feeds\"],\n            properties: {\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#generatorView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetFeedSkeleton: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeedSkeleton\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"A skeleton of a feed provided by a feed generator\",\n        parameters: {\n          type: \"params\",\n          required: [\"feed\"],\n          properties: {\n            feed: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#skeletonFeedPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"UnknownFeed\"\n          }\n        ]\n      }\n    }\n  },\n  AppBskyFeedGetLikes: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getLikes\",\n    defs: {\n      main: {\n        type: \"query\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"likes\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              likes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.getLikes#like\"\n                }\n              }\n            }\n          }\n        }\n      },\n      like: {\n        type: \"object\",\n        required: [\"indexedAt\", \"createdAt\", \"actor\"],\n        properties: {\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          actor: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetPostThread: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getPostThread\",\n    defs: {\n      main: {\n        type: \"query\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            depth: {\n              type: \"integer\",\n              default: 6,\n              minimum: 0,\n              maximum: 1e3\n            },\n            parentHeight: {\n              type: \"integer\",\n              default: 80,\n              minimum: 0,\n              maximum: 1e3\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"thread\"],\n            properties: {\n              thread: {\n                type: \"union\",\n                refs: [\n                  \"lex:app.bsky.feed.defs#threadViewPost\",\n                  \"lex:app.bsky.feed.defs#notFoundPost\",\n                  \"lex:app.bsky.feed.defs#blockedPost\"\n                ]\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"NotFound\"\n          }\n        ]\n      }\n    }\n  },\n  AppBskyFeedGetPosts: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getPosts\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"A view of an actor's feed.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uris\"],\n          properties: {\n            uris: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              maxLength: 25\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"posts\"],\n            properties: {\n              posts: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#postView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetRepostedBy: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getRepostedBy\",\n    defs: {\n      main: {\n        type: \"query\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"repostedBy\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              repostedBy: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetTimeline: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getTimeline\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"A view of the user's home timeline.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            algorithm: {\n              type: \"string\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedLike: {\n    lexicon: 1,\n    id: \"app.bsky.feed.like\",\n    defs: {\n      main: {\n        type: \"record\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.repo.strongRef\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedPost: {\n    lexicon: 1,\n    id: \"app.bsky.feed.post\",\n    defs: {\n      main: {\n        type: \"record\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"text\", \"createdAt\"],\n          properties: {\n            text: {\n              type: \"string\",\n              maxLength: 3e3,\n              maxGraphemes: 300\n            },\n            entities: {\n              type: \"array\",\n              description: \"Deprecated: replaced by app.bsky.richtext.facet.\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.feed.post#entity\"\n              }\n            },\n            facets: {\n              type: \"array\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.richtext.facet\"\n              }\n            },\n            reply: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.feed.post#replyRef\"\n            },\n            embed: {\n              type: \"union\",\n              refs: [\n                \"lex:app.bsky.embed.images\",\n                \"lex:app.bsky.embed.external\",\n                \"lex:app.bsky.embed.record\",\n                \"lex:app.bsky.embed.recordWithMedia\"\n              ]\n            },\n            langs: {\n              type: \"array\",\n              maxLength: 3,\n              items: {\n                type: \"string\",\n                format: \"language\"\n              }\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      },\n      replyRef: {\n        type: \"object\",\n        required: [\"root\", \"parent\"],\n        properties: {\n          root: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.repo.strongRef\"\n          },\n          parent: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.repo.strongRef\"\n          }\n        }\n      },\n      entity: {\n        type: \"object\",\n        description: \"Deprecated: use facets instead.\",\n        required: [\"index\", \"type\", \"value\"],\n        properties: {\n          index: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.post#textSlice\"\n          },\n          type: {\n            type: \"string\",\n            description: \"Expected values are 'mention' and 'link'.\"\n          },\n          value: {\n            type: \"string\"\n          }\n        }\n      },\n      textSlice: {\n        type: \"object\",\n        description: \"Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.\",\n        required: [\"start\", \"end\"],\n        properties: {\n          start: {\n            type: \"integer\",\n            minimum: 0\n          },\n          end: {\n            type: \"integer\",\n            minimum: 0\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedRepost: {\n    lexicon: 1,\n    id: \"app.bsky.feed.repost\",\n    defs: {\n      main: {\n        type: \"record\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.repo.strongRef\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphBlock: {\n    lexicon: 1,\n    id: \"app.bsky.graph.block\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A block.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"did\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphDefs: {\n    lexicon: 1,\n    id: \"app.bsky.graph.defs\",\n    defs: {\n      listViewBasic: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"name\", \"purpose\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          name: {\n            type: \"string\",\n            maxLength: 64,\n            minLength: 1\n          },\n          purpose: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listPurpose\"\n          },\n          avatar: {\n            type: \"string\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listViewerState\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      listView: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"creator\", \"name\", \"purpose\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          creator: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          },\n          name: {\n            type: \"string\",\n            maxLength: 64,\n            minLength: 1\n          },\n          purpose: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listPurpose\"\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 300,\n            maxLength: 3e3\n          },\n          descriptionFacets: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.richtext.facet\"\n            }\n          },\n          avatar: {\n            type: \"string\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listViewerState\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      listItemView: {\n        type: \"object\",\n        required: [\"subject\"],\n        properties: {\n          subject: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          }\n        }\n      },\n      listPurpose: {\n        type: \"string\",\n        knownValues: [\"app.bsky.graph.defs#modlist\"]\n      },\n      modlist: {\n        type: \"token\",\n        description: \"A list of actors to apply an aggregate moderation action (mute/block) on\"\n      },\n      listViewerState: {\n        type: \"object\",\n        properties: {\n          muted: {\n            type: \"boolean\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphFollow: {\n    lexicon: 1,\n    id: \"app.bsky.graph.follow\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A social follow.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"did\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetBlocks: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getBlocks\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Who is the requester's account blocking?\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"blocks\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              blocks: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetFollowers: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getFollowers\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Who is following an actor?\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\", \"followers\"],\n            properties: {\n              subject: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#profileView\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              followers: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetFollows: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getFollows\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Who is an actor following?\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\", \"follows\"],\n            properties: {\n              subject: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#profileView\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              follows: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getList\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Fetch a list of actors\",\n        parameters: {\n          type: \"params\",\n          required: [\"list\"],\n          properties: {\n            list: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"list\", \"items\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              list: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.graph.defs#listView\"\n              },\n              items: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.graph.defs#listItemView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetListMutes: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getListMutes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Which lists is the requester's account muting?\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"lists\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              lists: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.graph.defs#listView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetLists: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getLists\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Fetch a list of lists that belong to an actor\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"lists\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              lists: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.graph.defs#listView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetMutes: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getMutes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Who does the viewer mute?\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"mutes\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              mutes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.list\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of a list of actors.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"name\", \"purpose\", \"createdAt\"],\n          properties: {\n            purpose: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.graph.defs#listPurpose\"\n            },\n            name: {\n              type: \"string\",\n              maxLength: 64,\n              minLength: 1\n            },\n            description: {\n              type: \"string\",\n              maxGraphemes: 300,\n              maxLength: 3e3\n            },\n            descriptionFacets: {\n              type: \"array\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.richtext.facet\"\n              }\n            },\n            avatar: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphListitem: {\n    lexicon: 1,\n    id: \"app.bsky.graph.listitem\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"An item under a declared list of actors\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"list\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"did\"\n            },\n            list: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphMuteActor: {\n    lexicon: 1,\n    id: \"app.bsky.graph.muteActor\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Mute an actor by did or handle.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actor\"],\n            properties: {\n              actor: {\n                type: \"string\",\n                format: \"at-identifier\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphMuteActorList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.muteActorList\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Mute a list of actors.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"list\"],\n            properties: {\n              list: {\n                type: \"string\",\n                format: \"at-uri\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphUnmuteActor: {\n    lexicon: 1,\n    id: \"app.bsky.graph.unmuteActor\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Unmute an actor by did or handle.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actor\"],\n            properties: {\n              actor: {\n                type: \"string\",\n                format: \"at-identifier\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphUnmuteActorList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.unmuteActorList\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Unmute a list of actors.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"list\"],\n            properties: {\n              list: {\n                type: \"string\",\n                format: \"at-uri\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyNotificationGetUnreadCount: {\n    lexicon: 1,\n    id: \"app.bsky.notification.getUnreadCount\",\n    defs: {\n      main: {\n        type: \"query\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            seenAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"count\"],\n            properties: {\n              count: {\n                type: \"integer\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyNotificationListNotifications: {\n    lexicon: 1,\n    id: \"app.bsky.notification.listNotifications\",\n    defs: {\n      main: {\n        type: \"query\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            },\n            seenAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"notifications\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              notifications: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.notification.listNotifications#notification\"\n                }\n              }\n            }\n          }\n        }\n      },\n      notification: {\n        type: \"object\",\n        required: [\n          \"uri\",\n          \"cid\",\n          \"author\",\n          \"reason\",\n          \"record\",\n          \"isRead\",\n          \"indexedAt\"\n        ],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          },\n          reason: {\n            type: \"string\",\n            description: \"Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.\",\n            knownValues: [\n              \"like\",\n              \"repost\",\n              \"follow\",\n              \"mention\",\n              \"reply\",\n              \"quote\"\n            ]\n          },\n          reasonSubject: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          record: {\n            type: \"unknown\"\n          },\n          isRead: {\n            type: \"boolean\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyNotificationUpdateSeen: {\n    lexicon: 1,\n    id: \"app.bsky.notification.updateSeen\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Notify server that the user has seen notifications.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"seenAt\"],\n            properties: {\n              seenAt: {\n                type: \"string\",\n                format: \"datetime\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyRichtextFacet: {\n    lexicon: 1,\n    id: \"app.bsky.richtext.facet\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"index\", \"features\"],\n        properties: {\n          index: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.richtext.facet#byteSlice\"\n          },\n          features: {\n            type: \"array\",\n            items: {\n              type: \"union\",\n              refs: [\n                \"lex:app.bsky.richtext.facet#mention\",\n                \"lex:app.bsky.richtext.facet#link\"\n              ]\n            }\n          }\n        }\n      },\n      mention: {\n        type: \"object\",\n        description: \"A facet feature for actor mentions.\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          }\n        }\n      },\n      link: {\n        type: \"object\",\n        description: \"A facet feature for links.\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"uri\"\n          }\n        }\n      },\n      byteSlice: {\n        type: \"object\",\n        description: \"A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings.\",\n        required: [\"byteStart\", \"byteEnd\"],\n        properties: {\n          byteStart: {\n            type: \"integer\",\n            minimum: 0\n          },\n          byteEnd: {\n            type: \"integer\",\n            minimum: 0\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedApplyLabels: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.applyLabels\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Allow a labeler to apply labels directly.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"labels\"],\n            properties: {\n              labels: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.label.defs#label\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedGetPopular: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.getPopular\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"An unspecced view of globally popular items\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            includeNsfw: {\n              type: \"boolean\",\n              default: false\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedGetPopularFeedGenerators: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.getPopularFeedGenerators\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"An unspecced view of globally popular feed generators\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            },\n            query: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feeds\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#generatorView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedGetTimelineSkeleton: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.getTimelineSkeleton\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"A skeleton of a timeline - UNSPECCED & WILL GO AWAY SOON\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#skeletonFeedPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [\n          {\n            name: \"UnknownFeed\"\n          }\n        ]\n      }\n    }\n  }\n};\nvar schemas = Object.values(schemaDict);\nvar lexicons = new Lexicons(schemas);\n\n// src/client/types/com/atproto/admin/disableAccountInvites.ts\nvar disableAccountInvites_exports = {};\n__export(disableAccountInvites_exports, {\n  toKnownErr: () => toKnownErr\n});\nfunction toKnownErr(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/disableInviteCodes.ts\nvar disableInviteCodes_exports = {};\n__export(disableInviteCodes_exports, {\n  toKnownErr: () => toKnownErr2\n});\nfunction toKnownErr2(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/enableAccountInvites.ts\nvar enableAccountInvites_exports = {};\n__export(enableAccountInvites_exports, {\n  toKnownErr: () => toKnownErr3\n});\nfunction toKnownErr3(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getInviteCodes.ts\nvar getInviteCodes_exports = {};\n__export(getInviteCodes_exports, {\n  toKnownErr: () => toKnownErr4\n});\nfunction toKnownErr4(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getModerationAction.ts\nvar getModerationAction_exports = {};\n__export(getModerationAction_exports, {\n  toKnownErr: () => toKnownErr5\n});\nfunction toKnownErr5(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getModerationActions.ts\nvar getModerationActions_exports = {};\n__export(getModerationActions_exports, {\n  toKnownErr: () => toKnownErr6\n});\nfunction toKnownErr6(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getModerationReport.ts\nvar getModerationReport_exports = {};\n__export(getModerationReport_exports, {\n  toKnownErr: () => toKnownErr7\n});\nfunction toKnownErr7(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getModerationReports.ts\nvar getModerationReports_exports = {};\n__export(getModerationReports_exports, {\n  toKnownErr: () => toKnownErr8\n});\nfunction toKnownErr8(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getRecord.ts\nvar getRecord_exports = {};\n__export(getRecord_exports, {\n  RecordNotFoundError: () => RecordNotFoundError,\n  toKnownErr: () => toKnownErr9\n});\nvar RecordNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr9(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"RecordNotFound\")\n      return new RecordNotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getRepo.ts\nvar getRepo_exports = {};\n__export(getRepo_exports, {\n  RepoNotFoundError: () => RepoNotFoundError,\n  toKnownErr: () => toKnownErr10\n});\nvar RepoNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr10(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"RepoNotFound\")\n      return new RepoNotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/rebaseRepo.ts\nvar rebaseRepo_exports = {};\n__export(rebaseRepo_exports, {\n  ConcurrentWritesError: () => ConcurrentWritesError,\n  InvalidSwapError: () => InvalidSwapError,\n  toKnownErr: () => toKnownErr11\n});\nvar InvalidSwapError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar ConcurrentWritesError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr11(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\")\n      return new InvalidSwapError(e);\n    if (e.error === \"ConcurrentWrites\")\n      return new ConcurrentWritesError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/resolveModerationReports.ts\nvar resolveModerationReports_exports = {};\n__export(resolveModerationReports_exports, {\n  toKnownErr: () => toKnownErr12\n});\nfunction toKnownErr12(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/reverseModerationAction.ts\nvar reverseModerationAction_exports = {};\n__export(reverseModerationAction_exports, {\n  toKnownErr: () => toKnownErr13\n});\nfunction toKnownErr13(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/searchRepos.ts\nvar searchRepos_exports = {};\n__export(searchRepos_exports, {\n  toKnownErr: () => toKnownErr14\n});\nfunction toKnownErr14(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/sendEmail.ts\nvar sendEmail_exports = {};\n__export(sendEmail_exports, {\n  toKnownErr: () => toKnownErr15\n});\nfunction toKnownErr15(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/takeModerationAction.ts\nvar takeModerationAction_exports = {};\n__export(takeModerationAction_exports, {\n  SubjectHasActionError: () => SubjectHasActionError,\n  toKnownErr: () => toKnownErr16\n});\nvar SubjectHasActionError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr16(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"SubjectHasAction\")\n      return new SubjectHasActionError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/updateAccountEmail.ts\nvar updateAccountEmail_exports = {};\n__export(updateAccountEmail_exports, {\n  toKnownErr: () => toKnownErr17\n});\nfunction toKnownErr17(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/updateAccountHandle.ts\nvar updateAccountHandle_exports = {};\n__export(updateAccountHandle_exports, {\n  toKnownErr: () => toKnownErr18\n});\nfunction toKnownErr18(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/identity/resolveHandle.ts\nvar resolveHandle_exports = {};\n__export(resolveHandle_exports, {\n  toKnownErr: () => toKnownErr19\n});\nfunction toKnownErr19(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/identity/updateHandle.ts\nvar updateHandle_exports = {};\n__export(updateHandle_exports, {\n  toKnownErr: () => toKnownErr20\n});\nfunction toKnownErr20(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/label/queryLabels.ts\nvar queryLabels_exports = {};\n__export(queryLabels_exports, {\n  toKnownErr: () => toKnownErr21\n});\nfunction toKnownErr21(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/moderation/createReport.ts\nvar createReport_exports = {};\n__export(createReport_exports, {\n  toKnownErr: () => toKnownErr22\n});\nfunction toKnownErr22(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/applyWrites.ts\nvar applyWrites_exports = {};\n__export(applyWrites_exports, {\n  InvalidSwapError: () => InvalidSwapError2,\n  isCreate: () => isCreate,\n  isDelete: () => isDelete,\n  isUpdate: () => isUpdate,\n  toKnownErr: () => toKnownErr23,\n  validateCreate: () => validateCreate,\n  validateDelete: () => validateDelete,\n  validateUpdate: () => validateUpdate\n});\n\n// src/client/util.ts\nfunction isObj2(v) {\n  return typeof v === \"object\" && v !== null;\n}\nfunction hasProp2(data, prop) {\n  return prop in data;\n}\n\n// src/client/types/com/atproto/repo/applyWrites.ts\nvar InvalidSwapError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr23(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\")\n      return new InvalidSwapError2(e);\n  }\n  return e;\n}\nfunction isCreate(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.applyWrites#create\";\n}\nfunction validateCreate(v) {\n  return lexicons.validate(\"com.atproto.repo.applyWrites#create\", v);\n}\nfunction isUpdate(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.applyWrites#update\";\n}\nfunction validateUpdate(v) {\n  return lexicons.validate(\"com.atproto.repo.applyWrites#update\", v);\n}\nfunction isDelete(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.applyWrites#delete\";\n}\nfunction validateDelete(v) {\n  return lexicons.validate(\"com.atproto.repo.applyWrites#delete\", v);\n}\n\n// src/client/types/com/atproto/repo/createRecord.ts\nvar createRecord_exports = {};\n__export(createRecord_exports, {\n  InvalidSwapError: () => InvalidSwapError3,\n  toKnownErr: () => toKnownErr24\n});\nvar InvalidSwapError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr24(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\")\n      return new InvalidSwapError3(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/deleteRecord.ts\nvar deleteRecord_exports = {};\n__export(deleteRecord_exports, {\n  InvalidSwapError: () => InvalidSwapError4,\n  toKnownErr: () => toKnownErr25\n});\nvar InvalidSwapError4 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr25(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\")\n      return new InvalidSwapError4(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/describeRepo.ts\nvar describeRepo_exports = {};\n__export(describeRepo_exports, {\n  toKnownErr: () => toKnownErr26\n});\nfunction toKnownErr26(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/getRecord.ts\nvar getRecord_exports2 = {};\n__export(getRecord_exports2, {\n  toKnownErr: () => toKnownErr27\n});\nfunction toKnownErr27(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/listRecords.ts\nvar listRecords_exports = {};\n__export(listRecords_exports, {\n  isRecord: () => isRecord,\n  toKnownErr: () => toKnownErr28,\n  validateRecord: () => validateRecord\n});\nfunction toKnownErr28(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\nfunction isRecord(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.listRecords#record\";\n}\nfunction validateRecord(v) {\n  return lexicons.validate(\"com.atproto.repo.listRecords#record\", v);\n}\n\n// src/client/types/com/atproto/repo/putRecord.ts\nvar putRecord_exports = {};\n__export(putRecord_exports, {\n  InvalidSwapError: () => InvalidSwapError5,\n  toKnownErr: () => toKnownErr29\n});\nvar InvalidSwapError5 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr29(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\")\n      return new InvalidSwapError5(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/rebaseRepo.ts\nvar rebaseRepo_exports2 = {};\n__export(rebaseRepo_exports2, {\n  ConcurrentWritesError: () => ConcurrentWritesError2,\n  InvalidSwapError: () => InvalidSwapError6,\n  toKnownErr: () => toKnownErr30\n});\nvar InvalidSwapError6 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar ConcurrentWritesError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr30(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\")\n      return new InvalidSwapError6(e);\n    if (e.error === \"ConcurrentWrites\")\n      return new ConcurrentWritesError2(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/uploadBlob.ts\nvar uploadBlob_exports = {};\n__export(uploadBlob_exports, {\n  toKnownErr: () => toKnownErr31\n});\nfunction toKnownErr31(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/createAccount.ts\nvar createAccount_exports = {};\n__export(createAccount_exports, {\n  HandleNotAvailableError: () => HandleNotAvailableError,\n  IncompatibleDidDocError: () => IncompatibleDidDocError,\n  InvalidHandleError: () => InvalidHandleError2,\n  InvalidInviteCodeError: () => InvalidInviteCodeError,\n  InvalidPasswordError: () => InvalidPasswordError,\n  UnresolvableDidError: () => UnresolvableDidError,\n  UnsupportedDomainError: () => UnsupportedDomainError,\n  toKnownErr: () => toKnownErr32\n});\nvar InvalidHandleError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar InvalidPasswordError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar InvalidInviteCodeError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar HandleNotAvailableError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar UnsupportedDomainError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar UnresolvableDidError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar IncompatibleDidDocError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr32(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidHandle\")\n      return new InvalidHandleError2(e);\n    if (e.error === \"InvalidPassword\")\n      return new InvalidPasswordError(e);\n    if (e.error === \"InvalidInviteCode\")\n      return new InvalidInviteCodeError(e);\n    if (e.error === \"HandleNotAvailable\")\n      return new HandleNotAvailableError(e);\n    if (e.error === \"UnsupportedDomain\")\n      return new UnsupportedDomainError(e);\n    if (e.error === \"UnresolvableDid\")\n      return new UnresolvableDidError(e);\n    if (e.error === \"IncompatibleDidDoc\")\n      return new IncompatibleDidDocError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/createAppPassword.ts\nvar createAppPassword_exports = {};\n__export(createAppPassword_exports, {\n  AccountTakedownError: () => AccountTakedownError,\n  isAppPassword: () => isAppPassword,\n  toKnownErr: () => toKnownErr33,\n  validateAppPassword: () => validateAppPassword\n});\nvar AccountTakedownError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr33(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\")\n      return new AccountTakedownError(e);\n  }\n  return e;\n}\nfunction isAppPassword(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.createAppPassword#appPassword\";\n}\nfunction validateAppPassword(v) {\n  return lexicons.validate(\n    \"com.atproto.server.createAppPassword#appPassword\",\n    v\n  );\n}\n\n// src/client/types/com/atproto/server/createInviteCode.ts\nvar createInviteCode_exports = {};\n__export(createInviteCode_exports, {\n  toKnownErr: () => toKnownErr34\n});\nfunction toKnownErr34(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/createInviteCodes.ts\nvar createInviteCodes_exports = {};\n__export(createInviteCodes_exports, {\n  isAccountCodes: () => isAccountCodes,\n  toKnownErr: () => toKnownErr35,\n  validateAccountCodes: () => validateAccountCodes\n});\nfunction toKnownErr35(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\nfunction isAccountCodes(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.createInviteCodes#accountCodes\";\n}\nfunction validateAccountCodes(v) {\n  return lexicons.validate(\n    \"com.atproto.server.createInviteCodes#accountCodes\",\n    v\n  );\n}\n\n// src/client/types/com/atproto/server/createSession.ts\nvar createSession_exports = {};\n__export(createSession_exports, {\n  AccountTakedownError: () => AccountTakedownError2,\n  toKnownErr: () => toKnownErr36\n});\nvar AccountTakedownError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr36(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\")\n      return new AccountTakedownError2(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/deleteAccount.ts\nvar deleteAccount_exports = {};\n__export(deleteAccount_exports, {\n  ExpiredTokenError: () => ExpiredTokenError,\n  InvalidTokenError: () => InvalidTokenError,\n  toKnownErr: () => toKnownErr37\n});\nvar ExpiredTokenError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar InvalidTokenError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr37(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"ExpiredToken\")\n      return new ExpiredTokenError(e);\n    if (e.error === \"InvalidToken\")\n      return new InvalidTokenError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/deleteSession.ts\nvar deleteSession_exports = {};\n__export(deleteSession_exports, {\n  toKnownErr: () => toKnownErr38\n});\nfunction toKnownErr38(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/describeServer.ts\nvar describeServer_exports = {};\n__export(describeServer_exports, {\n  isLinks: () => isLinks,\n  toKnownErr: () => toKnownErr39,\n  validateLinks: () => validateLinks\n});\nfunction toKnownErr39(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\nfunction isLinks(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.describeServer#links\";\n}\nfunction validateLinks(v) {\n  return lexicons.validate(\"com.atproto.server.describeServer#links\", v);\n}\n\n// src/client/types/com/atproto/server/getAccountInviteCodes.ts\nvar getAccountInviteCodes_exports = {};\n__export(getAccountInviteCodes_exports, {\n  DuplicateCreateError: () => DuplicateCreateError,\n  toKnownErr: () => toKnownErr40\n});\nvar DuplicateCreateError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr40(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"DuplicateCreate\")\n      return new DuplicateCreateError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/getSession.ts\nvar getSession_exports = {};\n__export(getSession_exports, {\n  toKnownErr: () => toKnownErr41\n});\nfunction toKnownErr41(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/listAppPasswords.ts\nvar listAppPasswords_exports = {};\n__export(listAppPasswords_exports, {\n  AccountTakedownError: () => AccountTakedownError3,\n  isAppPassword: () => isAppPassword2,\n  toKnownErr: () => toKnownErr42,\n  validateAppPassword: () => validateAppPassword2\n});\nvar AccountTakedownError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr42(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\")\n      return new AccountTakedownError3(e);\n  }\n  return e;\n}\nfunction isAppPassword2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.listAppPasswords#appPassword\";\n}\nfunction validateAppPassword2(v) {\n  return lexicons.validate(\"com.atproto.server.listAppPasswords#appPassword\", v);\n}\n\n// src/client/types/com/atproto/server/refreshSession.ts\nvar refreshSession_exports = {};\n__export(refreshSession_exports, {\n  AccountTakedownError: () => AccountTakedownError4,\n  toKnownErr: () => toKnownErr43\n});\nvar AccountTakedownError4 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr43(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\")\n      return new AccountTakedownError4(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/requestAccountDelete.ts\nvar requestAccountDelete_exports = {};\n__export(requestAccountDelete_exports, {\n  toKnownErr: () => toKnownErr44\n});\nfunction toKnownErr44(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/requestPasswordReset.ts\nvar requestPasswordReset_exports = {};\n__export(requestPasswordReset_exports, {\n  toKnownErr: () => toKnownErr45\n});\nfunction toKnownErr45(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/resetPassword.ts\nvar resetPassword_exports = {};\n__export(resetPassword_exports, {\n  ExpiredTokenError: () => ExpiredTokenError2,\n  InvalidTokenError: () => InvalidTokenError2,\n  toKnownErr: () => toKnownErr46\n});\nvar ExpiredTokenError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar InvalidTokenError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr46(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"ExpiredToken\")\n      return new ExpiredTokenError2(e);\n    if (e.error === \"InvalidToken\")\n      return new InvalidTokenError2(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/revokeAppPassword.ts\nvar revokeAppPassword_exports = {};\n__export(revokeAppPassword_exports, {\n  toKnownErr: () => toKnownErr47\n});\nfunction toKnownErr47(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getBlob.ts\nvar getBlob_exports = {};\n__export(getBlob_exports, {\n  toKnownErr: () => toKnownErr48\n});\nfunction toKnownErr48(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getBlocks.ts\nvar getBlocks_exports = {};\n__export(getBlocks_exports, {\n  toKnownErr: () => toKnownErr49\n});\nfunction toKnownErr49(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getCheckout.ts\nvar getCheckout_exports = {};\n__export(getCheckout_exports, {\n  toKnownErr: () => toKnownErr50\n});\nfunction toKnownErr50(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getCommitPath.ts\nvar getCommitPath_exports = {};\n__export(getCommitPath_exports, {\n  toKnownErr: () => toKnownErr51\n});\nfunction toKnownErr51(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getHead.ts\nvar getHead_exports = {};\n__export(getHead_exports, {\n  HeadNotFoundError: () => HeadNotFoundError,\n  toKnownErr: () => toKnownErr52\n});\nvar HeadNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr52(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"HeadNotFound\")\n      return new HeadNotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getRecord.ts\nvar getRecord_exports3 = {};\n__export(getRecord_exports3, {\n  toKnownErr: () => toKnownErr53\n});\nfunction toKnownErr53(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getRepo.ts\nvar getRepo_exports2 = {};\n__export(getRepo_exports2, {\n  toKnownErr: () => toKnownErr54\n});\nfunction toKnownErr54(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/listBlobs.ts\nvar listBlobs_exports = {};\n__export(listBlobs_exports, {\n  toKnownErr: () => toKnownErr55\n});\nfunction toKnownErr55(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/listRepos.ts\nvar listRepos_exports = {};\n__export(listRepos_exports, {\n  isRepo: () => isRepo,\n  toKnownErr: () => toKnownErr56,\n  validateRepo: () => validateRepo\n});\nfunction toKnownErr56(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\nfunction isRepo(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.listRepos#repo\";\n}\nfunction validateRepo(v) {\n  return lexicons.validate(\"com.atproto.sync.listRepos#repo\", v);\n}\n\n// src/client/types/com/atproto/sync/notifyOfUpdate.ts\nvar notifyOfUpdate_exports = {};\n__export(notifyOfUpdate_exports, {\n  toKnownErr: () => toKnownErr57\n});\nfunction toKnownErr57(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/requestCrawl.ts\nvar requestCrawl_exports = {};\n__export(requestCrawl_exports, {\n  toKnownErr: () => toKnownErr58\n});\nfunction toKnownErr58(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getPreferences.ts\nvar getPreferences_exports = {};\n__export(getPreferences_exports, {\n  toKnownErr: () => toKnownErr59\n});\nfunction toKnownErr59(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getProfile.ts\nvar getProfile_exports = {};\n__export(getProfile_exports, {\n  toKnownErr: () => toKnownErr60\n});\nfunction toKnownErr60(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getProfiles.ts\nvar getProfiles_exports = {};\n__export(getProfiles_exports, {\n  toKnownErr: () => toKnownErr61\n});\nfunction toKnownErr61(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getSuggestions.ts\nvar getSuggestions_exports = {};\n__export(getSuggestions_exports, {\n  toKnownErr: () => toKnownErr62\n});\nfunction toKnownErr62(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/putPreferences.ts\nvar putPreferences_exports = {};\n__export(putPreferences_exports, {\n  toKnownErr: () => toKnownErr63\n});\nfunction toKnownErr63(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/searchActors.ts\nvar searchActors_exports = {};\n__export(searchActors_exports, {\n  toKnownErr: () => toKnownErr64\n});\nfunction toKnownErr64(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/searchActorsTypeahead.ts\nvar searchActorsTypeahead_exports = {};\n__export(searchActorsTypeahead_exports, {\n  toKnownErr: () => toKnownErr65\n});\nfunction toKnownErr65(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/describeFeedGenerator.ts\nvar describeFeedGenerator_exports = {};\n__export(describeFeedGenerator_exports, {\n  isFeed: () => isFeed,\n  isLinks: () => isLinks2,\n  toKnownErr: () => toKnownErr66,\n  validateFeed: () => validateFeed,\n  validateLinks: () => validateLinks2\n});\nfunction toKnownErr66(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\nfunction isFeed(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.describeFeedGenerator#feed\";\n}\nfunction validateFeed(v) {\n  return lexicons.validate(\"app.bsky.feed.describeFeedGenerator#feed\", v);\n}\nfunction isLinks2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.describeFeedGenerator#links\";\n}\nfunction validateLinks2(v) {\n  return lexicons.validate(\"app.bsky.feed.describeFeedGenerator#links\", v);\n}\n\n// src/client/types/app/bsky/feed/getActorFeeds.ts\nvar getActorFeeds_exports = {};\n__export(getActorFeeds_exports, {\n  toKnownErr: () => toKnownErr67\n});\nfunction toKnownErr67(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getAuthorFeed.ts\nvar getAuthorFeed_exports = {};\n__export(getAuthorFeed_exports, {\n  BlockedActorError: () => BlockedActorError,\n  BlockedByActorError: () => BlockedByActorError,\n  toKnownErr: () => toKnownErr68\n});\nvar BlockedActorError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nvar BlockedByActorError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr68(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"BlockedActor\")\n      return new BlockedActorError(e);\n    if (e.error === \"BlockedByActor\")\n      return new BlockedByActorError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeed.ts\nvar getFeed_exports = {};\n__export(getFeed_exports, {\n  UnknownFeedError: () => UnknownFeedError,\n  toKnownErr: () => toKnownErr69\n});\nvar UnknownFeedError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr69(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"UnknownFeed\")\n      return new UnknownFeedError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeedGenerator.ts\nvar getFeedGenerator_exports = {};\n__export(getFeedGenerator_exports, {\n  toKnownErr: () => toKnownErr70\n});\nfunction toKnownErr70(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeedGenerators.ts\nvar getFeedGenerators_exports = {};\n__export(getFeedGenerators_exports, {\n  toKnownErr: () => toKnownErr71\n});\nfunction toKnownErr71(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeedSkeleton.ts\nvar getFeedSkeleton_exports = {};\n__export(getFeedSkeleton_exports, {\n  UnknownFeedError: () => UnknownFeedError2,\n  toKnownErr: () => toKnownErr72\n});\nvar UnknownFeedError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr72(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"UnknownFeed\")\n      return new UnknownFeedError2(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getLikes.ts\nvar getLikes_exports = {};\n__export(getLikes_exports, {\n  isLike: () => isLike,\n  toKnownErr: () => toKnownErr73,\n  validateLike: () => validateLike\n});\nfunction toKnownErr73(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\nfunction isLike(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.getLikes#like\";\n}\nfunction validateLike(v) {\n  return lexicons.validate(\"app.bsky.feed.getLikes#like\", v);\n}\n\n// src/client/types/app/bsky/feed/getPostThread.ts\nvar getPostThread_exports = {};\n__export(getPostThread_exports, {\n  NotFoundError: () => NotFoundError,\n  toKnownErr: () => toKnownErr74\n});\nvar NotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr74(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"NotFound\")\n      return new NotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getPosts.ts\nvar getPosts_exports = {};\n__export(getPosts_exports, {\n  toKnownErr: () => toKnownErr75\n});\nfunction toKnownErr75(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getRepostedBy.ts\nvar getRepostedBy_exports = {};\n__export(getRepostedBy_exports, {\n  toKnownErr: () => toKnownErr76\n});\nfunction toKnownErr76(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getTimeline.ts\nvar getTimeline_exports = {};\n__export(getTimeline_exports, {\n  toKnownErr: () => toKnownErr77\n});\nfunction toKnownErr77(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getBlocks.ts\nvar getBlocks_exports2 = {};\n__export(getBlocks_exports2, {\n  toKnownErr: () => toKnownErr78\n});\nfunction toKnownErr78(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getFollowers.ts\nvar getFollowers_exports = {};\n__export(getFollowers_exports, {\n  toKnownErr: () => toKnownErr79\n});\nfunction toKnownErr79(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getFollows.ts\nvar getFollows_exports = {};\n__export(getFollows_exports, {\n  toKnownErr: () => toKnownErr80\n});\nfunction toKnownErr80(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getList.ts\nvar getList_exports = {};\n__export(getList_exports, {\n  toKnownErr: () => toKnownErr81\n});\nfunction toKnownErr81(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getListMutes.ts\nvar getListMutes_exports = {};\n__export(getListMutes_exports, {\n  toKnownErr: () => toKnownErr82\n});\nfunction toKnownErr82(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getLists.ts\nvar getLists_exports = {};\n__export(getLists_exports, {\n  toKnownErr: () => toKnownErr83\n});\nfunction toKnownErr83(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getMutes.ts\nvar getMutes_exports = {};\n__export(getMutes_exports, {\n  toKnownErr: () => toKnownErr84\n});\nfunction toKnownErr84(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/muteActor.ts\nvar muteActor_exports = {};\n__export(muteActor_exports, {\n  toKnownErr: () => toKnownErr85\n});\nfunction toKnownErr85(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/muteActorList.ts\nvar muteActorList_exports = {};\n__export(muteActorList_exports, {\n  toKnownErr: () => toKnownErr86\n});\nfunction toKnownErr86(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/unmuteActor.ts\nvar unmuteActor_exports = {};\n__export(unmuteActor_exports, {\n  toKnownErr: () => toKnownErr87\n});\nfunction toKnownErr87(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/unmuteActorList.ts\nvar unmuteActorList_exports = {};\n__export(unmuteActorList_exports, {\n  toKnownErr: () => toKnownErr88\n});\nfunction toKnownErr88(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/notification/getUnreadCount.ts\nvar getUnreadCount_exports = {};\n__export(getUnreadCount_exports, {\n  toKnownErr: () => toKnownErr89\n});\nfunction toKnownErr89(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/notification/listNotifications.ts\nvar listNotifications_exports = {};\n__export(listNotifications_exports, {\n  isNotification: () => isNotification,\n  toKnownErr: () => toKnownErr90,\n  validateNotification: () => validateNotification\n});\nfunction toKnownErr90(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\nfunction isNotification(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.notification.listNotifications#notification\";\n}\nfunction validateNotification(v) {\n  return lexicons.validate(\n    \"app.bsky.notification.listNotifications#notification\",\n    v\n  );\n}\n\n// src/client/types/app/bsky/notification/updateSeen.ts\nvar updateSeen_exports = {};\n__export(updateSeen_exports, {\n  toKnownErr: () => toKnownErr91\n});\nfunction toKnownErr91(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/unspecced/applyLabels.ts\nvar applyLabels_exports = {};\n__export(applyLabels_exports, {\n  toKnownErr: () => toKnownErr92\n});\nfunction toKnownErr92(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/unspecced/getPopular.ts\nvar getPopular_exports = {};\n__export(getPopular_exports, {\n  toKnownErr: () => toKnownErr93\n});\nfunction toKnownErr93(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/unspecced/getPopularFeedGenerators.ts\nvar getPopularFeedGenerators_exports = {};\n__export(getPopularFeedGenerators_exports, {\n  toKnownErr: () => toKnownErr94\n});\nfunction toKnownErr94(e) {\n  if (e instanceof XRPCError) {\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/unspecced/getTimelineSkeleton.ts\nvar getTimelineSkeleton_exports = {};\n__export(getTimelineSkeleton_exports, {\n  UnknownFeedError: () => UnknownFeedError3,\n  toKnownErr: () => toKnownErr95\n});\nvar UnknownFeedError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message);\n  }\n};\nfunction toKnownErr95(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"UnknownFeed\")\n      return new UnknownFeedError3(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/defs.ts\nvar defs_exports = {};\n__export(defs_exports, {\n  ACKNOWLEDGE: () => ACKNOWLEDGE,\n  ESCALATE: () => ESCALATE,\n  FLAG: () => FLAG,\n  TAKEDOWN: () => TAKEDOWN,\n  isActionReversal: () => isActionReversal,\n  isActionView: () => isActionView,\n  isActionViewCurrent: () => isActionViewCurrent,\n  isActionViewDetail: () => isActionViewDetail,\n  isBlobView: () => isBlobView,\n  isImageDetails: () => isImageDetails,\n  isModeration: () => isModeration,\n  isModerationDetail: () => isModerationDetail,\n  isRecordView: () => isRecordView,\n  isRecordViewDetail: () => isRecordViewDetail,\n  isRecordViewNotFound: () => isRecordViewNotFound,\n  isRepoRef: () => isRepoRef,\n  isRepoView: () => isRepoView,\n  isRepoViewDetail: () => isRepoViewDetail,\n  isRepoViewNotFound: () => isRepoViewNotFound,\n  isReportView: () => isReportView,\n  isReportViewDetail: () => isReportViewDetail,\n  isVideoDetails: () => isVideoDetails,\n  validateActionReversal: () => validateActionReversal,\n  validateActionView: () => validateActionView,\n  validateActionViewCurrent: () => validateActionViewCurrent,\n  validateActionViewDetail: () => validateActionViewDetail,\n  validateBlobView: () => validateBlobView,\n  validateImageDetails: () => validateImageDetails,\n  validateModeration: () => validateModeration,\n  validateModerationDetail: () => validateModerationDetail,\n  validateRecordView: () => validateRecordView,\n  validateRecordViewDetail: () => validateRecordViewDetail,\n  validateRecordViewNotFound: () => validateRecordViewNotFound,\n  validateRepoRef: () => validateRepoRef,\n  validateRepoView: () => validateRepoView,\n  validateRepoViewDetail: () => validateRepoViewDetail,\n  validateRepoViewNotFound: () => validateRepoViewNotFound,\n  validateReportView: () => validateReportView,\n  validateReportViewDetail: () => validateReportViewDetail,\n  validateVideoDetails: () => validateVideoDetails\n});\nfunction isActionView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#actionView\";\n}\nfunction validateActionView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#actionView\", v);\n}\nfunction isActionViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#actionViewDetail\";\n}\nfunction validateActionViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#actionViewDetail\", v);\n}\nfunction isActionViewCurrent(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#actionViewCurrent\";\n}\nfunction validateActionViewCurrent(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#actionViewCurrent\", v);\n}\nfunction isActionReversal(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#actionReversal\";\n}\nfunction validateActionReversal(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#actionReversal\", v);\n}\nvar TAKEDOWN = \"com.atproto.admin.defs#takedown\";\nvar FLAG = \"com.atproto.admin.defs#flag\";\nvar ACKNOWLEDGE = \"com.atproto.admin.defs#acknowledge\";\nvar ESCALATE = \"com.atproto.admin.defs#escalate\";\nfunction isReportView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#reportView\";\n}\nfunction validateReportView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#reportView\", v);\n}\nfunction isReportViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#reportViewDetail\";\n}\nfunction validateReportViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#reportViewDetail\", v);\n}\nfunction isRepoView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoView\";\n}\nfunction validateRepoView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoView\", v);\n}\nfunction isRepoViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoViewDetail\";\n}\nfunction validateRepoViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoViewDetail\", v);\n}\nfunction isRepoViewNotFound(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoViewNotFound\";\n}\nfunction validateRepoViewNotFound(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoViewNotFound\", v);\n}\nfunction isRepoRef(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoRef\";\n}\nfunction validateRepoRef(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoRef\", v);\n}\nfunction isRecordView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#recordView\";\n}\nfunction validateRecordView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#recordView\", v);\n}\nfunction isRecordViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#recordViewDetail\";\n}\nfunction validateRecordViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#recordViewDetail\", v);\n}\nfunction isRecordViewNotFound(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#recordViewNotFound\";\n}\nfunction validateRecordViewNotFound(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#recordViewNotFound\", v);\n}\nfunction isModeration(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#moderation\";\n}\nfunction validateModeration(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#moderation\", v);\n}\nfunction isModerationDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#moderationDetail\";\n}\nfunction validateModerationDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#moderationDetail\", v);\n}\nfunction isBlobView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#blobView\";\n}\nfunction validateBlobView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#blobView\", v);\n}\nfunction isImageDetails(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#imageDetails\";\n}\nfunction validateImageDetails(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#imageDetails\", v);\n}\nfunction isVideoDetails(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#videoDetails\";\n}\nfunction validateVideoDetails(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#videoDetails\", v);\n}\n\n// src/client/types/com/atproto/label/defs.ts\nvar defs_exports2 = {};\n__export(defs_exports2, {\n  isLabel: () => isLabel,\n  isSelfLabel: () => isSelfLabel,\n  isSelfLabels: () => isSelfLabels,\n  validateLabel: () => validateLabel,\n  validateSelfLabel: () => validateSelfLabel,\n  validateSelfLabels: () => validateSelfLabels\n});\nfunction isLabel(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.defs#label\";\n}\nfunction validateLabel(v) {\n  return lexicons.validate(\"com.atproto.label.defs#label\", v);\n}\nfunction isSelfLabels(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.defs#selfLabels\";\n}\nfunction validateSelfLabels(v) {\n  return lexicons.validate(\"com.atproto.label.defs#selfLabels\", v);\n}\nfunction isSelfLabel(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.defs#selfLabel\";\n}\nfunction validateSelfLabel(v) {\n  return lexicons.validate(\"com.atproto.label.defs#selfLabel\", v);\n}\n\n// src/client/types/com/atproto/label/subscribeLabels.ts\nvar subscribeLabels_exports = {};\n__export(subscribeLabels_exports, {\n  isInfo: () => isInfo,\n  isLabels: () => isLabels,\n  validateInfo: () => validateInfo,\n  validateLabels: () => validateLabels\n});\nfunction isLabels(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.subscribeLabels#labels\";\n}\nfunction validateLabels(v) {\n  return lexicons.validate(\"com.atproto.label.subscribeLabels#labels\", v);\n}\nfunction isInfo(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.subscribeLabels#info\";\n}\nfunction validateInfo(v) {\n  return lexicons.validate(\"com.atproto.label.subscribeLabels#info\", v);\n}\n\n// src/client/types/com/atproto/moderation/defs.ts\nvar defs_exports3 = {};\n__export(defs_exports3, {\n  REASONMISLEADING: () => REASONMISLEADING,\n  REASONOTHER: () => REASONOTHER,\n  REASONRUDE: () => REASONRUDE,\n  REASONSEXUAL: () => REASONSEXUAL,\n  REASONSPAM: () => REASONSPAM,\n  REASONVIOLATION: () => REASONVIOLATION\n});\nvar REASONSPAM = \"com.atproto.moderation.defs#reasonSpam\";\nvar REASONVIOLATION = \"com.atproto.moderation.defs#reasonViolation\";\nvar REASONMISLEADING = \"com.atproto.moderation.defs#reasonMisleading\";\nvar REASONSEXUAL = \"com.atproto.moderation.defs#reasonSexual\";\nvar REASONRUDE = \"com.atproto.moderation.defs#reasonRude\";\nvar REASONOTHER = \"com.atproto.moderation.defs#reasonOther\";\n\n// src/client/types/com/atproto/repo/strongRef.ts\nvar strongRef_exports = {};\n__export(strongRef_exports, {\n  isMain: () => isMain,\n  validateMain: () => validateMain\n});\nfunction isMain(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"com.atproto.repo.strongRef#main\" || v.$type === \"com.atproto.repo.strongRef\");\n}\nfunction validateMain(v) {\n  return lexicons.validate(\"com.atproto.repo.strongRef#main\", v);\n}\n\n// src/client/types/com/atproto/server/defs.ts\nvar defs_exports4 = {};\n__export(defs_exports4, {\n  isInviteCode: () => isInviteCode,\n  isInviteCodeUse: () => isInviteCodeUse,\n  validateInviteCode: () => validateInviteCode,\n  validateInviteCodeUse: () => validateInviteCodeUse\n});\nfunction isInviteCode(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.defs#inviteCode\";\n}\nfunction validateInviteCode(v) {\n  return lexicons.validate(\"com.atproto.server.defs#inviteCode\", v);\n}\nfunction isInviteCodeUse(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.defs#inviteCodeUse\";\n}\nfunction validateInviteCodeUse(v) {\n  return lexicons.validate(\"com.atproto.server.defs#inviteCodeUse\", v);\n}\n\n// src/client/types/com/atproto/sync/subscribeRepos.ts\nvar subscribeRepos_exports = {};\n__export(subscribeRepos_exports, {\n  isCommit: () => isCommit,\n  isHandle: () => isHandle,\n  isInfo: () => isInfo2,\n  isMigrate: () => isMigrate,\n  isRepoOp: () => isRepoOp,\n  isTombstone: () => isTombstone,\n  validateCommit: () => validateCommit,\n  validateHandle: () => validateHandle,\n  validateInfo: () => validateInfo2,\n  validateMigrate: () => validateMigrate,\n  validateRepoOp: () => validateRepoOp,\n  validateTombstone: () => validateTombstone\n});\nfunction isCommit(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#commit\";\n}\nfunction validateCommit(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#commit\", v);\n}\nfunction isHandle(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#handle\";\n}\nfunction validateHandle(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#handle\", v);\n}\nfunction isMigrate(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#migrate\";\n}\nfunction validateMigrate(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#migrate\", v);\n}\nfunction isTombstone(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#tombstone\";\n}\nfunction validateTombstone(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#tombstone\", v);\n}\nfunction isInfo2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#info\";\n}\nfunction validateInfo2(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#info\", v);\n}\nfunction isRepoOp(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#repoOp\";\n}\nfunction validateRepoOp(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#repoOp\", v);\n}\n\n// src/client/types/app/bsky/actor/defs.ts\nvar defs_exports5 = {};\n__export(defs_exports5, {\n  isAdultContentPref: () => isAdultContentPref,\n  isContentLabelPref: () => isContentLabelPref,\n  isProfileView: () => isProfileView,\n  isProfileViewBasic: () => isProfileViewBasic,\n  isProfileViewDetailed: () => isProfileViewDetailed,\n  isSavedFeedsPref: () => isSavedFeedsPref,\n  isViewerState: () => isViewerState,\n  validateAdultContentPref: () => validateAdultContentPref,\n  validateContentLabelPref: () => validateContentLabelPref,\n  validateProfileView: () => validateProfileView,\n  validateProfileViewBasic: () => validateProfileViewBasic,\n  validateProfileViewDetailed: () => validateProfileViewDetailed,\n  validateSavedFeedsPref: () => validateSavedFeedsPref,\n  validateViewerState: () => validateViewerState\n});\nfunction isProfileViewBasic(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#profileViewBasic\";\n}\nfunction validateProfileViewBasic(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#profileViewBasic\", v);\n}\nfunction isProfileView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#profileView\";\n}\nfunction validateProfileView(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#profileView\", v);\n}\nfunction isProfileViewDetailed(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#profileViewDetailed\";\n}\nfunction validateProfileViewDetailed(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#profileViewDetailed\", v);\n}\nfunction isViewerState(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#viewerState\";\n}\nfunction validateViewerState(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#viewerState\", v);\n}\nfunction isAdultContentPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#adultContentPref\";\n}\nfunction validateAdultContentPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#adultContentPref\", v);\n}\nfunction isContentLabelPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#contentLabelPref\";\n}\nfunction validateContentLabelPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#contentLabelPref\", v);\n}\nfunction isSavedFeedsPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#savedFeedsPref\";\n}\nfunction validateSavedFeedsPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#savedFeedsPref\", v);\n}\n\n// src/client/types/app/bsky/actor/profile.ts\nvar profile_exports = {};\n__export(profile_exports, {\n  isRecord: () => isRecord2,\n  validateRecord: () => validateRecord2\n});\nfunction isRecord2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.actor.profile#main\" || v.$type === \"app.bsky.actor.profile\");\n}\nfunction validateRecord2(v) {\n  return lexicons.validate(\"app.bsky.actor.profile#main\", v);\n}\n\n// src/client/types/app/bsky/embed/external.ts\nvar external_exports = {};\n__export(external_exports, {\n  isExternal: () => isExternal,\n  isMain: () => isMain2,\n  isView: () => isView,\n  isViewExternal: () => isViewExternal,\n  validateExternal: () => validateExternal,\n  validateMain: () => validateMain2,\n  validateView: () => validateView,\n  validateViewExternal: () => validateViewExternal\n});\nfunction isMain2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.external#main\" || v.$type === \"app.bsky.embed.external\");\n}\nfunction validateMain2(v) {\n  return lexicons.validate(\"app.bsky.embed.external#main\", v);\n}\nfunction isExternal(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.external#external\";\n}\nfunction validateExternal(v) {\n  return lexicons.validate(\"app.bsky.embed.external#external\", v);\n}\nfunction isView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.external#view\";\n}\nfunction validateView(v) {\n  return lexicons.validate(\"app.bsky.embed.external#view\", v);\n}\nfunction isViewExternal(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.external#viewExternal\";\n}\nfunction validateViewExternal(v) {\n  return lexicons.validate(\"app.bsky.embed.external#viewExternal\", v);\n}\n\n// src/client/types/app/bsky/embed/images.ts\nvar images_exports = {};\n__export(images_exports, {\n  isImage: () => isImage,\n  isMain: () => isMain3,\n  isView: () => isView2,\n  isViewImage: () => isViewImage,\n  validateImage: () => validateImage,\n  validateMain: () => validateMain3,\n  validateView: () => validateView2,\n  validateViewImage: () => validateViewImage\n});\nfunction isMain3(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.images#main\" || v.$type === \"app.bsky.embed.images\");\n}\nfunction validateMain3(v) {\n  return lexicons.validate(\"app.bsky.embed.images#main\", v);\n}\nfunction isImage(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.images#image\";\n}\nfunction validateImage(v) {\n  return lexicons.validate(\"app.bsky.embed.images#image\", v);\n}\nfunction isView2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.images#view\";\n}\nfunction validateView2(v) {\n  return lexicons.validate(\"app.bsky.embed.images#view\", v);\n}\nfunction isViewImage(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.images#viewImage\";\n}\nfunction validateViewImage(v) {\n  return lexicons.validate(\"app.bsky.embed.images#viewImage\", v);\n}\n\n// src/client/types/app/bsky/embed/record.ts\nvar record_exports = {};\n__export(record_exports, {\n  isMain: () => isMain4,\n  isView: () => isView3,\n  isViewBlocked: () => isViewBlocked,\n  isViewNotFound: () => isViewNotFound,\n  isViewRecord: () => isViewRecord,\n  validateMain: () => validateMain4,\n  validateView: () => validateView3,\n  validateViewBlocked: () => validateViewBlocked,\n  validateViewNotFound: () => validateViewNotFound,\n  validateViewRecord: () => validateViewRecord\n});\nfunction isMain4(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.record#main\" || v.$type === \"app.bsky.embed.record\");\n}\nfunction validateMain4(v) {\n  return lexicons.validate(\"app.bsky.embed.record#main\", v);\n}\nfunction isView3(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#view\";\n}\nfunction validateView3(v) {\n  return lexicons.validate(\"app.bsky.embed.record#view\", v);\n}\nfunction isViewRecord(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#viewRecord\";\n}\nfunction validateViewRecord(v) {\n  return lexicons.validate(\"app.bsky.embed.record#viewRecord\", v);\n}\nfunction isViewNotFound(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#viewNotFound\";\n}\nfunction validateViewNotFound(v) {\n  return lexicons.validate(\"app.bsky.embed.record#viewNotFound\", v);\n}\nfunction isViewBlocked(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#viewBlocked\";\n}\nfunction validateViewBlocked(v) {\n  return lexicons.validate(\"app.bsky.embed.record#viewBlocked\", v);\n}\n\n// src/client/types/app/bsky/embed/recordWithMedia.ts\nvar recordWithMedia_exports = {};\n__export(recordWithMedia_exports, {\n  isMain: () => isMain5,\n  isView: () => isView4,\n  validateMain: () => validateMain5,\n  validateView: () => validateView4\n});\nfunction isMain5(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.recordWithMedia#main\" || v.$type === \"app.bsky.embed.recordWithMedia\");\n}\nfunction validateMain5(v) {\n  return lexicons.validate(\"app.bsky.embed.recordWithMedia#main\", v);\n}\nfunction isView4(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.recordWithMedia#view\";\n}\nfunction validateView4(v) {\n  return lexicons.validate(\"app.bsky.embed.recordWithMedia#view\", v);\n}\n\n// src/client/types/app/bsky/feed/defs.ts\nvar defs_exports6 = {};\n__export(defs_exports6, {\n  isBlockedPost: () => isBlockedPost,\n  isFeedViewPost: () => isFeedViewPost,\n  isGeneratorView: () => isGeneratorView,\n  isGeneratorViewerState: () => isGeneratorViewerState,\n  isNotFoundPost: () => isNotFoundPost,\n  isPostView: () => isPostView,\n  isReasonRepost: () => isReasonRepost,\n  isReplyRef: () => isReplyRef,\n  isSkeletonFeedPost: () => isSkeletonFeedPost,\n  isSkeletonReasonRepost: () => isSkeletonReasonRepost,\n  isThreadViewPost: () => isThreadViewPost,\n  isViewerState: () => isViewerState2,\n  validateBlockedPost: () => validateBlockedPost,\n  validateFeedViewPost: () => validateFeedViewPost,\n  validateGeneratorView: () => validateGeneratorView,\n  validateGeneratorViewerState: () => validateGeneratorViewerState,\n  validateNotFoundPost: () => validateNotFoundPost,\n  validatePostView: () => validatePostView,\n  validateReasonRepost: () => validateReasonRepost,\n  validateReplyRef: () => validateReplyRef,\n  validateSkeletonFeedPost: () => validateSkeletonFeedPost,\n  validateSkeletonReasonRepost: () => validateSkeletonReasonRepost,\n  validateThreadViewPost: () => validateThreadViewPost,\n  validateViewerState: () => validateViewerState2\n});\nfunction isPostView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#postView\";\n}\nfunction validatePostView(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#postView\", v);\n}\nfunction isViewerState2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#viewerState\";\n}\nfunction validateViewerState2(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#viewerState\", v);\n}\nfunction isFeedViewPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#feedViewPost\";\n}\nfunction validateFeedViewPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#feedViewPost\", v);\n}\nfunction isReplyRef(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#replyRef\";\n}\nfunction validateReplyRef(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#replyRef\", v);\n}\nfunction isReasonRepost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#reasonRepost\";\n}\nfunction validateReasonRepost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#reasonRepost\", v);\n}\nfunction isThreadViewPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#threadViewPost\";\n}\nfunction validateThreadViewPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#threadViewPost\", v);\n}\nfunction isNotFoundPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#notFoundPost\";\n}\nfunction validateNotFoundPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#notFoundPost\", v);\n}\nfunction isBlockedPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#blockedPost\";\n}\nfunction validateBlockedPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#blockedPost\", v);\n}\nfunction isGeneratorView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#generatorView\";\n}\nfunction validateGeneratorView(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#generatorView\", v);\n}\nfunction isGeneratorViewerState(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#generatorViewerState\";\n}\nfunction validateGeneratorViewerState(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#generatorViewerState\", v);\n}\nfunction isSkeletonFeedPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#skeletonFeedPost\";\n}\nfunction validateSkeletonFeedPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#skeletonFeedPost\", v);\n}\nfunction isSkeletonReasonRepost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#skeletonReasonRepost\";\n}\nfunction validateSkeletonReasonRepost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#skeletonReasonRepost\", v);\n}\n\n// src/client/types/app/bsky/feed/generator.ts\nvar generator_exports = {};\n__export(generator_exports, {\n  isRecord: () => isRecord3,\n  validateRecord: () => validateRecord3\n});\nfunction isRecord3(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.generator#main\" || v.$type === \"app.bsky.feed.generator\");\n}\nfunction validateRecord3(v) {\n  return lexicons.validate(\"app.bsky.feed.generator#main\", v);\n}\n\n// src/client/types/app/bsky/feed/like.ts\nvar like_exports = {};\n__export(like_exports, {\n  isRecord: () => isRecord4,\n  validateRecord: () => validateRecord4\n});\nfunction isRecord4(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.like#main\" || v.$type === \"app.bsky.feed.like\");\n}\nfunction validateRecord4(v) {\n  return lexicons.validate(\"app.bsky.feed.like#main\", v);\n}\n\n// src/client/types/app/bsky/feed/post.ts\nvar post_exports = {};\n__export(post_exports, {\n  isEntity: () => isEntity,\n  isRecord: () => isRecord5,\n  isReplyRef: () => isReplyRef2,\n  isTextSlice: () => isTextSlice,\n  validateEntity: () => validateEntity,\n  validateRecord: () => validateRecord5,\n  validateReplyRef: () => validateReplyRef2,\n  validateTextSlice: () => validateTextSlice\n});\nfunction isRecord5(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.post#main\" || v.$type === \"app.bsky.feed.post\");\n}\nfunction validateRecord5(v) {\n  return lexicons.validate(\"app.bsky.feed.post#main\", v);\n}\nfunction isReplyRef2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.post#replyRef\";\n}\nfunction validateReplyRef2(v) {\n  return lexicons.validate(\"app.bsky.feed.post#replyRef\", v);\n}\nfunction isEntity(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.post#entity\";\n}\nfunction validateEntity(v) {\n  return lexicons.validate(\"app.bsky.feed.post#entity\", v);\n}\nfunction isTextSlice(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.post#textSlice\";\n}\nfunction validateTextSlice(v) {\n  return lexicons.validate(\"app.bsky.feed.post#textSlice\", v);\n}\n\n// src/client/types/app/bsky/feed/repost.ts\nvar repost_exports = {};\n__export(repost_exports, {\n  isRecord: () => isRecord6,\n  validateRecord: () => validateRecord6\n});\nfunction isRecord6(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.repost#main\" || v.$type === \"app.bsky.feed.repost\");\n}\nfunction validateRecord6(v) {\n  return lexicons.validate(\"app.bsky.feed.repost#main\", v);\n}\n\n// src/client/types/app/bsky/graph/block.ts\nvar block_exports = {};\n__export(block_exports, {\n  isRecord: () => isRecord7,\n  validateRecord: () => validateRecord7\n});\nfunction isRecord7(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.block#main\" || v.$type === \"app.bsky.graph.block\");\n}\nfunction validateRecord7(v) {\n  return lexicons.validate(\"app.bsky.graph.block#main\", v);\n}\n\n// src/client/types/app/bsky/graph/defs.ts\nvar defs_exports7 = {};\n__export(defs_exports7, {\n  MODLIST: () => MODLIST,\n  isListItemView: () => isListItemView,\n  isListView: () => isListView,\n  isListViewBasic: () => isListViewBasic,\n  isListViewerState: () => isListViewerState,\n  validateListItemView: () => validateListItemView,\n  validateListView: () => validateListView,\n  validateListViewBasic: () => validateListViewBasic,\n  validateListViewerState: () => validateListViewerState\n});\nfunction isListViewBasic(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listViewBasic\";\n}\nfunction validateListViewBasic(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listViewBasic\", v);\n}\nfunction isListView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listView\";\n}\nfunction validateListView(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listView\", v);\n}\nfunction isListItemView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listItemView\";\n}\nfunction validateListItemView(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listItemView\", v);\n}\nvar MODLIST = \"app.bsky.graph.defs#modlist\";\nfunction isListViewerState(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listViewerState\";\n}\nfunction validateListViewerState(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listViewerState\", v);\n}\n\n// src/client/types/app/bsky/graph/follow.ts\nvar follow_exports = {};\n__export(follow_exports, {\n  isRecord: () => isRecord8,\n  validateRecord: () => validateRecord8\n});\nfunction isRecord8(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.follow#main\" || v.$type === \"app.bsky.graph.follow\");\n}\nfunction validateRecord8(v) {\n  return lexicons.validate(\"app.bsky.graph.follow#main\", v);\n}\n\n// src/client/types/app/bsky/graph/list.ts\nvar list_exports = {};\n__export(list_exports, {\n  isRecord: () => isRecord9,\n  validateRecord: () => validateRecord9\n});\nfunction isRecord9(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.list#main\" || v.$type === \"app.bsky.graph.list\");\n}\nfunction validateRecord9(v) {\n  return lexicons.validate(\"app.bsky.graph.list#main\", v);\n}\n\n// src/client/types/app/bsky/graph/listitem.ts\nvar listitem_exports = {};\n__export(listitem_exports, {\n  isRecord: () => isRecord10,\n  validateRecord: () => validateRecord10\n});\nfunction isRecord10(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.listitem#main\" || v.$type === \"app.bsky.graph.listitem\");\n}\nfunction validateRecord10(v) {\n  return lexicons.validate(\"app.bsky.graph.listitem#main\", v);\n}\n\n// src/client/types/app/bsky/richtext/facet.ts\nvar facet_exports = {};\n__export(facet_exports, {\n  isByteSlice: () => isByteSlice,\n  isLink: () => isLink,\n  isMain: () => isMain6,\n  isMention: () => isMention,\n  validateByteSlice: () => validateByteSlice,\n  validateLink: () => validateLink,\n  validateMain: () => validateMain6,\n  validateMention: () => validateMention\n});\nfunction isMain6(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.richtext.facet#main\" || v.$type === \"app.bsky.richtext.facet\");\n}\nfunction validateMain6(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#main\", v);\n}\nfunction isMention(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.richtext.facet#mention\";\n}\nfunction validateMention(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#mention\", v);\n}\nfunction isLink(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.richtext.facet#link\";\n}\nfunction validateLink(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#link\", v);\n}\nfunction isByteSlice(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.richtext.facet#byteSlice\";\n}\nfunction validateByteSlice(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#byteSlice\", v);\n}\n\n// src/client/index.ts\nvar COM_ATPROTO_ADMIN = {\n  DefsTakedown: \"com.atproto.admin.defs#takedown\",\n  DefsFlag: \"com.atproto.admin.defs#flag\",\n  DefsAcknowledge: \"com.atproto.admin.defs#acknowledge\",\n  DefsEscalate: \"com.atproto.admin.defs#escalate\"\n};\nvar COM_ATPROTO_MODERATION = {\n  DefsReasonSpam: \"com.atproto.moderation.defs#reasonSpam\",\n  DefsReasonViolation: \"com.atproto.moderation.defs#reasonViolation\",\n  DefsReasonMisleading: \"com.atproto.moderation.defs#reasonMisleading\",\n  DefsReasonSexual: \"com.atproto.moderation.defs#reasonSexual\",\n  DefsReasonRude: \"com.atproto.moderation.defs#reasonRude\",\n  DefsReasonOther: \"com.atproto.moderation.defs#reasonOther\"\n};\nvar APP_BSKY_GRAPH = {\n  DefsModlist: \"app.bsky.graph.defs#modlist\"\n};\nvar AtpBaseClient = class {\n  constructor() {\n    this.xrpc = new Client();\n    this.xrpc.addLexicons(schemas);\n  }\n  service(serviceUri) {\n    return new AtpServiceClient(this, this.xrpc.service(serviceUri));\n  }\n};\nvar AtpServiceClient = class {\n  constructor(baseClient, xrpcService) {\n    this._baseClient = baseClient;\n    this.xrpc = xrpcService;\n    this.com = new ComNS(this);\n    this.app = new AppNS(this);\n  }\n  setHeader(key, value) {\n    this.xrpc.setHeader(key, value);\n  }\n};\nvar ComNS = class {\n  constructor(service) {\n    this._service = service;\n    this.atproto = new AtprotoNS(service);\n  }\n};\nvar AtprotoNS = class {\n  constructor(service) {\n    this._service = service;\n    this.admin = new AdminNS(service);\n    this.identity = new IdentityNS(service);\n    this.label = new LabelNS(service);\n    this.moderation = new ModerationNS(service);\n    this.repo = new RepoNS(service);\n    this.server = new ServerNS(service);\n    this.sync = new SyncNS(service);\n  }\n};\nvar AdminNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  disableAccountInvites(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.disableAccountInvites\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr(e);\n    });\n  }\n  disableInviteCodes(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.disableInviteCodes\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr2(e);\n    });\n  }\n  enableAccountInvites(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.enableAccountInvites\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr3(e);\n    });\n  }\n  getInviteCodes(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getInviteCodes\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr4(e);\n    });\n  }\n  getModerationAction(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getModerationAction\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr5(e);\n    });\n  }\n  getModerationActions(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getModerationActions\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr6(e);\n    });\n  }\n  getModerationReport(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getModerationReport\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr7(e);\n    });\n  }\n  getModerationReports(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getModerationReports\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr8(e);\n    });\n  }\n  getRecord(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getRecord\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr9(e);\n    });\n  }\n  getRepo(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getRepo\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr10(e);\n    });\n  }\n  rebaseRepo(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.rebaseRepo\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr11(e);\n    });\n  }\n  resolveModerationReports(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.resolveModerationReports\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr12(e);\n    });\n  }\n  reverseModerationAction(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.reverseModerationAction\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr13(e);\n    });\n  }\n  searchRepos(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.searchRepos\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr14(e);\n    });\n  }\n  sendEmail(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.sendEmail\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr15(e);\n    });\n  }\n  takeModerationAction(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.takeModerationAction\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr16(e);\n    });\n  }\n  updateAccountEmail(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.updateAccountEmail\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr17(e);\n    });\n  }\n  updateAccountHandle(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.updateAccountHandle\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr18(e);\n    });\n  }\n};\nvar IdentityNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  resolveHandle(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.identity.resolveHandle\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr19(e);\n    });\n  }\n  updateHandle(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.identity.updateHandle\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr20(e);\n    });\n  }\n};\nvar LabelNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  queryLabels(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.label.queryLabels\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr21(e);\n    });\n  }\n};\nvar ModerationNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  createReport(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.moderation.createReport\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr22(e);\n    });\n  }\n};\nvar RepoNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  applyWrites(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.applyWrites\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr23(e);\n    });\n  }\n  createRecord(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.createRecord\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr24(e);\n    });\n  }\n  deleteRecord(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr25(e);\n    });\n  }\n  describeRepo(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.describeRepo\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr26(e);\n    });\n  }\n  getRecord(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.getRecord\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr27(e);\n    });\n  }\n  listRecords(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.listRecords\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr28(e);\n    });\n  }\n  putRecord(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.putRecord\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr29(e);\n    });\n  }\n  rebaseRepo(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.rebaseRepo\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr30(e);\n    });\n  }\n  uploadBlob(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.uploadBlob\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr31(e);\n    });\n  }\n};\nvar ServerNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  createAccount(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createAccount\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr32(e);\n    });\n  }\n  createAppPassword(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createAppPassword\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr33(e);\n    });\n  }\n  createInviteCode(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createInviteCode\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr34(e);\n    });\n  }\n  createInviteCodes(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createInviteCodes\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr35(e);\n    });\n  }\n  createSession(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createSession\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr36(e);\n    });\n  }\n  deleteAccount(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.deleteAccount\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr37(e);\n    });\n  }\n  deleteSession(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.deleteSession\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr38(e);\n    });\n  }\n  describeServer(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.describeServer\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr39(e);\n    });\n  }\n  getAccountInviteCodes(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.getAccountInviteCodes\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr40(e);\n    });\n  }\n  getSession(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.getSession\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr41(e);\n    });\n  }\n  listAppPasswords(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.listAppPasswords\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr42(e);\n    });\n  }\n  refreshSession(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.refreshSession\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr43(e);\n    });\n  }\n  requestAccountDelete(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.requestAccountDelete\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr44(e);\n    });\n  }\n  requestPasswordReset(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.requestPasswordReset\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr45(e);\n    });\n  }\n  resetPassword(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.resetPassword\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr46(e);\n    });\n  }\n  revokeAppPassword(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.revokeAppPassword\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr47(e);\n    });\n  }\n};\nvar SyncNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  getBlob(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getBlob\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr48(e);\n    });\n  }\n  getBlocks(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getBlocks\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr49(e);\n    });\n  }\n  getCheckout(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getCheckout\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr50(e);\n    });\n  }\n  getCommitPath(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getCommitPath\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr51(e);\n    });\n  }\n  getHead(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getHead\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr52(e);\n    });\n  }\n  getRecord(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getRecord\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr53(e);\n    });\n  }\n  getRepo(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getRepo\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr54(e);\n    });\n  }\n  listBlobs(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.listBlobs\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr55(e);\n    });\n  }\n  listRepos(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.listRepos\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr56(e);\n    });\n  }\n  notifyOfUpdate(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.notifyOfUpdate\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr57(e);\n    });\n  }\n  requestCrawl(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.requestCrawl\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr58(e);\n    });\n  }\n};\nvar AppNS = class {\n  constructor(service) {\n    this._service = service;\n    this.bsky = new BskyNS(service);\n  }\n};\nvar BskyNS = class {\n  constructor(service) {\n    this._service = service;\n    this.actor = new ActorNS(service);\n    this.embed = new EmbedNS(service);\n    this.feed = new FeedNS(service);\n    this.graph = new GraphNS(service);\n    this.notification = new NotificationNS(service);\n    this.richtext = new RichtextNS(service);\n    this.unspecced = new UnspeccedNS(service);\n  }\n};\nvar ActorNS = class {\n  constructor(service) {\n    this._service = service;\n    this.profile = new ProfileRecord(service);\n  }\n  getPreferences(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getPreferences\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr59(e);\n    });\n  }\n  getProfile(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getProfile\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr60(e);\n    });\n  }\n  getProfiles(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getProfiles\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr61(e);\n    });\n  }\n  getSuggestions(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getSuggestions\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr62(e);\n    });\n  }\n  putPreferences(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.putPreferences\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr63(e);\n    });\n  }\n  searchActors(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.searchActors\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr64(e);\n    });\n  }\n  searchActorsTypeahead(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.searchActorsTypeahead\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr65(e);\n    });\n  }\n};\nvar ProfileRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.actor.profile\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.actor.profile\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.actor.profile\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.actor.profile\", rkey: \"self\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.actor.profile\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar EmbedNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n};\nvar FeedNS = class {\n  constructor(service) {\n    this._service = service;\n    this.generator = new GeneratorRecord(service);\n    this.like = new LikeRecord(service);\n    this.post = new PostRecord(service);\n    this.repost = new RepostRecord(service);\n  }\n  describeFeedGenerator(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.describeFeedGenerator\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr66(e);\n    });\n  }\n  getActorFeeds(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getActorFeeds\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr67(e);\n    });\n  }\n  getAuthorFeed(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getAuthorFeed\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr68(e);\n    });\n  }\n  getFeed(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeed\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr69(e);\n    });\n  }\n  getFeedGenerator(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeedGenerator\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr70(e);\n    });\n  }\n  getFeedGenerators(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeedGenerators\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr71(e);\n    });\n  }\n  getFeedSkeleton(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeedSkeleton\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr72(e);\n    });\n  }\n  getLikes(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getLikes\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr73(e);\n    });\n  }\n  getPostThread(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getPostThread\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr74(e);\n    });\n  }\n  getPosts(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getPosts\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr75(e);\n    });\n  }\n  getRepostedBy(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getRepostedBy\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr76(e);\n    });\n  }\n  getTimeline(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getTimeline\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr77(e);\n    });\n  }\n};\nvar GeneratorRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.generator\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.generator\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.generator\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.generator\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.generator\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar LikeRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.like\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.like\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.like\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.like\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.like\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar PostRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.post\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.post\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.post\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.post\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.post\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar RepostRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.repost\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.repost\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.repost\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.repost\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.feed.repost\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar GraphNS = class {\n  constructor(service) {\n    this._service = service;\n    this.block = new BlockRecord(service);\n    this.follow = new FollowRecord(service);\n    this.list = new ListRecord(service);\n    this.listitem = new ListitemRecord(service);\n  }\n  getBlocks(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getBlocks\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr78(e);\n    });\n  }\n  getFollowers(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getFollowers\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr79(e);\n    });\n  }\n  getFollows(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getFollows\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr80(e);\n    });\n  }\n  getList(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getList\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr81(e);\n    });\n  }\n  getListMutes(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getListMutes\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr82(e);\n    });\n  }\n  getLists(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getLists\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr83(e);\n    });\n  }\n  getMutes(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getMutes\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr84(e);\n    });\n  }\n  muteActor(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.muteActor\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr85(e);\n    });\n  }\n  muteActorList(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.muteActorList\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr86(e);\n    });\n  }\n  unmuteActor(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.unmuteActor\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr87(e);\n    });\n  }\n  unmuteActorList(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.unmuteActorList\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr88(e);\n    });\n  }\n};\nvar BlockRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.block\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.block\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.block\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.block\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.block\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar FollowRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.follow\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.follow\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.follow\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.follow\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.follow\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar ListRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.list\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.list\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.list\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.list\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.list\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar ListitemRecord = class {\n  constructor(service) {\n    this._service = service;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.listitem\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.listitem\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.listitem\";\n    const res = await this._service.xrpc.call(\n      \"com.atproto.repo.createRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.listitem\", ...params2, record },\n      { encoding: \"application/json\", headers }\n    );\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\n      \"com.atproto.repo.deleteRecord\",\n      void 0,\n      { collection: \"app.bsky.graph.listitem\", ...params2 },\n      { headers }\n    );\n  }\n};\nvar NotificationNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  getUnreadCount(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.notification.getUnreadCount\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr89(e);\n    });\n  }\n  listNotifications(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.notification.listNotifications\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr90(e);\n    });\n  }\n  updateSeen(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.notification.updateSeen\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr91(e);\n    });\n  }\n};\nvar RichtextNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n};\nvar UnspeccedNS = class {\n  constructor(service) {\n    this._service = service;\n  }\n  applyLabels(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.unspecced.applyLabels\", opts?.qp, data, opts).catch((e) => {\n      throw toKnownErr92(e);\n    });\n  }\n  getPopular(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.unspecced.getPopular\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr93(e);\n    });\n  }\n  getPopularFeedGenerators(params2, opts) {\n    return this._service.xrpc.call(\n      \"app.bsky.unspecced.getPopularFeedGenerators\",\n      params2,\n      void 0,\n      opts\n    ).catch((e) => {\n      throw toKnownErr94(e);\n    });\n  }\n  getTimelineSkeleton(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.unspecced.getTimelineSkeleton\", params2, void 0, opts).catch((e) => {\n      throw toKnownErr95(e);\n    });\n  }\n};\n\n// src/agent.ts\nvar REFRESH_SESSION = \"com.atproto.server.refreshSession\";\nvar _AtpAgent = class {\n  constructor(opts) {\n    this.uploadBlob = (data, opts) => this.api.com.atproto.repo.uploadBlob(data, opts);\n    this.resolveHandle = (params2, opts) => this.api.com.atproto.identity.resolveHandle(params2, opts);\n    this.updateHandle = (data, opts) => this.api.com.atproto.identity.updateHandle(data, opts);\n    this.createModerationReport = (data, opts) => this.api.com.atproto.moderation.createReport(data, opts);\n    this.service = opts.service instanceof URL ? opts.service : new URL(opts.service);\n    this._persistSession = opts.persistSession;\n    this._baseClient = new AtpBaseClient();\n    this._baseClient.xrpc.fetch = this._fetch.bind(this);\n    this.api = this._baseClient.service(opts.service);\n  }\n  get com() {\n    return this.api.com;\n  }\n  static configure(opts) {\n    _AtpAgent.fetch = opts.fetch;\n  }\n  get hasSession() {\n    return !!this.session;\n  }\n  setPersistSessionHandler(handler) {\n    this._persistSession = handler;\n  }\n  async createAccount(opts) {\n    try {\n      const res = await this.api.com.atproto.server.createAccount({\n        handle: opts.handle,\n        password: opts.password,\n        email: opts.email,\n        inviteCode: opts.inviteCode\n      });\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: opts.email\n      };\n      return res;\n    } catch (e) {\n      this.session = void 0;\n      throw e;\n    } finally {\n      if (this.session) {\n        this._persistSession?.(\"create\", this.session);\n      } else {\n        this._persistSession?.(\"create-failed\", void 0);\n      }\n    }\n  }\n  async login(opts) {\n    try {\n      const res = await this.api.com.atproto.server.createSession({\n        identifier: opts.identifier,\n        password: opts.password\n      });\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: res.data.email\n      };\n      return res;\n    } catch (e) {\n      this.session = void 0;\n      throw e;\n    } finally {\n      if (this.session) {\n        this._persistSession?.(\"create\", this.session);\n      } else {\n        this._persistSession?.(\"create-failed\", void 0);\n      }\n    }\n  }\n  async resumeSession(session) {\n    try {\n      this.session = session;\n      const res = await this.api.com.atproto.server.getSession();\n      if (!res.success || res.data.did !== this.session.did) {\n        throw new Error(\"Invalid session\");\n      }\n      this.session.email = res.data.email;\n      this.session.handle = res.data.handle;\n      return res;\n    } catch (e) {\n      this.session = void 0;\n      throw e;\n    } finally {\n      if (this.session) {\n        this._persistSession?.(\"create\", this.session);\n      } else {\n        this._persistSession?.(\"create-failed\", void 0);\n      }\n    }\n  }\n  _addAuthHeader(reqHeaders) {\n    if (!reqHeaders.authorization && this.session?.accessJwt) {\n      return {\n        ...reqHeaders,\n        authorization: `Bearer ${this.session.accessJwt}`\n      };\n    }\n    return reqHeaders;\n  }\n  async _fetch(reqUri, reqMethod, reqHeaders, reqBody) {\n    if (!_AtpAgent.fetch) {\n      throw new Error(\"AtpAgent fetch() method not configured\");\n    }\n    await this._refreshSessionPromise;\n    let res = await _AtpAgent.fetch(\n      reqUri,\n      reqMethod,\n      this._addAuthHeader(reqHeaders),\n      reqBody\n    );\n    if (isErrorResponse(res, [\"ExpiredToken\"]) && this.session?.refreshJwt) {\n      await this._refreshSession();\n      res = await _AtpAgent.fetch(\n        reqUri,\n        reqMethod,\n        this._addAuthHeader(reqHeaders),\n        reqBody\n      );\n    }\n    return res;\n  }\n  async _refreshSession() {\n    if (this._refreshSessionPromise) {\n      return this._refreshSessionPromise;\n    }\n    this._refreshSessionPromise = this._refreshSessionInner();\n    try {\n      await this._refreshSessionPromise;\n    } finally {\n      this._refreshSessionPromise = void 0;\n    }\n  }\n  async _refreshSessionInner() {\n    if (!_AtpAgent.fetch) {\n      throw new Error(\"AtpAgent fetch() method not configured\");\n    }\n    if (!this.session?.refreshJwt) {\n      return;\n    }\n    const url = new URL(this.service.origin);\n    url.pathname = `/xrpc/${REFRESH_SESSION}`;\n    const res = await _AtpAgent.fetch(\n      url.toString(),\n      \"POST\",\n      {\n        authorization: `Bearer ${this.session.refreshJwt}`\n      },\n      void 0\n    );\n    if (isErrorResponse(res, [\"ExpiredToken\", \"InvalidToken\"])) {\n      this.session = void 0;\n      this._persistSession?.(\"expired\", void 0);\n    } else if (isNewSessionObject(this._baseClient, res.body)) {\n      this.session = {\n        accessJwt: res.body.accessJwt,\n        refreshJwt: res.body.refreshJwt,\n        handle: res.body.handle,\n        did: res.body.did\n      };\n      this._persistSession?.(\"update\", this.session);\n    }\n  }\n};\nvar AtpAgent = _AtpAgent;\nAtpAgent.fetch = defaultFetchHandler;\nfunction isErrorObject(v) {\n  return errorResponseBody.safeParse(v).success;\n}\nfunction isErrorResponse(res, errorNames) {\n  if (res.status !== 400) {\n    return false;\n  }\n  if (!isErrorObject(res.body)) {\n    return false;\n  }\n  return typeof res.body.error === \"string\" && errorNames.includes(res.body.error);\n}\nfunction isNewSessionObject(client, v) {\n  try {\n    client.xrpc.lex.assertValidXrpcOutput(\n      \"com.atproto.server.refreshSession\",\n      v\n    );\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/rich-text/unicode.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar UnicodeString = class {\n  constructor(utf16) {\n    this.utf16 = utf16;\n    this.utf8 = encoder.encode(utf16);\n  }\n  get length() {\n    return this.utf8.byteLength;\n  }\n  get graphemeLength() {\n    if (!this._graphemeLen) {\n      this._graphemeLen = graphemeLen(this.utf16);\n    }\n    return this._graphemeLen;\n  }\n  slice(start, end) {\n    return decoder.decode(this.utf8.slice(start, end));\n  }\n  utf16IndexToUtf8Index(i) {\n    return encoder.encode(this.utf16.slice(0, i)).byteLength;\n  }\n  toString() {\n    return this.utf16;\n  }\n};\n\n// src/rich-text/sanitization.ts\nvar EXCESS_SPACE_RE = /[\\r\\n]([\\u00AD\\u2060\\u200D\\u200C\\u200B\\s]*[\\r\\n]){2,}/;\nvar REPLACEMENT_STR = \"\\n\\n\";\nfunction sanitizeRichText(richText, opts) {\n  if (opts.cleanNewlines) {\n    richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);\n  }\n  return richText;\n}\nfunction clean(richText, targetRegexp, replacementString) {\n  richText = richText.clone();\n  let match = richText.unicodeText.utf16.match(targetRegexp);\n  while (match && typeof match.index !== \"undefined\") {\n    const oldText = richText.unicodeText;\n    const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(\n      match.index\n    );\n    const removeEndIndex = removeStartIndex + new UnicodeString(match[0]).length;\n    richText.delete(removeStartIndex, removeEndIndex);\n    if (richText.unicodeText.utf16 === oldText.utf16) {\n      break;\n    }\n    richText.insert(removeStartIndex, replacementString);\n    match = richText.unicodeText.utf16.match(targetRegexp);\n  }\n  return richText;\n}\n\n// ../../node_modules/tlds/index.json\nvar tlds_default = [\n  \"aaa\",\n  \"aarp\",\n  \"abarth\",\n  \"abb\",\n  \"abbott\",\n  \"abbvie\",\n  \"abc\",\n  \"able\",\n  \"abogado\",\n  \"abudhabi\",\n  \"ac\",\n  \"academy\",\n  \"accenture\",\n  \"accountant\",\n  \"accountants\",\n  \"aco\",\n  \"actor\",\n  \"ad\",\n  \"ads\",\n  \"adult\",\n  \"ae\",\n  \"aeg\",\n  \"aero\",\n  \"aetna\",\n  \"af\",\n  \"afl\",\n  \"africa\",\n  \"ag\",\n  \"agakhan\",\n  \"agency\",\n  \"ai\",\n  \"aig\",\n  \"airbus\",\n  \"airforce\",\n  \"airtel\",\n  \"akdn\",\n  \"al\",\n  \"alfaromeo\",\n  \"alibaba\",\n  \"alipay\",\n  \"allfinanz\",\n  \"allstate\",\n  \"ally\",\n  \"alsace\",\n  \"alstom\",\n  \"am\",\n  \"amazon\",\n  \"americanexpress\",\n  \"americanfamily\",\n  \"amex\",\n  \"amfam\",\n  \"amica\",\n  \"amsterdam\",\n  \"analytics\",\n  \"android\",\n  \"anquan\",\n  \"anz\",\n  \"ao\",\n  \"aol\",\n  \"apartments\",\n  \"app\",\n  \"apple\",\n  \"aq\",\n  \"aquarelle\",\n  \"ar\",\n  \"arab\",\n  \"aramco\",\n  \"archi\",\n  \"army\",\n  \"arpa\",\n  \"art\",\n  \"arte\",\n  \"as\",\n  \"asda\",\n  \"asia\",\n  \"associates\",\n  \"at\",\n  \"athleta\",\n  \"attorney\",\n  \"au\",\n  \"auction\",\n  \"audi\",\n  \"audible\",\n  \"audio\",\n  \"auspost\",\n  \"author\",\n  \"auto\",\n  \"autos\",\n  \"avianca\",\n  \"aw\",\n  \"aws\",\n  \"ax\",\n  \"axa\",\n  \"az\",\n  \"azure\",\n  \"ba\",\n  \"baby\",\n  \"baidu\",\n  \"banamex\",\n  \"bananarepublic\",\n  \"band\",\n  \"bank\",\n  \"bar\",\n  \"barcelona\",\n  \"barclaycard\",\n  \"barclays\",\n  \"barefoot\",\n  \"bargains\",\n  \"baseball\",\n  \"basketball\",\n  \"bauhaus\",\n  \"bayern\",\n  \"bb\",\n  \"bbc\",\n  \"bbt\",\n  \"bbva\",\n  \"bcg\",\n  \"bcn\",\n  \"bd\",\n  \"be\",\n  \"beats\",\n  \"beauty\",\n  \"beer\",\n  \"bentley\",\n  \"berlin\",\n  \"best\",\n  \"bestbuy\",\n  \"bet\",\n  \"bf\",\n  \"bg\",\n  \"bh\",\n  \"bharti\",\n  \"bi\",\n  \"bible\",\n  \"bid\",\n  \"bike\",\n  \"bing\",\n  \"bingo\",\n  \"bio\",\n  \"biz\",\n  \"bj\",\n  \"black\",\n  \"blackfriday\",\n  \"blockbuster\",\n  \"blog\",\n  \"bloomberg\",\n  \"blue\",\n  \"bm\",\n  \"bms\",\n  \"bmw\",\n  \"bn\",\n  \"bnpparibas\",\n  \"bo\",\n  \"boats\",\n  \"boehringer\",\n  \"bofa\",\n  \"bom\",\n  \"bond\",\n  \"boo\",\n  \"book\",\n  \"booking\",\n  \"bosch\",\n  \"bostik\",\n  \"boston\",\n  \"bot\",\n  \"boutique\",\n  \"box\",\n  \"br\",\n  \"bradesco\",\n  \"bridgestone\",\n  \"broadway\",\n  \"broker\",\n  \"brother\",\n  \"brussels\",\n  \"bs\",\n  \"bt\",\n  \"build\",\n  \"builders\",\n  \"business\",\n  \"buy\",\n  \"buzz\",\n  \"bv\",\n  \"bw\",\n  \"by\",\n  \"bz\",\n  \"bzh\",\n  \"ca\",\n  \"cab\",\n  \"cafe\",\n  \"cal\",\n  \"call\",\n  \"calvinklein\",\n  \"cam\",\n  \"camera\",\n  \"camp\",\n  \"canon\",\n  \"capetown\",\n  \"capital\",\n  \"capitalone\",\n  \"car\",\n  \"caravan\",\n  \"cards\",\n  \"care\",\n  \"career\",\n  \"careers\",\n  \"cars\",\n  \"casa\",\n  \"case\",\n  \"cash\",\n  \"casino\",\n  \"cat\",\n  \"catering\",\n  \"catholic\",\n  \"cba\",\n  \"cbn\",\n  \"cbre\",\n  \"cbs\",\n  \"cc\",\n  \"cd\",\n  \"center\",\n  \"ceo\",\n  \"cern\",\n  \"cf\",\n  \"cfa\",\n  \"cfd\",\n  \"cg\",\n  \"ch\",\n  \"chanel\",\n  \"channel\",\n  \"charity\",\n  \"chase\",\n  \"chat\",\n  \"cheap\",\n  \"chintai\",\n  \"christmas\",\n  \"chrome\",\n  \"church\",\n  \"ci\",\n  \"cipriani\",\n  \"circle\",\n  \"cisco\",\n  \"citadel\",\n  \"citi\",\n  \"citic\",\n  \"city\",\n  \"cityeats\",\n  \"ck\",\n  \"cl\",\n  \"claims\",\n  \"cleaning\",\n  \"click\",\n  \"clinic\",\n  \"clinique\",\n  \"clothing\",\n  \"cloud\",\n  \"club\",\n  \"clubmed\",\n  \"cm\",\n  \"cn\",\n  \"co\",\n  \"coach\",\n  \"codes\",\n  \"coffee\",\n  \"college\",\n  \"cologne\",\n  \"com\",\n  \"comcast\",\n  \"commbank\",\n  \"community\",\n  \"company\",\n  \"compare\",\n  \"computer\",\n  \"comsec\",\n  \"condos\",\n  \"construction\",\n  \"consulting\",\n  \"contact\",\n  \"contractors\",\n  \"cooking\",\n  \"cookingchannel\",\n  \"cool\",\n  \"coop\",\n  \"corsica\",\n  \"country\",\n  \"coupon\",\n  \"coupons\",\n  \"courses\",\n  \"cpa\",\n  \"cr\",\n  \"credit\",\n  \"creditcard\",\n  \"creditunion\",\n  \"cricket\",\n  \"crown\",\n  \"crs\",\n  \"cruise\",\n  \"cruises\",\n  \"cu\",\n  \"cuisinella\",\n  \"cv\",\n  \"cw\",\n  \"cx\",\n  \"cy\",\n  \"cymru\",\n  \"cyou\",\n  \"cz\",\n  \"dabur\",\n  \"dad\",\n  \"dance\",\n  \"data\",\n  \"date\",\n  \"dating\",\n  \"datsun\",\n  \"day\",\n  \"dclk\",\n  \"dds\",\n  \"de\",\n  \"deal\",\n  \"dealer\",\n  \"deals\",\n  \"degree\",\n  \"delivery\",\n  \"dell\",\n  \"deloitte\",\n  \"delta\",\n  \"democrat\",\n  \"dental\",\n  \"dentist\",\n  \"desi\",\n  \"design\",\n  \"dev\",\n  \"dhl\",\n  \"diamonds\",\n  \"diet\",\n  \"digital\",\n  \"direct\",\n  \"directory\",\n  \"discount\",\n  \"discover\",\n  \"dish\",\n  \"diy\",\n  \"dj\",\n  \"dk\",\n  \"dm\",\n  \"dnp\",\n  \"do\",\n  \"docs\",\n  \"doctor\",\n  \"dog\",\n  \"domains\",\n  \"dot\",\n  \"download\",\n  \"drive\",\n  \"dtv\",\n  \"dubai\",\n  \"dunlop\",\n  \"dupont\",\n  \"durban\",\n  \"dvag\",\n  \"dvr\",\n  \"dz\",\n  \"earth\",\n  \"eat\",\n  \"ec\",\n  \"eco\",\n  \"edeka\",\n  \"edu\",\n  \"education\",\n  \"ee\",\n  \"eg\",\n  \"email\",\n  \"emerck\",\n  \"energy\",\n  \"engineer\",\n  \"engineering\",\n  \"enterprises\",\n  \"epson\",\n  \"equipment\",\n  \"er\",\n  \"ericsson\",\n  \"erni\",\n  \"es\",\n  \"esq\",\n  \"estate\",\n  \"et\",\n  \"etisalat\",\n  \"eu\",\n  \"eurovision\",\n  \"eus\",\n  \"events\",\n  \"exchange\",\n  \"expert\",\n  \"exposed\",\n  \"express\",\n  \"extraspace\",\n  \"fage\",\n  \"fail\",\n  \"fairwinds\",\n  \"faith\",\n  \"family\",\n  \"fan\",\n  \"fans\",\n  \"farm\",\n  \"farmers\",\n  \"fashion\",\n  \"fast\",\n  \"fedex\",\n  \"feedback\",\n  \"ferrari\",\n  \"ferrero\",\n  \"fi\",\n  \"fiat\",\n  \"fidelity\",\n  \"fido\",\n  \"film\",\n  \"final\",\n  \"finance\",\n  \"financial\",\n  \"fire\",\n  \"firestone\",\n  \"firmdale\",\n  \"fish\",\n  \"fishing\",\n  \"fit\",\n  \"fitness\",\n  \"fj\",\n  \"fk\",\n  \"flickr\",\n  \"flights\",\n  \"flir\",\n  \"florist\",\n  \"flowers\",\n  \"fly\",\n  \"fm\",\n  \"fo\",\n  \"foo\",\n  \"food\",\n  \"foodnetwork\",\n  \"football\",\n  \"ford\",\n  \"forex\",\n  \"forsale\",\n  \"forum\",\n  \"foundation\",\n  \"fox\",\n  \"fr\",\n  \"free\",\n  \"fresenius\",\n  \"frl\",\n  \"frogans\",\n  \"frontdoor\",\n  \"frontier\",\n  \"ftr\",\n  \"fujitsu\",\n  \"fun\",\n  \"fund\",\n  \"furniture\",\n  \"futbol\",\n  \"fyi\",\n  \"ga\",\n  \"gal\",\n  \"gallery\",\n  \"gallo\",\n  \"gallup\",\n  \"game\",\n  \"games\",\n  \"gap\",\n  \"garden\",\n  \"gay\",\n  \"gb\",\n  \"gbiz\",\n  \"gd\",\n  \"gdn\",\n  \"ge\",\n  \"gea\",\n  \"gent\",\n  \"genting\",\n  \"george\",\n  \"gf\",\n  \"gg\",\n  \"ggee\",\n  \"gh\",\n  \"gi\",\n  \"gift\",\n  \"gifts\",\n  \"gives\",\n  \"giving\",\n  \"gl\",\n  \"glass\",\n  \"gle\",\n  \"global\",\n  \"globo\",\n  \"gm\",\n  \"gmail\",\n  \"gmbh\",\n  \"gmo\",\n  \"gmx\",\n  \"gn\",\n  \"godaddy\",\n  \"gold\",\n  \"goldpoint\",\n  \"golf\",\n  \"goo\",\n  \"goodyear\",\n  \"goog\",\n  \"google\",\n  \"gop\",\n  \"got\",\n  \"gov\",\n  \"gp\",\n  \"gq\",\n  \"gr\",\n  \"grainger\",\n  \"graphics\",\n  \"gratis\",\n  \"green\",\n  \"gripe\",\n  \"grocery\",\n  \"group\",\n  \"gs\",\n  \"gt\",\n  \"gu\",\n  \"guardian\",\n  \"gucci\",\n  \"guge\",\n  \"guide\",\n  \"guitars\",\n  \"guru\",\n  \"gw\",\n  \"gy\",\n  \"hair\",\n  \"hamburg\",\n  \"hangout\",\n  \"haus\",\n  \"hbo\",\n  \"hdfc\",\n  \"hdfcbank\",\n  \"health\",\n  \"healthcare\",\n  \"help\",\n  \"helsinki\",\n  \"here\",\n  \"hermes\",\n  \"hgtv\",\n  \"hiphop\",\n  \"hisamitsu\",\n  \"hitachi\",\n  \"hiv\",\n  \"hk\",\n  \"hkt\",\n  \"hm\",\n  \"hn\",\n  \"hockey\",\n  \"holdings\",\n  \"holiday\",\n  \"homedepot\",\n  \"homegoods\",\n  \"homes\",\n  \"homesense\",\n  \"honda\",\n  \"horse\",\n  \"hospital\",\n  \"host\",\n  \"hosting\",\n  \"hot\",\n  \"hoteles\",\n  \"hotels\",\n  \"hotmail\",\n  \"house\",\n  \"how\",\n  \"hr\",\n  \"hsbc\",\n  \"ht\",\n  \"hu\",\n  \"hughes\",\n  \"hyatt\",\n  \"hyundai\",\n  \"ibm\",\n  \"icbc\",\n  \"ice\",\n  \"icu\",\n  \"id\",\n  \"ie\",\n  \"ieee\",\n  \"ifm\",\n  \"ikano\",\n  \"il\",\n  \"im\",\n  \"imamat\",\n  \"imdb\",\n  \"immo\",\n  \"immobilien\",\n  \"in\",\n  \"inc\",\n  \"industries\",\n  \"infiniti\",\n  \"info\",\n  \"ing\",\n  \"ink\",\n  \"institute\",\n  \"insurance\",\n  \"insure\",\n  \"int\",\n  \"international\",\n  \"intuit\",\n  \"investments\",\n  \"io\",\n  \"ipiranga\",\n  \"iq\",\n  \"ir\",\n  \"irish\",\n  \"is\",\n  \"ismaili\",\n  \"ist\",\n  \"istanbul\",\n  \"it\",\n  \"itau\",\n  \"itv\",\n  \"jaguar\",\n  \"java\",\n  \"jcb\",\n  \"je\",\n  \"jeep\",\n  \"jetzt\",\n  \"jewelry\",\n  \"jio\",\n  \"jll\",\n  \"jm\",\n  \"jmp\",\n  \"jnj\",\n  \"jo\",\n  \"jobs\",\n  \"joburg\",\n  \"jot\",\n  \"joy\",\n  \"jp\",\n  \"jpmorgan\",\n  \"jprs\",\n  \"juegos\",\n  \"juniper\",\n  \"kaufen\",\n  \"kddi\",\n  \"ke\",\n  \"kerryhotels\",\n  \"kerrylogistics\",\n  \"kerryproperties\",\n  \"kfh\",\n  \"kg\",\n  \"kh\",\n  \"ki\",\n  \"kia\",\n  \"kids\",\n  \"kim\",\n  \"kinder\",\n  \"kindle\",\n  \"kitchen\",\n  \"kiwi\",\n  \"km\",\n  \"kn\",\n  \"koeln\",\n  \"komatsu\",\n  \"kosher\",\n  \"kp\",\n  \"kpmg\",\n  \"kpn\",\n  \"kr\",\n  \"krd\",\n  \"kred\",\n  \"kuokgroup\",\n  \"kw\",\n  \"ky\",\n  \"kyoto\",\n  \"kz\",\n  \"la\",\n  \"lacaixa\",\n  \"lamborghini\",\n  \"lamer\",\n  \"lancaster\",\n  \"lancia\",\n  \"land\",\n  \"landrover\",\n  \"lanxess\",\n  \"lasalle\",\n  \"lat\",\n  \"latino\",\n  \"latrobe\",\n  \"law\",\n  \"lawyer\",\n  \"lb\",\n  \"lc\",\n  \"lds\",\n  \"lease\",\n  \"leclerc\",\n  \"lefrak\",\n  \"legal\",\n  \"lego\",\n  \"lexus\",\n  \"lgbt\",\n  \"li\",\n  \"lidl\",\n  \"life\",\n  \"lifeinsurance\",\n  \"lifestyle\",\n  \"lighting\",\n  \"like\",\n  \"lilly\",\n  \"limited\",\n  \"limo\",\n  \"lincoln\",\n  \"link\",\n  \"lipsy\",\n  \"live\",\n  \"living\",\n  \"lk\",\n  \"llc\",\n  \"llp\",\n  \"loan\",\n  \"loans\",\n  \"locker\",\n  \"locus\",\n  \"lol\",\n  \"london\",\n  \"lotte\",\n  \"lotto\",\n  \"love\",\n  \"lpl\",\n  \"lplfinancial\",\n  \"lr\",\n  \"ls\",\n  \"lt\",\n  \"ltd\",\n  \"ltda\",\n  \"lu\",\n  \"lundbeck\",\n  \"luxe\",\n  \"luxury\",\n  \"lv\",\n  \"ly\",\n  \"ma\",\n  \"madrid\",\n  \"maif\",\n  \"maison\",\n  \"makeup\",\n  \"man\",\n  \"management\",\n  \"mango\",\n  \"map\",\n  \"market\",\n  \"marketing\",\n  \"markets\",\n  \"marriott\",\n  \"marshalls\",\n  \"maserati\",\n  \"mattel\",\n  \"mba\",\n  \"mc\",\n  \"mckinsey\",\n  \"md\",\n  \"me\",\n  \"med\",\n  \"media\",\n  \"meet\",\n  \"melbourne\",\n  \"meme\",\n  \"memorial\",\n  \"men\",\n  \"menu\",\n  \"merckmsd\",\n  \"mg\",\n  \"mh\",\n  \"miami\",\n  \"microsoft\",\n  \"mil\",\n  \"mini\",\n  \"mint\",\n  \"mit\",\n  \"mitsubishi\",\n  \"mk\",\n  \"ml\",\n  \"mlb\",\n  \"mls\",\n  \"mm\",\n  \"mma\",\n  \"mn\",\n  \"mo\",\n  \"mobi\",\n  \"mobile\",\n  \"moda\",\n  \"moe\",\n  \"moi\",\n  \"mom\",\n  \"monash\",\n  \"money\",\n  \"monster\",\n  \"mormon\",\n  \"mortgage\",\n  \"moscow\",\n  \"moto\",\n  \"motorcycles\",\n  \"mov\",\n  \"movie\",\n  \"mp\",\n  \"mq\",\n  \"mr\",\n  \"ms\",\n  \"msd\",\n  \"mt\",\n  \"mtn\",\n  \"mtr\",\n  \"mu\",\n  \"museum\",\n  \"music\",\n  \"mutual\",\n  \"mv\",\n  \"mw\",\n  \"mx\",\n  \"my\",\n  \"mz\",\n  \"na\",\n  \"nab\",\n  \"nagoya\",\n  \"name\",\n  \"natura\",\n  \"navy\",\n  \"nba\",\n  \"nc\",\n  \"ne\",\n  \"nec\",\n  \"net\",\n  \"netbank\",\n  \"netflix\",\n  \"network\",\n  \"neustar\",\n  \"new\",\n  \"news\",\n  \"next\",\n  \"nextdirect\",\n  \"nexus\",\n  \"nf\",\n  \"nfl\",\n  \"ng\",\n  \"ngo\",\n  \"nhk\",\n  \"ni\",\n  \"nico\",\n  \"nike\",\n  \"nikon\",\n  \"ninja\",\n  \"nissan\",\n  \"nissay\",\n  \"nl\",\n  \"no\",\n  \"nokia\",\n  \"northwesternmutual\",\n  \"norton\",\n  \"now\",\n  \"nowruz\",\n  \"nowtv\",\n  \"np\",\n  \"nr\",\n  \"nra\",\n  \"nrw\",\n  \"ntt\",\n  \"nu\",\n  \"nyc\",\n  \"nz\",\n  \"obi\",\n  \"observer\",\n  \"office\",\n  \"okinawa\",\n  \"olayan\",\n  \"olayangroup\",\n  \"oldnavy\",\n  \"ollo\",\n  \"om\",\n  \"omega\",\n  \"one\",\n  \"ong\",\n  \"onl\",\n  \"online\",\n  \"ooo\",\n  \"open\",\n  \"oracle\",\n  \"orange\",\n  \"org\",\n  \"organic\",\n  \"origins\",\n  \"osaka\",\n  \"otsuka\",\n  \"ott\",\n  \"ovh\",\n  \"pa\",\n  \"page\",\n  \"panasonic\",\n  \"paris\",\n  \"pars\",\n  \"partners\",\n  \"parts\",\n  \"party\",\n  \"passagens\",\n  \"pay\",\n  \"pccw\",\n  \"pe\",\n  \"pet\",\n  \"pf\",\n  \"pfizer\",\n  \"pg\",\n  \"ph\",\n  \"pharmacy\",\n  \"phd\",\n  \"philips\",\n  \"phone\",\n  \"photo\",\n  \"photography\",\n  \"photos\",\n  \"physio\",\n  \"pics\",\n  \"pictet\",\n  \"pictures\",\n  \"pid\",\n  \"pin\",\n  \"ping\",\n  \"pink\",\n  \"pioneer\",\n  \"pizza\",\n  \"pk\",\n  \"pl\",\n  \"place\",\n  \"play\",\n  \"playstation\",\n  \"plumbing\",\n  \"plus\",\n  \"pm\",\n  \"pn\",\n  \"pnc\",\n  \"pohl\",\n  \"poker\",\n  \"politie\",\n  \"porn\",\n  \"post\",\n  \"pr\",\n  \"pramerica\",\n  \"praxi\",\n  \"press\",\n  \"prime\",\n  \"pro\",\n  \"prod\",\n  \"productions\",\n  \"prof\",\n  \"progressive\",\n  \"promo\",\n  \"properties\",\n  \"property\",\n  \"protection\",\n  \"pru\",\n  \"prudential\",\n  \"ps\",\n  \"pt\",\n  \"pub\",\n  \"pw\",\n  \"pwc\",\n  \"py\",\n  \"qa\",\n  \"qpon\",\n  \"quebec\",\n  \"quest\",\n  \"racing\",\n  \"radio\",\n  \"re\",\n  \"read\",\n  \"realestate\",\n  \"realtor\",\n  \"realty\",\n  \"recipes\",\n  \"red\",\n  \"redstone\",\n  \"redumbrella\",\n  \"rehab\",\n  \"reise\",\n  \"reisen\",\n  \"reit\",\n  \"reliance\",\n  \"ren\",\n  \"rent\",\n  \"rentals\",\n  \"repair\",\n  \"report\",\n  \"republican\",\n  \"rest\",\n  \"restaurant\",\n  \"review\",\n  \"reviews\",\n  \"rexroth\",\n  \"rich\",\n  \"richardli\",\n  \"ricoh\",\n  \"ril\",\n  \"rio\",\n  \"rip\",\n  \"ro\",\n  \"rocher\",\n  \"rocks\",\n  \"rodeo\",\n  \"rogers\",\n  \"room\",\n  \"rs\",\n  \"rsvp\",\n  \"ru\",\n  \"rugby\",\n  \"ruhr\",\n  \"run\",\n  \"rw\",\n  \"rwe\",\n  \"ryukyu\",\n  \"sa\",\n  \"saarland\",\n  \"safe\",\n  \"safety\",\n  \"sakura\",\n  \"sale\",\n  \"salon\",\n  \"samsclub\",\n  \"samsung\",\n  \"sandvik\",\n  \"sandvikcoromant\",\n  \"sanofi\",\n  \"sap\",\n  \"sarl\",\n  \"sas\",\n  \"save\",\n  \"saxo\",\n  \"sb\",\n  \"sbi\",\n  \"sbs\",\n  \"sc\",\n  \"sca\",\n  \"scb\",\n  \"schaeffler\",\n  \"schmidt\",\n  \"scholarships\",\n  \"school\",\n  \"schule\",\n  \"schwarz\",\n  \"science\",\n  \"scot\",\n  \"sd\",\n  \"se\",\n  \"search\",\n  \"seat\",\n  \"secure\",\n  \"security\",\n  \"seek\",\n  \"select\",\n  \"sener\",\n  \"services\",\n  \"seven\",\n  \"sew\",\n  \"sex\",\n  \"sexy\",\n  \"sfr\",\n  \"sg\",\n  \"sh\",\n  \"shangrila\",\n  \"sharp\",\n  \"shaw\",\n  \"shell\",\n  \"shia\",\n  \"shiksha\",\n  \"shoes\",\n  \"shop\",\n  \"shopping\",\n  \"shouji\",\n  \"show\",\n  \"showtime\",\n  \"si\",\n  \"silk\",\n  \"sina\",\n  \"singles\",\n  \"site\",\n  \"sj\",\n  \"sk\",\n  \"ski\",\n  \"skin\",\n  \"sky\",\n  \"skype\",\n  \"sl\",\n  \"sling\",\n  \"sm\",\n  \"smart\",\n  \"smile\",\n  \"sn\",\n  \"sncf\",\n  \"so\",\n  \"soccer\",\n  \"social\",\n  \"softbank\",\n  \"software\",\n  \"sohu\",\n  \"solar\",\n  \"solutions\",\n  \"song\",\n  \"sony\",\n  \"soy\",\n  \"spa\",\n  \"space\",\n  \"sport\",\n  \"spot\",\n  \"sr\",\n  \"srl\",\n  \"ss\",\n  \"st\",\n  \"stada\",\n  \"staples\",\n  \"star\",\n  \"statebank\",\n  \"statefarm\",\n  \"stc\",\n  \"stcgroup\",\n  \"stockholm\",\n  \"storage\",\n  \"store\",\n  \"stream\",\n  \"studio\",\n  \"study\",\n  \"style\",\n  \"su\",\n  \"sucks\",\n  \"supplies\",\n  \"supply\",\n  \"support\",\n  \"surf\",\n  \"surgery\",\n  \"suzuki\",\n  \"sv\",\n  \"swatch\",\n  \"swiss\",\n  \"sx\",\n  \"sy\",\n  \"sydney\",\n  \"systems\",\n  \"sz\",\n  \"tab\",\n  \"taipei\",\n  \"talk\",\n  \"taobao\",\n  \"target\",\n  \"tatamotors\",\n  \"tatar\",\n  \"tattoo\",\n  \"tax\",\n  \"taxi\",\n  \"tc\",\n  \"tci\",\n  \"td\",\n  \"tdk\",\n  \"team\",\n  \"tech\",\n  \"technology\",\n  \"tel\",\n  \"temasek\",\n  \"tennis\",\n  \"teva\",\n  \"tf\",\n  \"tg\",\n  \"th\",\n  \"thd\",\n  \"theater\",\n  \"theatre\",\n  \"tiaa\",\n  \"tickets\",\n  \"tienda\",\n  \"tiffany\",\n  \"tips\",\n  \"tires\",\n  \"tirol\",\n  \"tj\",\n  \"tjmaxx\",\n  \"tjx\",\n  \"tk\",\n  \"tkmaxx\",\n  \"tl\",\n  \"tm\",\n  \"tmall\",\n  \"tn\",\n  \"to\",\n  \"today\",\n  \"tokyo\",\n  \"tools\",\n  \"top\",\n  \"toray\",\n  \"toshiba\",\n  \"total\",\n  \"tours\",\n  \"town\",\n  \"toyota\",\n  \"toys\",\n  \"tr\",\n  \"trade\",\n  \"trading\",\n  \"training\",\n  \"travel\",\n  \"travelchannel\",\n  \"travelers\",\n  \"travelersinsurance\",\n  \"trust\",\n  \"trv\",\n  \"tt\",\n  \"tube\",\n  \"tui\",\n  \"tunes\",\n  \"tushu\",\n  \"tv\",\n  \"tvs\",\n  \"tw\",\n  \"tz\",\n  \"ua\",\n  \"ubank\",\n  \"ubs\",\n  \"ug\",\n  \"uk\",\n  \"unicom\",\n  \"university\",\n  \"uno\",\n  \"uol\",\n  \"ups\",\n  \"us\",\n  \"uy\",\n  \"uz\",\n  \"va\",\n  \"vacations\",\n  \"vana\",\n  \"vanguard\",\n  \"vc\",\n  \"ve\",\n  \"vegas\",\n  \"ventures\",\n  \"verisign\",\n  \"verm\\xF6gensberater\",\n  \"verm\\xF6gensberatung\",\n  \"versicherung\",\n  \"vet\",\n  \"vg\",\n  \"vi\",\n  \"viajes\",\n  \"video\",\n  \"vig\",\n  \"viking\",\n  \"villas\",\n  \"vin\",\n  \"vip\",\n  \"virgin\",\n  \"visa\",\n  \"vision\",\n  \"viva\",\n  \"vivo\",\n  \"vlaanderen\",\n  \"vn\",\n  \"vodka\",\n  \"volkswagen\",\n  \"volvo\",\n  \"vote\",\n  \"voting\",\n  \"voto\",\n  \"voyage\",\n  \"vu\",\n  \"vuelos\",\n  \"wales\",\n  \"walmart\",\n  \"walter\",\n  \"wang\",\n  \"wanggou\",\n  \"watch\",\n  \"watches\",\n  \"weather\",\n  \"weatherchannel\",\n  \"webcam\",\n  \"weber\",\n  \"website\",\n  \"wed\",\n  \"wedding\",\n  \"weibo\",\n  \"weir\",\n  \"wf\",\n  \"whoswho\",\n  \"wien\",\n  \"wiki\",\n  \"williamhill\",\n  \"win\",\n  \"windows\",\n  \"wine\",\n  \"winners\",\n  \"wme\",\n  \"wolterskluwer\",\n  \"woodside\",\n  \"work\",\n  \"works\",\n  \"world\",\n  \"wow\",\n  \"ws\",\n  \"wtc\",\n  \"wtf\",\n  \"xbox\",\n  \"xerox\",\n  \"xfinity\",\n  \"xihuan\",\n  \"xin\",\n  \"xxx\",\n  \"xyz\",\n  \"yachts\",\n  \"yahoo\",\n  \"yamaxun\",\n  \"yandex\",\n  \"ye\",\n  \"yodobashi\",\n  \"yoga\",\n  \"yokohama\",\n  \"you\",\n  \"youtube\",\n  \"yt\",\n  \"yun\",\n  \"za\",\n  \"zappos\",\n  \"zara\",\n  \"zero\",\n  \"zip\",\n  \"zm\",\n  \"zone\",\n  \"zuerich\",\n  \"zw\",\n  \"\\u03B5\\u03BB\",\n  \"\\u03B5\\u03C5\",\n  \"\\u0431\\u0433\",\n  \"\\u0431\\u0435\\u043B\",\n  \"\\u0434\\u0435\\u0442\\u0438\",\n  \"\\u0435\\u044E\",\n  \"\\u043A\\u0430\\u0442\\u043E\\u043B\\u0438\\u043A\",\n  \"\\u043A\\u043E\\u043C\",\n  \"\\u043C\\u043A\\u0434\",\n  \"\\u043C\\u043E\\u043D\",\n  \"\\u043C\\u043E\\u0441\\u043A\\u0432\\u0430\",\n  \"\\u043E\\u043D\\u043B\\u0430\\u0439\\u043D\",\n  \"\\u043E\\u0440\\u0433\",\n  \"\\u0440\\u0443\\u0441\",\n  \"\\u0440\\u0444\",\n  \"\\u0441\\u0430\\u0439\\u0442\",\n  \"\\u0441\\u0440\\u0431\",\n  \"\\u0443\\u043A\\u0440\",\n  \"\\u049B\\u0430\\u0437\",\n  \"\\u0570\\u0561\\u0575\",\n  \"\\u05D9\\u05E9\\u05E8\\u05D0\\u05DC\",\n  \"\\u05E7\\u05D5\\u05DD\",\n  \"\\u0627\\u0628\\u0648\\u0638\\u0628\\u064A\",\n  \"\\u0627\\u062A\\u0635\\u0627\\u0644\\u0627\\u062A\",\n  \"\\u0627\\u0631\\u0627\\u0645\\u0643\\u0648\",\n  \"\\u0627\\u0644\\u0627\\u0631\\u062F\\u0646\",\n  \"\\u0627\\u0644\\u0628\\u062D\\u0631\\u064A\\u0646\",\n  \"\\u0627\\u0644\\u062C\\u0632\\u0627\\u0626\\u0631\",\n  \"\\u0627\\u0644\\u0633\\u0639\\u0648\\u062F\\u064A\\u0629\",\n  \"\\u0627\\u0644\\u0639\\u0644\\u064A\\u0627\\u0646\",\n  \"\\u0627\\u0644\\u0645\\u063A\\u0631\\u0628\",\n  \"\\u0627\\u0645\\u0627\\u0631\\u0627\\u062A\",\n  \"\\u0627\\u06CC\\u0631\\u0627\\u0646\",\n  \"\\u0628\\u0627\\u0631\\u062A\",\n  \"\\u0628\\u0627\\u0632\\u0627\\u0631\",\n  \"\\u0628\\u064A\\u062A\\u0643\",\n  \"\\u0628\\u06BE\\u0627\\u0631\\u062A\",\n  \"\\u062A\\u0648\\u0646\\u0633\",\n  \"\\u0633\\u0648\\u062F\\u0627\\u0646\",\n  \"\\u0633\\u0648\\u0631\\u064A\\u0629\",\n  \"\\u0634\\u0628\\u0643\\u0629\",\n  \"\\u0639\\u0631\\u0627\\u0642\",\n  \"\\u0639\\u0631\\u0628\",\n  \"\\u0639\\u0645\\u0627\\u0646\",\n  \"\\u0641\\u0644\\u0633\\u0637\\u064A\\u0646\",\n  \"\\u0642\\u0637\\u0631\",\n  \"\\u0643\\u0627\\u062B\\u0648\\u0644\\u064A\\u0643\",\n  \"\\u0643\\u0648\\u0645\",\n  \"\\u0645\\u0635\\u0631\",\n  \"\\u0645\\u0644\\u064A\\u0633\\u064A\\u0627\",\n  \"\\u0645\\u0648\\u0631\\u064A\\u062A\\u0627\\u0646\\u064A\\u0627\",\n  \"\\u0645\\u0648\\u0642\\u0639\",\n  \"\\u0647\\u0645\\u0631\\u0627\\u0647\",\n  \"\\u067E\\u0627\\u06A9\\u0633\\u062A\\u0627\\u0646\",\n  \"\\u0680\\u0627\\u0631\\u062A\",\n  \"\\u0915\\u0949\\u092E\",\n  \"\\u0928\\u0947\\u091F\",\n  \"\\u092D\\u093E\\u0930\\u0924\",\n  \"\\u092D\\u093E\\u0930\\u0924\\u092E\\u094D\",\n  \"\\u092D\\u093E\\u0930\\u094B\\u0924\",\n  \"\\u0938\\u0902\\u0917\\u0920\\u0928\",\n  \"\\u09AC\\u09BE\\u0982\\u09B2\\u09BE\",\n  \"\\u09AD\\u09BE\\u09B0\\u09A4\",\n  \"\\u09AD\\u09BE\\u09F0\\u09A4\",\n  \"\\u0A2D\\u0A3E\\u0A30\\u0A24\",\n  \"\\u0AAD\\u0ABE\\u0AB0\\u0AA4\",\n  \"\\u0B2D\\u0B3E\\u0B30\\u0B24\",\n  \"\\u0B87\\u0BA8\\u0BCD\\u0BA4\\u0BBF\\u0BAF\\u0BBE\",\n  \"\\u0B87\\u0BB2\\u0B99\\u0BCD\\u0B95\\u0BC8\",\n  \"\\u0B9A\\u0BBF\\u0B99\\u0BCD\\u0B95\\u0BAA\\u0BCD\\u0BAA\\u0BC2\\u0BB0\\u0BCD\",\n  \"\\u0C2D\\u0C3E\\u0C30\\u0C24\\u0C4D\",\n  \"\\u0CAD\\u0CBE\\u0CB0\\u0CA4\",\n  \"\\u0D2D\\u0D3E\\u0D30\\u0D24\\u0D02\",\n  \"\\u0DBD\\u0D82\\u0D9A\\u0DCF\",\n  \"\\u0E04\\u0E2D\\u0E21\",\n  \"\\u0E44\\u0E17\\u0E22\",\n  \"\\u0EA5\\u0EB2\\u0EA7\",\n  \"\\u10D2\\u10D4\",\n  \"\\u307F\\u3093\\u306A\",\n  \"\\u30A2\\u30DE\\u30BE\\u30F3\",\n  \"\\u30AF\\u30E9\\u30A6\\u30C9\",\n  \"\\u30B0\\u30FC\\u30B0\\u30EB\",\n  \"\\u30B3\\u30E0\",\n  \"\\u30B9\\u30C8\\u30A2\",\n  \"\\u30BB\\u30FC\\u30EB\",\n  \"\\u30D5\\u30A1\\u30C3\\u30B7\\u30E7\\u30F3\",\n  \"\\u30DD\\u30A4\\u30F3\\u30C8\",\n  \"\\u4E16\\u754C\",\n  \"\\u4E2D\\u4FE1\",\n  \"\\u4E2D\\u56FD\",\n  \"\\u4E2D\\u570B\",\n  \"\\u4E2D\\u6587\\u7F51\",\n  \"\\u4E9A\\u9A6C\\u900A\",\n  \"\\u4F01\\u4E1A\",\n  \"\\u4F5B\\u5C71\",\n  \"\\u4FE1\\u606F\",\n  \"\\u5065\\u5EB7\",\n  \"\\u516B\\u5366\",\n  \"\\u516C\\u53F8\",\n  \"\\u516C\\u76CA\",\n  \"\\u53F0\\u6E7E\",\n  \"\\u53F0\\u7063\",\n  \"\\u5546\\u57CE\",\n  \"\\u5546\\u5E97\",\n  \"\\u5546\\u6807\",\n  \"\\u5609\\u91CC\",\n  \"\\u5609\\u91CC\\u5927\\u9152\\u5E97\",\n  \"\\u5728\\u7EBF\",\n  \"\\u5927\\u62FF\",\n  \"\\u5929\\u4E3B\\u6559\",\n  \"\\u5A31\\u4E50\",\n  \"\\u5BB6\\u96FB\",\n  \"\\u5E7F\\u4E1C\",\n  \"\\u5FAE\\u535A\",\n  \"\\u6148\\u5584\",\n  \"\\u6211\\u7231\\u4F60\",\n  \"\\u624B\\u673A\",\n  \"\\u62DB\\u8058\",\n  \"\\u653F\\u52A1\",\n  \"\\u653F\\u5E9C\",\n  \"\\u65B0\\u52A0\\u5761\",\n  \"\\u65B0\\u95FB\",\n  \"\\u65F6\\u5C1A\",\n  \"\\u66F8\\u7C4D\",\n  \"\\u673A\\u6784\",\n  \"\\u6DE1\\u9A6C\\u9521\",\n  \"\\u6E38\\u620F\",\n  \"\\u6FB3\\u9580\",\n  \"\\u70B9\\u770B\",\n  \"\\u79FB\\u52A8\",\n  \"\\u7EC4\\u7EC7\\u673A\\u6784\",\n  \"\\u7F51\\u5740\",\n  \"\\u7F51\\u5E97\",\n  \"\\u7F51\\u7AD9\",\n  \"\\u7F51\\u7EDC\",\n  \"\\u8054\\u901A\",\n  \"\\u8C37\\u6B4C\",\n  \"\\u8D2D\\u7269\",\n  \"\\u901A\\u8CA9\",\n  \"\\u96C6\\u56E2\",\n  \"\\u96FB\\u8A0A\\u76C8\\u79D1\",\n  \"\\u98DE\\u5229\\u6D66\",\n  \"\\u98DF\\u54C1\",\n  \"\\u9910\\u5385\",\n  \"\\u9999\\u683C\\u91CC\\u62C9\",\n  \"\\u9999\\u6E2F\",\n  \"\\uB2F7\\uB137\",\n  \"\\uB2F7\\uCEF4\",\n  \"\\uC0BC\\uC131\",\n  \"\\uD55C\\uAD6D\"\n];\n\n// src/rich-text/detection.ts\nfunction detectFacets(text) {\n  let match;\n  const facets = [];\n  {\n    const re = /(^|\\s|\\()(@)([a-zA-Z0-9.-]+)(\\b)/g;\n    while (match = re.exec(text.utf16)) {\n      if (!isValidDomain(match[3]) && !match[3].endsWith(\".test\")) {\n        continue;\n      }\n      const start = text.utf16.indexOf(match[3], match.index) - 1;\n      facets.push({\n        $type: \"app.bsky.richtext.facet\",\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(start),\n          byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)\n        },\n        features: [\n          {\n            $type: \"app.bsky.richtext.facet#mention\",\n            did: match[3]\n          }\n        ]\n      });\n    }\n  }\n  {\n    const re = /(^|\\s|\\()((https?:\\/\\/[\\S]+)|((?<domain>[a-z][a-z0-9]*(\\.[a-z0-9]+)+)[\\S]*))/gim;\n    while (match = re.exec(text.utf16)) {\n      let uri2 = match[2];\n      if (!uri2.startsWith(\"http\")) {\n        const domain = match.groups?.domain;\n        if (!domain || !isValidDomain(domain)) {\n          continue;\n        }\n        uri2 = `https://${uri2}`;\n      }\n      const start = text.utf16.indexOf(match[2], match.index);\n      const index = { start, end: start + match[2].length };\n      if (/[.,;!?]$/.test(uri2)) {\n        uri2 = uri2.slice(0, -1);\n        index.end--;\n      }\n      if (/[)]$/.test(uri2) && !uri2.includes(\"(\")) {\n        uri2 = uri2.slice(0, -1);\n        index.end--;\n      }\n      facets.push({\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(index.start),\n          byteEnd: text.utf16IndexToUtf8Index(index.end)\n        },\n        features: [\n          {\n            $type: \"app.bsky.richtext.facet#link\",\n            uri: uri2\n          }\n        ]\n      });\n    }\n  }\n  return facets.length > 0 ? facets : void 0;\n}\nfunction isValidDomain(str) {\n  return !!tlds_default.find((tld) => {\n    const i = str.lastIndexOf(tld);\n    if (i === -1) {\n      return false;\n    }\n    return str.charAt(i - 1) === \".\" && i === str.length - tld.length;\n  });\n}\n\n// src/rich-text/rich-text.ts\nvar RichTextSegment = class {\n  constructor(text, facet) {\n    this.text = text;\n    this.facet = facet;\n  }\n  get link() {\n    const link = this.facet?.features.find(facet_exports.isLink);\n    if (facet_exports.isLink(link)) {\n      return link;\n    }\n    return void 0;\n  }\n  isLink() {\n    return !!this.link;\n  }\n  get mention() {\n    const mention = this.facet?.features.find(facet_exports.isMention);\n    if (facet_exports.isMention(mention)) {\n      return mention;\n    }\n    return void 0;\n  }\n  isMention() {\n    return !!this.mention;\n  }\n};\nvar RichText = class {\n  constructor(props, opts) {\n    this.unicodeText = new UnicodeString(props.text);\n    this.facets = props.facets;\n    if (!this.facets?.length && props.entities?.length) {\n      this.facets = entitiesToFacets(this.unicodeText, props.entities);\n    }\n    if (this.facets) {\n      this.facets.sort(facetSort);\n    }\n    if (opts?.cleanNewlines) {\n      sanitizeRichText(this, { cleanNewlines: true }).copyInto(this);\n    }\n  }\n  get text() {\n    return this.unicodeText.toString();\n  }\n  get length() {\n    return this.unicodeText.length;\n  }\n  get graphemeLength() {\n    return this.unicodeText.graphemeLength;\n  }\n  clone() {\n    return new RichText({\n      text: this.unicodeText.utf16,\n      facets: cloneDeep(this.facets)\n    });\n  }\n  copyInto(target) {\n    target.unicodeText = this.unicodeText;\n    target.facets = cloneDeep(this.facets);\n  }\n  *segments() {\n    const facets = this.facets || [];\n    if (!facets.length) {\n      yield new RichTextSegment(this.unicodeText.utf16);\n      return;\n    }\n    let textCursor = 0;\n    let facetCursor = 0;\n    do {\n      const currFacet = facets[facetCursor];\n      if (textCursor < currFacet.index.byteStart) {\n        yield new RichTextSegment(\n          this.unicodeText.slice(textCursor, currFacet.index.byteStart)\n        );\n      } else if (textCursor > currFacet.index.byteStart) {\n        facetCursor++;\n        continue;\n      }\n      if (currFacet.index.byteStart < currFacet.index.byteEnd) {\n        const subtext = this.unicodeText.slice(\n          currFacet.index.byteStart,\n          currFacet.index.byteEnd\n        );\n        if (!subtext.trim()) {\n          yield new RichTextSegment(subtext);\n        } else {\n          yield new RichTextSegment(subtext, currFacet);\n        }\n      }\n      textCursor = currFacet.index.byteEnd;\n      facetCursor++;\n    } while (facetCursor < facets.length);\n    if (textCursor < this.unicodeText.length) {\n      yield new RichTextSegment(\n        this.unicodeText.slice(textCursor, this.unicodeText.length)\n      );\n    }\n  }\n  insert(insertIndex, insertText) {\n    this.unicodeText = new UnicodeString(\n      this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex)\n    );\n    if (!this.facets?.length) {\n      return this;\n    }\n    const numCharsAdded = insertText.length;\n    for (const ent of this.facets) {\n      if (insertIndex <= ent.index.byteStart) {\n        ent.index.byteStart += numCharsAdded;\n        ent.index.byteEnd += numCharsAdded;\n      } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {\n        ent.index.byteEnd += numCharsAdded;\n      }\n    }\n    return this;\n  }\n  delete(removeStartIndex, removeEndIndex) {\n    this.unicodeText = new UnicodeString(\n      this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex)\n    );\n    if (!this.facets?.length) {\n      return this;\n    }\n    const numCharsRemoved = removeEndIndex - removeStartIndex;\n    for (const ent of this.facets) {\n      if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {\n        ent.index.byteStart = 0;\n        ent.index.byteEnd = 0;\n      } else if (removeStartIndex > ent.index.byteEnd) {\n      } else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {\n        ent.index.byteEnd = removeStartIndex;\n      } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {\n        ent.index.byteEnd -= numCharsRemoved;\n      } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {\n        ent.index.byteStart = removeStartIndex;\n        ent.index.byteEnd -= numCharsRemoved;\n      } else if (removeEndIndex < ent.index.byteStart) {\n        ent.index.byteStart -= numCharsRemoved;\n        ent.index.byteEnd -= numCharsRemoved;\n      }\n    }\n    this.facets = this.facets.filter(\n      (ent) => ent.index.byteStart < ent.index.byteEnd\n    );\n    return this;\n  }\n  async detectFacets(agent) {\n    this.facets = detectFacets(this.unicodeText);\n    if (this.facets) {\n      for (const facet of this.facets) {\n        for (const feature of facet.features) {\n          if (facet_exports.isMention(feature)) {\n            const did2 = await agent.resolveHandle({ handle: feature.did }).catch((_) => void 0).then((res) => res?.data.did);\n            feature.did = did2 || \"\";\n          }\n        }\n      }\n      this.facets.sort(facetSort);\n    }\n  }\n  detectFacetsWithoutResolution() {\n    this.facets = detectFacets(this.unicodeText);\n    if (this.facets) {\n      this.facets.sort(facetSort);\n    }\n  }\n};\nvar facetSort = (a, b) => a.index.byteStart - b.index.byteStart;\nfunction entitiesToFacets(text, entities) {\n  const facets = [];\n  for (const ent of entities) {\n    if (ent.type === \"link\") {\n      facets.push({\n        $type: \"app.bsky.richtext.facet\",\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end)\n        },\n        features: [{ $type: \"app.bsky.richtext.facet#link\", uri: ent.value }]\n      });\n    } else if (ent.type === \"mention\") {\n      facets.push({\n        $type: \"app.bsky.richtext.facet\",\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end)\n        },\n        features: [\n          { $type: \"app.bsky.richtext.facet#mention\", did: ent.value }\n        ]\n      });\n    }\n  }\n  return facets;\n}\nfunction cloneDeep(v) {\n  if (typeof v === \"undefined\") {\n    return v;\n  }\n  return JSON.parse(JSON.stringify(v));\n}\n\n// src/moderation/types.ts\nvar ModerationDecision = class {\n  constructor(cause = void 0, alert = false, blur = false, blurMedia = false, filter = false, noOverride = false, additionalCauses = [], did2 = \"\") {\n    this.cause = cause;\n    this.alert = alert;\n    this.blur = blur;\n    this.blurMedia = blurMedia;\n    this.filter = filter;\n    this.noOverride = noOverride;\n    this.additionalCauses = additionalCauses;\n    this.did = did2;\n  }\n  static noop() {\n    return new ModerationDecision();\n  }\n};\n\n// src/moderation/const/labels.ts\nvar LABELS = {\n  \"!hide\": {\n    id: \"!hide\",\n    preferences: [\"hide\"],\n    flags: [\"no-override\"],\n    onwarn: \"blur\",\n    groupId: \"system\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Moderator Hide\",\n          description: \"Moderator has chosen to hide the content.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Content Blocked\",\n          description: \"This account has been hidden by the moderators.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Content Blocked\",\n          description: \"This content has been hidden by the moderators.\"\n        }\n      }\n    }\n  },\n  \"!no-promote\": {\n    id: \"!no-promote\",\n    preferences: [\"hide\"],\n    flags: [],\n    onwarn: null,\n    groupId: \"system\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Moderator Filter\",\n          description: \"Moderator has chosen to filter the content from feeds.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"N/A\",\n          description: \"N/A\"\n        }\n      },\n      content: {\n        en: {\n          name: \"N/A\",\n          description: \"N/A\"\n        }\n      }\n    }\n  },\n  \"!warn\": {\n    id: \"!warn\",\n    preferences: [\"warn\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"system\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Moderator Warn\",\n          description: \"Moderator has chosen to set a general warning on the content.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Content Warning\",\n          description: \"This account has received a general warning from moderators.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Content Warning\",\n          description: \"This content has received a general warning from moderators.\"\n        }\n      }\n    }\n  },\n  \"dmca-violation\": {\n    id: \"dmca-violation\",\n    preferences: [\"hide\"],\n    flags: [\"no-override\"],\n    onwarn: \"blur\",\n    groupId: \"legal\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Copyright Violation\",\n          description: \"The content has received a DMCA takedown request.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Copyright Violation\",\n          description: \"This account has received a DMCA takedown request. It will be restored if the concerns can be resolved.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Copyright Violation\",\n          description: \"This content has received a DMCA takedown request. It will be restored if the concerns can be resolved.\"\n        }\n      }\n    }\n  },\n  doxxing: {\n    id: \"doxxing\",\n    preferences: [\"hide\"],\n    flags: [\"no-override\"],\n    onwarn: \"blur\",\n    groupId: \"legal\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Doxxing\",\n          description: \"Information that reveals private information about someone which has been shared without the consent of the subject.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Doxxing\",\n          description: \"This account has been reported to publish private information about someone without their consent. This report is currently under review.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Doxxing\",\n          description: \"This content has been reported to include private information about someone without their consent.\"\n        }\n      }\n    }\n  },\n  porn: {\n    id: \"porn\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"sexual\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Pornography\",\n          description: \"Images of full-frontal nudity (genitalia) in any sexualized context, or explicit sexual activity (meaning contact with genitalia or breasts) even if partially covered. Includes graphic sexual cartoons (often jokes/memes).\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This account contains imagery of full-frontal nudity or explicit sexual activity.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This content contains imagery of full-frontal nudity or explicit sexual activity.\"\n        }\n      }\n    }\n  },\n  sexual: {\n    id: \"sexual\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"sexual\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Sexually Suggestive\",\n          description: 'Content that does not meet the level of \"pornography\", but is still sexual. Some common examples have been selfies and \"hornyposting\" with underwear on, or partially naked (naked but covered, eg with hands or from side perspective). Sheer/see-through nipples may end up in this category.'\n        }\n      },\n      account: {\n        en: {\n          name: \"Suggestive Content\",\n          description: \"This account contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Suggestive Content\",\n          description: \"This content contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.\"\n        }\n      }\n    }\n  },\n  nudity: {\n    id: \"nudity\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"sexual\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Nudity\",\n          description: 'Nudity which is not sexual, or that is primarily \"artistic\" in nature. For example: breastfeeding; classic art paintings and sculptures; newspaper images with some nudity; fashion modeling. \"Erotic photography\" is likely to end up in sexual or porn.'\n        }\n      },\n      account: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This account contains imagery which portrays nudity in a non-sexual or artistic setting.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This content contains imagery which portrays nudity in a non-sexual or artistic setting.\"\n        }\n      }\n    }\n  },\n  nsfl: {\n    id: \"nsfl\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"NSFL\",\n          description: `\"Not Suitable For Life.\" This includes graphic images like the infamous \"goatse\" (don't look it up).`\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (NSFL)\",\n          description: 'This account contains graphic images which are often referred to as \"Not Suitable For Life.\"'\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (NSFL)\",\n          description: 'This content contains graphic images which are often referred to as \"Not Suitable For Life.\"'\n        }\n      }\n    }\n  },\n  corpse: {\n    id: \"corpse\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Corpse\",\n          description: \"Visual image of a dead human body in any context. Includes war images, hanging, funeral caskets. Does not include all figurative cases (cartoons), but can include realistic figurative images or renderings.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Corpse)\",\n          description: \"This account contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Corpse)\",\n          description: \"This content contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.\"\n        }\n      }\n    }\n  },\n  gore: {\n    id: \"gore\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Gore\",\n          description: \"Intended for shocking images, typically involving blood or visible wounds.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Gore)\",\n          description: \"This account contains shocking images involving blood or visible wounds.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Gore)\",\n          description: \"This content contains shocking images involving blood or visible wounds.\"\n        }\n      }\n    }\n  },\n  torture: {\n    id: \"torture\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Torture\",\n          description: \"Depictions of torture of a human or animal (animal cruelty).\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Torture)\",\n          description: \"This account contains depictions of torture of a human or animal.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Torture)\",\n          description: \"This content contains depictions of torture of a human or animal.\"\n        }\n      }\n    }\n  },\n  \"self-harm\": {\n    id: \"self-harm\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Self-Harm\",\n          description: \"A visual depiction (photo or figurative) of cutting, suicide, or similar.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Self-Harm)\",\n          description: \"This account includes depictions of cutting, suicide, or other forms of self-harm.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Self-Harm)\",\n          description: \"This content includes depictions of cutting, suicide, or other forms of self-harm.\"\n        }\n      }\n    }\n  },\n  \"intolerant-race\": {\n    id: \"intolerant-race\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Racial Intolerance\",\n          description: \"Hateful or intolerant content related to race.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Racial)\",\n          description: \"This account includes hateful or intolerant content related to race.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Racial)\",\n          description: \"This content includes hateful or intolerant views related to race.\"\n        }\n      }\n    }\n  },\n  \"intolerant-gender\": {\n    id: \"intolerant-gender\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Gender Intolerance\",\n          description: \"Hateful or intolerant content related to gender or gender identity.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Gender)\",\n          description: \"This account includes hateful or intolerant content related to gender or gender identity.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Gender)\",\n          description: \"This content includes hateful or intolerant views related to gender or gender identity.\"\n        }\n      }\n    }\n  },\n  \"intolerant-sexual-orientation\": {\n    id: \"intolerant-sexual-orientation\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Sexual Orientation Intolerance\",\n          description: \"Hateful or intolerant content related to sexual preferences.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Orientation)\",\n          description: \"This account includes hateful or intolerant content related to sexual preferences.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Orientation)\",\n          description: \"This content includes hateful or intolerant views related to sexual preferences.\"\n        }\n      }\n    }\n  },\n  \"intolerant-religion\": {\n    id: \"intolerant-religion\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Religious Intolerance\",\n          description: \"Hateful or intolerant content related to religious views or practices.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Religious)\",\n          description: \"This account includes hateful or intolerant content related to religious views or practices.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Religious)\",\n          description: \"This content includes hateful or intolerant views related to religious views or practices.\"\n        }\n      }\n    }\n  },\n  intolerant: {\n    id: \"intolerant\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Intolerance\",\n          description: \"A catchall for hateful or intolerant content which is not covered elsewhere.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance\",\n          description: \"This account includes hateful or intolerant content.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance\",\n          description: \"This content includes hateful or intolerant views.\"\n        }\n      }\n    }\n  },\n  \"icon-intolerant\": {\n    id: \"icon-intolerant\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur-media\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Intolerant Iconography\",\n          description: \"Visual imagery associated with a hate group, such as the KKK or Nazi, in any context (supportive, critical, documentary, etc).\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerant Iconography\",\n          description: \"This account includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerant Iconography\",\n          description: \"This content includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.\"\n        }\n      }\n    }\n  },\n  threat: {\n    id: \"threat\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"rude\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Threats\",\n          description: \"Statements or imagery published with the intent to threaten, intimidate, or harm.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Threats\",\n          description: \"The moderators believe this account has published statements or imagery with the intent to threaten, intimidate, or harm others.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Threats\",\n          description: \"The moderators believe this content was published with the intent to threaten, intimidate, or harm others.\"\n        }\n      }\n    }\n  },\n  spoiler: {\n    id: \"spoiler\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"curation\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Spoiler\",\n          description: \"Discussion about film, TV, etc which gives away plot points.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Spoiler Warning\",\n          description: \"This account contains discussion about film, TV, etc which gives away plot points.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Spoiler Warning\",\n          description: \"This content contains discussion about film, TV, etc which gives away plot points.\"\n        }\n      }\n    }\n  },\n  spam: {\n    id: \"spam\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"spam\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Spam\",\n          description: \"Repeat, low-quality messages which are clearly not designed to add to a conversation or space.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Spam\",\n          description: \"This account publishes repeat, low-quality messages which are clearly not designed to add to a conversation or space.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Spam\",\n          description: \"This content is a part of repeat, low-quality messages which are clearly not designed to add to a conversation or space.\"\n        }\n      }\n    }\n  },\n  \"account-security\": {\n    id: \"account-security\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Security Concerns\",\n          description: \"Content designed to hijack user accounts such as a phishing attack.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Security Warning\",\n          description: \"This account has published content designed to hijack user accounts such as a phishing attack.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Security Warning\",\n          description: \"This content is designed to hijack user accounts such as a phishing attack.\"\n        }\n      }\n    }\n  },\n  \"net-abuse\": {\n    id: \"net-abuse\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Network Attacks\",\n          description: \"Content designed to attack network systems such as denial-of-service attacks.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Network Attack Warning\",\n          description: \"This account has published content designed to attack network systems such as denial-of-service attacks.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Network Attack Warning\",\n          description: \"This content is designed to attack network systems such as denial-of-service attacks.\"\n        }\n      }\n    }\n  },\n  impersonation: {\n    id: \"impersonation\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"alert\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Impersonation\",\n          description: \"Accounts which falsely assert some identity.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Impersonation Warning\",\n          description: \"The moderators believe this account is lying about their identity.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Impersonation Warning\",\n          description: \"The moderators believe this account is lying about their identity.\"\n        }\n      }\n    }\n  },\n  scam: {\n    id: \"scam\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"alert\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Scam\",\n          description: \"Fraudulent content.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Scam Warning\",\n          description: \"The moderators believe this account publishes fraudulent content.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Scam Warning\",\n          description: \"The moderators believe this is fraudulent content.\"\n        }\n      }\n    }\n  }\n};\n\n// src/moderation/accumulator.ts\nvar ModerationCauseAccumulator = class {\n  constructor() {\n    this.did = \"\";\n    this.causes = [];\n  }\n  setDid(did2) {\n    this.did = did2;\n  }\n  addBlocking(blocking) {\n    if (blocking) {\n      this.causes.push({\n        type: \"blocking\",\n        source: { type: \"user\" },\n        priority: 3\n      });\n    }\n  }\n  addBlockedBy(blockedBy) {\n    if (blockedBy) {\n      this.causes.push({\n        type: \"blocked-by\",\n        source: { type: \"user\" },\n        priority: 4\n      });\n    }\n  }\n  addLabel(label, opts) {\n    const labelDef = LABELS[label.val];\n    if (!labelDef) {\n      return;\n    }\n    const isSelf = label.src === this.did;\n    const labeler = isSelf ? void 0 : opts.labelers.find((s) => s.labeler.did === label.src);\n    let labelPref = \"ignore\";\n    if (!labelDef.configurable) {\n      labelPref = labelDef.preferences[0];\n    } else if (labelDef.flags.includes(\"adult\") && !opts.adultContentEnabled) {\n      labelPref = \"hide\";\n    } else if (labeler?.labels[label.val]) {\n      labelPref = labeler.labels[label.val];\n    } else if (opts.labels[label.val]) {\n      labelPref = opts.labels[label.val];\n    }\n    if (labelPref === \"ignore\") {\n      return;\n    }\n    let priority;\n    if (labelDef.flags.includes(\"no-override\")) {\n      priority = 1;\n    } else if (labelPref === \"hide\") {\n      priority = 2;\n    } else if (labelDef.onwarn === \"blur\") {\n      priority = 5;\n    } else if (labelDef.onwarn === \"blur-media\") {\n      priority = 7;\n    } else {\n      priority = 8;\n    }\n    this.causes.push({\n      type: \"label\",\n      source: isSelf || !labeler ? { type: \"user\" } : { type: \"labeler\", labeler: labeler.labeler },\n      label,\n      labelDef,\n      setting: labelPref,\n      priority\n    });\n  }\n  addMuted(muted) {\n    if (muted) {\n      this.causes.push({\n        type: \"muted\",\n        source: { type: \"user\" },\n        priority: 6\n      });\n    }\n  }\n  addMutedByList(mutedByList) {\n    if (mutedByList) {\n      this.causes.push({\n        type: \"muted\",\n        source: { type: \"list\", list: mutedByList },\n        priority: 6\n      });\n    }\n  }\n  finalizeDecision(opts) {\n    const mod = new ModerationDecision();\n    mod.did = this.did;\n    if (!this.causes.length) {\n      return mod;\n    }\n    this.causes.sort((a, b) => a.priority - b.priority);\n    mod.cause = this.causes[0];\n    mod.additionalCauses = this.causes.slice(1);\n    if (mod.cause.type === \"blocking\" || mod.cause.type === \"blocked-by\") {\n      mod.filter = true;\n      mod.blur = true;\n      mod.noOverride = true;\n    } else if (mod.cause.type === \"muted\") {\n      mod.filter = true;\n      mod.blur = true;\n    } else if (mod.cause.type === \"label\") {\n      if (mod.cause.setting === \"hide\") {\n        mod.filter = true;\n      }\n      switch (mod.cause.labelDef.onwarn) {\n        case \"alert\":\n          mod.alert = true;\n          break;\n        case \"blur\":\n          mod.blur = true;\n          break;\n        case \"blur-media\":\n          mod.blurMedia = true;\n          break;\n        case null:\n          break;\n      }\n      if (mod.cause.labelDef.flags.includes(\"no-override\")) {\n        mod.noOverride = true;\n      } else if (mod.cause.labelDef.flags.includes(\"adult\") && !opts.adultContentEnabled) {\n        mod.noOverride = true;\n      }\n    }\n    return mod;\n  }\n};\n\n// src/moderation/subjects/account.ts\nfunction decideAccount(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  acc.setDid(subject.did);\n  if (subject.viewer?.muted) {\n    if (subject.viewer?.mutedByList) {\n      acc.addMutedByList(subject.viewer?.mutedByList);\n    } else {\n      acc.addMuted(subject.viewer?.muted);\n    }\n  }\n  acc.addBlocking(subject.viewer?.blocking);\n  acc.addBlockedBy(subject.viewer?.blockedBy);\n  for (const label of filterAccountLabels(subject.labels)) {\n    acc.addLabel(label, opts);\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction filterAccountLabels(labels) {\n  if (!labels) {\n    return [];\n  }\n  return labels.filter(\n    (label) => !label.uri.endsWith(\"/app.bsky.actor.profile/self\")\n  );\n}\n\n// src/moderation/subjects/profile.ts\nfunction decideProfile(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  acc.setDid(subject.did);\n  for (const label of filterProfileLabels(subject.labels)) {\n    acc.addLabel(label, opts);\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction filterProfileLabels(labels) {\n  if (!labels) {\n    return [];\n  }\n  return labels.filter(\n    (label) => label.uri.endsWith(\"/app.bsky.actor.profile/self\")\n  );\n}\n\n// src/moderation/subjects/post.ts\nfunction decidePost(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  acc.setDid(subject.author.did);\n  if (subject.labels?.length) {\n    for (const label of subject.labels) {\n      acc.addLabel(label, opts);\n    }\n  }\n  return acc.finalizeDecision(opts);\n}\n\n// src/moderation/subjects/quoted-post.ts\nfunction decideQuotedPost(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  if (record_exports.isViewRecord(subject.record)) {\n    acc.setDid(subject.record.author.did);\n    if (subject.record.labels?.length) {\n      for (const label of subject.record.labels) {\n        acc.addLabel(label, opts);\n      }\n    }\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction decideQuotedPostAccount(subject, opts) {\n  if (record_exports.isViewRecord(subject.record)) {\n    return decideAccount(subject.record.author, opts);\n  }\n  return ModerationDecision.noop();\n}\nfunction decideQuotedPostWithMedia(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  if (record_exports.isViewRecord(subject.record.record)) {\n    acc.setDid(subject.record.record.author.did);\n    if (subject.record.record.labels?.length) {\n      for (const label of subject.record.record.labels) {\n        acc.addLabel(label, opts);\n      }\n    }\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction decideQuotedPostWithMediaAccount(subject, opts) {\n  if (record_exports.isViewRecord(subject.record.record)) {\n    return decideAccount(subject.record.record.author, opts);\n  }\n  return ModerationDecision.noop();\n}\n\n// src/moderation/subjects/feed-generator.ts\nfunction decideFeedGenerator(subject, opts) {\n  return ModerationDecision.noop();\n}\n\n// src/moderation/subjects/user-list.ts\nfunction decideUserList(subject, opts) {\n  return ModerationDecision.noop();\n}\n\n// src/moderation/util.ts\nfunction takeHighestPriorityDecision(...decisions) {\n  const filtered = decisions.filter((d) => !!d);\n  if (filtered.length === 0) {\n    return ModerationDecision.noop();\n  }\n  filtered.sort((a, b) => {\n    if (a.cause && b.cause) {\n      return a.cause.priority - b.cause.priority;\n    }\n    if (a.cause) {\n      return -1;\n    }\n    if (b.cause) {\n      return 1;\n    }\n    return 0;\n  });\n  return filtered[0];\n}\nfunction downgradeDecision(decision, to) {\n  decision.filter = false;\n  decision.noOverride = false;\n  if (to === \"noop\") {\n    decision.blur = false;\n    decision.blurMedia = false;\n    decision.alert = false;\n    delete decision.cause;\n  } else if (to === \"alert\") {\n    decision.blur = false;\n    decision.blurMedia = false;\n    decision.alert = true;\n  }\n}\nfunction isModerationDecisionNoop(decision, { ignoreFilter } = { ignoreFilter: false }) {\n  if (!decision) {\n    return true;\n  }\n  if (decision.alert) {\n    return false;\n  }\n  if (decision.blur) {\n    return false;\n  }\n  if (decision.filter && !ignoreFilter) {\n    return false;\n  }\n  return true;\n}\nfunction isQuotedPost(embed) {\n  return Boolean(\n    embed && record_exports.isView(embed) && record_exports.isViewRecord(embed.record) && post_exports.isRecord(embed.record.value) && post_exports.validateRecord(embed.record.value).success\n  );\n}\nfunction isQuotedPostWithMedia(embed) {\n  return Boolean(\n    embed && recordWithMedia_exports.isView(embed) && record_exports.isViewRecord(embed.record.record) && post_exports.isRecord(embed.record.record.value) && post_exports.validateRecord(embed.record.record.value).success\n  );\n}\nfunction toModerationUI(decision) {\n  return {\n    cause: decision.cause,\n    filter: decision.filter,\n    blur: decision.blur,\n    alert: decision.alert,\n    noOverride: decision.noOverride\n  };\n}\n\n// src/moderation/index.ts\nfunction moderateProfile(subject, opts) {\n  const account = decideAccount(subject, opts);\n  const profile = decideProfile(subject, opts);\n  if (account.blurMedia) {\n    account.blur = true;\n  }\n  profile.filter = false;\n  if (!isModerationDecisionNoop(account) && account.did === opts.userDid) {\n    downgradeDecision(account, \"alert\");\n  }\n  if (!isModerationDecisionNoop(profile) && profile.did === opts.userDid) {\n    downgradeDecision(profile, \"alert\");\n  }\n  let avatarBlur = false;\n  let avatarNoOverride = false;\n  if ((account.blur || account.blurMedia) && account.cause?.type !== \"muted\") {\n    avatarBlur = true;\n    avatarNoOverride = account.noOverride || profile.noOverride;\n  } else if (profile.blur || profile.blurMedia) {\n    avatarBlur = true;\n    avatarNoOverride = account.noOverride || profile.noOverride;\n  }\n  if (account.cause?.type === \"blocking\" || account.cause?.type === \"blocked-by\" || account.cause?.type === \"muted\") {\n    account.blur = false;\n    account.noOverride = false;\n  }\n  return {\n    decisions: { account, profile },\n    account: account.filter || account.blur || account.alert ? toModerationUI(account) : {},\n    profile: profile.filter || profile.blur || profile.alert ? toModerationUI(profile) : {},\n    avatar: {\n      blur: avatarBlur,\n      alert: account.alert || profile.alert,\n      noOverride: avatarNoOverride\n    }\n  };\n}\nfunction moderatePost(subject, opts) {\n  const post = decidePost(subject, opts);\n  const account = decideAccount(subject.author, opts);\n  const profile = decideProfile(subject.author, opts);\n  let quote;\n  let quotedAccount;\n  if (isQuotedPost(subject.embed)) {\n    quote = decideQuotedPost(subject.embed, opts);\n    quotedAccount = decideQuotedPostAccount(subject.embed, opts);\n  } else if (isQuotedPostWithMedia(subject.embed)) {\n    quote = decideQuotedPostWithMedia(subject.embed, opts);\n    quotedAccount = decideQuotedPostWithMediaAccount(subject.embed, opts);\n  }\n  if (quote?.blurMedia) {\n    quote.blur = true;\n  }\n  if (!isModerationDecisionNoop(post) && post.did === opts.userDid) {\n    downgradeDecision(post, \"blur\");\n  }\n  if (account.cause && account.did === opts.userDid) {\n    downgradeDecision(account, \"noop\");\n  }\n  if (profile.cause && profile.did === opts.userDid) {\n    downgradeDecision(profile, \"noop\");\n  }\n  if (quote && !isModerationDecisionNoop(quote) && quote.did === opts.userDid) {\n    downgradeDecision(quote, \"blur\");\n  }\n  if (quotedAccount && !isModerationDecisionNoop(quotedAccount) && quotedAccount.did === opts.userDid) {\n    downgradeDecision(quotedAccount, \"noop\");\n  }\n  const mergedForFeed = takeHighestPriorityDecision(\n    post,\n    account,\n    quote,\n    quotedAccount\n  );\n  const mergedForView = takeHighestPriorityDecision(post, account);\n  const mergedQuote = takeHighestPriorityDecision(quote, quotedAccount);\n  let blurAvatar = false;\n  if ((account.blur || account.blurMedia) && account.cause?.type !== \"muted\") {\n    blurAvatar = true;\n  } else if ((profile.blur || profile.blurMedia) && profile.cause?.type !== \"muted\") {\n    blurAvatar = true;\n  }\n  return {\n    decisions: { post, account, profile, quote, quotedAccount },\n    content: {\n      cause: !isModerationDecisionNoop(mergedForView) ? mergedForView.cause : mergedForFeed.filter ? mergedForFeed.cause : void 0,\n      filter: mergedForFeed.filter,\n      blur: mergedForView.blur,\n      alert: mergedForView.alert,\n      noOverride: mergedForView.noOverride\n    },\n    avatar: {\n      blur: blurAvatar,\n      alert: account.alert || profile.alert,\n      noOverride: account.noOverride || profile.noOverride\n    },\n    embed: !isModerationDecisionNoop(mergedQuote, { ignoreFilter: true }) ? {\n      cause: mergedQuote.cause,\n      blur: mergedQuote.blur,\n      alert: mergedQuote.alert,\n      noOverride: mergedQuote.noOverride\n    } : account.blurMedia ? {\n      cause: account.cause,\n      blur: true,\n      noOverride: account.noOverride\n    } : post.blurMedia ? {\n      cause: post.cause,\n      blur: true,\n      noOverride: post.noOverride\n    } : {}\n  };\n}\nfunction moderateFeedGenerator(subject, opts) {\n  const feedGenerator = decideFeedGenerator(subject, opts);\n  const account = decideAccount(subject.creator, opts);\n  const profile = decideProfile(subject.creator, opts);\n  const merged = takeHighestPriorityDecision(feedGenerator, account);\n  return {\n    decisions: { feedGenerator, account, profile },\n    content: {\n      cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,\n      filter: merged.filter,\n      blur: merged.blur,\n      alert: merged.alert,\n      noOverride: merged.noOverride\n    },\n    avatar: {\n      blur: account.blurMedia || profile.blurMedia,\n      alert: account.alert,\n      noOverride: account.noOverride || profile.noOverride\n    }\n  };\n}\nfunction moderateUserList(subject, opts) {\n  const userList = decideUserList(subject, opts);\n  const account = defs_exports5.isProfileViewBasic(subject.creator) ? decideAccount(subject.creator, opts) : ModerationDecision.noop();\n  const profile = defs_exports5.isProfileViewBasic(subject.creator) ? decideProfile(subject.creator, opts) : ModerationDecision.noop();\n  const merged = takeHighestPriorityDecision(userList, account);\n  return {\n    decisions: { userList, account, profile },\n    content: {\n      cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,\n      filter: merged.filter,\n      blur: merged.blur,\n      alert: merged.alert,\n      noOverride: merged.noOverride\n    },\n    avatar: {\n      blur: account.blurMedia || profile.blurMedia,\n      alert: account.alert,\n      noOverride: account.noOverride || profile.noOverride\n    }\n  };\n}\n\n// src/moderation/const/label-groups.ts\nvar LABEL_GROUPS = {\n  system: {\n    id: \"system\",\n    configurable: false,\n    labels: [LABELS[\"!hide\"], LABELS[\"!no-promote\"], LABELS[\"!warn\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"System\",\n          description: \"Moderator overrides for special cases.\"\n        }\n      }\n    }\n  },\n  legal: {\n    id: \"legal\",\n    configurable: false,\n    labels: [LABELS[\"dmca-violation\"], LABELS[\"doxxing\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Legal\",\n          description: \"Content removed for legal reasons.\"\n        }\n      }\n    }\n  },\n  sexual: {\n    id: \"sexual\",\n    configurable: true,\n    labels: [LABELS[\"porn\"], LABELS[\"sexual\"], LABELS[\"nudity\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Adult Content\",\n          description: \"Content which is sexual in nature.\"\n        }\n      }\n    }\n  },\n  violence: {\n    id: \"violence\",\n    configurable: true,\n    labels: [\n      LABELS[\"nsfl\"],\n      LABELS[\"corpse\"],\n      LABELS[\"gore\"],\n      LABELS[\"torture\"],\n      LABELS[\"self-harm\"]\n    ],\n    strings: {\n      settings: {\n        en: {\n          name: \"Violence\",\n          description: \"Content which is violent or deeply disturbing.\"\n        }\n      }\n    }\n  },\n  intolerance: {\n    id: \"intolerance\",\n    configurable: true,\n    labels: [\n      LABELS[\"intolerant-race\"],\n      LABELS[\"intolerant-gender\"],\n      LABELS[\"intolerant-sexual-orientation\"],\n      LABELS[\"intolerant-religion\"],\n      LABELS[\"intolerant\"],\n      LABELS[\"icon-intolerant\"]\n    ],\n    strings: {\n      settings: {\n        en: {\n          name: \"Intolerance\",\n          description: \"Content or behavior which is hateful or intolerant toward a group of people.\"\n        }\n      }\n    }\n  },\n  rude: {\n    id: \"rude\",\n    configurable: true,\n    labels: [LABELS[\"threat\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Rude\",\n          description: \"Behavior which is rude toward other users.\"\n        }\n      }\n    }\n  },\n  curation: {\n    id: \"curation\",\n    configurable: true,\n    labels: [LABELS[\"spoiler\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Curational\",\n          description: \"Subjective moderation geared towards curating a more positive environment.\"\n        }\n      }\n    }\n  },\n  spam: {\n    id: \"spam\",\n    configurable: true,\n    labels: [LABELS[\"spam\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Spam\",\n          description: \"Content which doesn't add to the conversation.\"\n        }\n      }\n    }\n  },\n  misinfo: {\n    id: \"misinfo\",\n    configurable: true,\n    labels: [\n      LABELS[\"account-security\"],\n      LABELS[\"net-abuse\"],\n      LABELS[\"impersonation\"],\n      LABELS[\"scam\"]\n    ],\n    strings: {\n      settings: {\n        en: {\n          name: \"Misinformation\",\n          description: \"Content which misleads or defrauds users.\"\n        }\n      }\n    }\n  }\n};\n\n// src/bsky-agent.ts\nvar BskyAgent = class extends AtpAgent {\n  constructor() {\n    super(...arguments);\n    this.getTimeline = (params2, opts) => this.api.app.bsky.feed.getTimeline(params2, opts);\n    this.getAuthorFeed = (params2, opts) => this.api.app.bsky.feed.getAuthorFeed(params2, opts);\n    this.getPostThread = (params2, opts) => this.api.app.bsky.feed.getPostThread(params2, opts);\n    this.getPost = (params2) => this.api.app.bsky.feed.post.get(params2);\n    this.getPosts = (params2, opts) => this.api.app.bsky.feed.getPosts(params2, opts);\n    this.getLikes = (params2, opts) => this.api.app.bsky.feed.getLikes(params2, opts);\n    this.getRepostedBy = (params2, opts) => this.api.app.bsky.feed.getRepostedBy(params2, opts);\n    this.getFollows = (params2, opts) => this.api.app.bsky.graph.getFollows(params2, opts);\n    this.getFollowers = (params2, opts) => this.api.app.bsky.graph.getFollowers(params2, opts);\n    this.getProfile = (params2, opts) => this.api.app.bsky.actor.getProfile(params2, opts);\n    this.getProfiles = (params2, opts) => this.api.app.bsky.actor.getProfiles(params2, opts);\n    this.getSuggestions = (params2, opts) => this.api.app.bsky.actor.getSuggestions(params2, opts);\n    this.searchActors = (params2, opts) => this.api.app.bsky.actor.searchActors(params2, opts);\n    this.searchActorsTypeahead = (params2, opts) => this.api.app.bsky.actor.searchActorsTypeahead(params2, opts);\n    this.listNotifications = (params2, opts) => this.api.app.bsky.notification.listNotifications(params2, opts);\n    this.countUnreadNotifications = (params2, opts) => this.api.app.bsky.notification.getUnreadCount(params2, opts);\n  }\n  get app() {\n    return this.api.app;\n  }\n  async post(record) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    record.createdAt = record.createdAt || new Date().toISOString();\n    return this.api.app.bsky.feed.post.create(\n      { repo: this.session.did },\n      record\n    );\n  }\n  async deletePost(postUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const postUrip = new AtUri(postUri);\n    return await this.api.app.bsky.feed.post.delete({\n      repo: postUrip.hostname,\n      rkey: postUrip.rkey\n    });\n  }\n  async like(uri2, cid2) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    return await this.api.app.bsky.feed.like.create(\n      { repo: this.session.did },\n      {\n        subject: { uri: uri2, cid: cid2 },\n        createdAt: new Date().toISOString()\n      }\n    );\n  }\n  async deleteLike(likeUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const likeUrip = new AtUri(likeUri);\n    return await this.api.app.bsky.feed.like.delete({\n      repo: likeUrip.hostname,\n      rkey: likeUrip.rkey\n    });\n  }\n  async repost(uri2, cid2) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    return await this.api.app.bsky.feed.repost.create(\n      { repo: this.session.did },\n      {\n        subject: { uri: uri2, cid: cid2 },\n        createdAt: new Date().toISOString()\n      }\n    );\n  }\n  async deleteRepost(repostUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const repostUrip = new AtUri(repostUri);\n    return await this.api.app.bsky.feed.repost.delete({\n      repo: repostUrip.hostname,\n      rkey: repostUrip.rkey\n    });\n  }\n  async follow(subjectDid) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    return await this.api.app.bsky.graph.follow.create(\n      { repo: this.session.did },\n      {\n        subject: subjectDid,\n        createdAt: new Date().toISOString()\n      }\n    );\n  }\n  async deleteFollow(followUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const followUrip = new AtUri(followUri);\n    return await this.api.app.bsky.graph.follow.delete({\n      repo: followUrip.hostname,\n      rkey: followUrip.rkey\n    });\n  }\n  async upsertProfile(updateFn) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    let retriesRemaining = 5;\n    while (retriesRemaining >= 0) {\n      const existing = await this.com.atproto.repo.getRecord({\n        repo: this.session.did,\n        collection: \"app.bsky.actor.profile\",\n        rkey: \"self\"\n      }).catch((_) => void 0);\n      const updated = await updateFn(existing?.data.value);\n      if (updated) {\n        updated.$type = \"app.bsky.actor.profile\";\n      }\n      const validation = profile_exports.validateRecord(updated);\n      if (!validation.success) {\n        throw validation.error;\n      }\n      try {\n        await this.com.atproto.repo.putRecord({\n          repo: this.session.did,\n          collection: \"app.bsky.actor.profile\",\n          rkey: \"self\",\n          record: updated,\n          swapRecord: existing?.data.cid || null\n        });\n      } catch (e) {\n        if (retriesRemaining > 0 && e instanceof putRecord_exports.InvalidSwapError) {\n          retriesRemaining--;\n          continue;\n        } else {\n          throw e;\n        }\n      }\n      break;\n    }\n  }\n  async mute(actor) {\n    return this.api.app.bsky.graph.muteActor({ actor });\n  }\n  async unmute(actor) {\n    return this.api.app.bsky.graph.unmuteActor({ actor });\n  }\n  async updateSeenNotifications(seenAt) {\n    seenAt = seenAt || new Date().toISOString();\n    return this.api.app.bsky.notification.updateSeen({\n      seenAt\n    });\n  }\n};\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/@atproto/api/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Ccontexts%5CAuthContext.tsx&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22app%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Capp%5Cglobals.css&server=false!":

  !*** ../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Ccontexts%5CAuthContext.tsx&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22app%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Capp%5Cglobals.css&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./contexts/AuthContext.tsx */ \"(app-pages-browser)/./contexts/AuthContext.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/../node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"variable\\\":\\\"--font-inter\\\"}],\\\"variableName\\\":\\\"inter\\\"}\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9QyUzQSU1Q1VzZXJzJTVDQWElNUNPbmVEcml2ZSU1Q0Rlc2t0b3AlNUNTY2hvb2wlMjBXb3JrJTVDQmx1ZXNreS1NZXNzZW5nZXIlNUNibHVlc2t5LW1lc3NlbmdlciU1Q2Zyb250ZW5kJTVDY29udGV4dHMlNUNBdXRoQ29udGV4dC50c3gmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNBYSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q1NjaG9vbCUyMFdvcmslNUNCbHVlc2t5LU1lc3NlbmdlciU1Q2JsdWVza3ktbWVzc2VuZ2VyJTVDbm9kZV9tb2R1bGVzJTVDbmV4dCU1Q2ZvbnQlNUNnb29nbGUlNUN0YXJnZXQuY3NzJTNGJTdCJTIycGF0aCUyMiUzQSUyMmFwcCU1QyU1Q2xheW91dC50c3glMjIlMkMlMjJpbXBvcnQlMjIlM0ElMjJJbnRlciUyMiUyQyUyMmFyZ3VtZW50cyUyMiUzQSU1QiU3QiUyMnN1YnNldHMlMjIlM0ElNUIlMjJsYXRpbiUyMiU1RCUyQyUyMnZhcmlhYmxlJTIyJTNBJTIyLS1mb250LWludGVyJTIyJTdEJTVEJTJDJTIydmFyaWFibGVOYW1lJTIyJTNBJTIyaW50ZXIlMjIlN0QmbW9kdWxlcz1DJTNBJTVDVXNlcnMlNUNBYSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q1NjaG9vbCUyMFdvcmslNUNCbHVlc2t5LU1lc3NlbmdlciU1Q2JsdWVza3ktbWVzc2VuZ2VyJTVDZnJvbnRlbmQlNUNhcHAlNUNnbG9iYWxzLmNzcyZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLDhLQUE2SjtBQUM3SixnZkFBK1Q7QUFDL1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9lMDk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcQWFcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxTY2hvb2wgV29ya1xcXFxCbHVlc2t5LU1lc3NlbmdlclxcXFxibHVlc2t5LW1lc3NlbmdlclxcXFxmcm9udGVuZFxcXFxjb250ZXh0c1xcXFxBdXRoQ29udGV4dC50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXEFhXFxcXE9uZURyaXZlXFxcXERlc2t0b3BcXFxcU2Nob29sIFdvcmtcXFxcQmx1ZXNreS1NZXNzZW5nZXJcXFxcYmx1ZXNreS1tZXNzZW5nZXJcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZm9udFxcXFxnb29nbGVcXFxcdGFyZ2V0LmNzcz97XFxcInBhdGhcXFwiOlxcXCJhcHBcXFxcXFxcXGxheW91dC50c3hcXFwiLFxcXCJpbXBvcnRcXFwiOlxcXCJJbnRlclxcXCIsXFxcImFyZ3VtZW50c1xcXCI6W3tcXFwic3Vic2V0c1xcXCI6W1xcXCJsYXRpblxcXCJdLFxcXCJ2YXJpYWJsZVxcXCI6XFxcIi0tZm9udC1pbnRlclxcXCJ9XSxcXFwidmFyaWFibGVOYW1lXFxcIjpcXFwiaW50ZXJcXFwifVwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcQWFcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxTY2hvb2wgV29ya1xcXFxCbHVlc2t5LU1lc3NlbmdlclxcXFxibHVlc2t5LW1lc3NlbmdlclxcXFxmcm9udGVuZFxcXFxhcHBcXFxcZ2xvYmFscy5jc3NcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Ccontexts%5CAuthContext.tsx&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22app%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Capp%5Cglobals.css&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"9052711eb7dc\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzP2IyZTkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI5MDUyNzExZWI3ZGNcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./contexts/AuthContext.tsx":
/*!**********************************!*\
  !*** ./contexts/AuthContext.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _atproto_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @atproto/api */ \"(app-pages-browser)/../node_modules/@atproto/api/dist/index.js\");\n/* harmony import */ var _atproto_api__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_atproto_api__WEBPACK_IMPORTED_MODULE_2__);\n// File: frontend/contexts/AuthContext.tsx\n/* __next_internal_client_entry_do_not_use__ AuthProvider,useAuth auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n// Create the context with a default value\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    isAuthenticated: false,\n    user: null,\n    agent: null,\n    login: async ()=>false,\n    logout: async ()=>{},\n    loading: true,\n    error: null\n});\n// Provider component that wraps app and makes auth available to any child component\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s();\n    const [isAuthenticated, setIsAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [agent, setAgent] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Initialize auth state from stored session on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initializeAuth = async ()=>{\n            try {\n                const storedSession = localStorage.getItem(\"bsky_session\");\n                if (!storedSession) {\n                    setLoading(false);\n                    return;\n                }\n                const sessionData = JSON.parse(storedSession);\n                const newAgent = new _atproto_api__WEBPACK_IMPORTED_MODULE_2__.BskyAgent({\n                    service: \"https://bsky.social\",\n                    persistSession: (evt, session)=>{\n                        if (evt === \"create\" || evt === \"update\") {\n                            if (session) {\n                                localStorage.setItem(\"bsky_session\", JSON.stringify(session));\n                            }\n                        } else if ([\n                            \"expired\",\n                            \"delete\",\n                            \"create-failed\"\n                        ].includes(evt)) {\n                            localStorage.removeItem(\"bsky_session\");\n                            setIsAuthenticated(false);\n                            setUser(null);\n                        }\n                    }\n                });\n                // Resume session\n                await newAgent.resumeSession(sessionData);\n                // Check if session is valid\n                const { success } = await newAgent.getProfile({\n                    actor: sessionData.did\n                });\n                if (success) {\n                    setAgent(newAgent);\n                    setUser({\n                        did: sessionData.did,\n                        handle: sessionData.handle\n                    });\n                    setIsAuthenticated(true);\n                } else {\n                    // Session is invalid, clear it\n                    localStorage.removeItem(\"bsky_session\");\n                }\n            } catch (err) {\n                console.error(\"Error initializing auth:\", err);\n                localStorage.removeItem(\"bsky_session\");\n                setError(\"Session expired. Please login again.\");\n            } finally{\n                setLoading(false);\n            }\n        };\n        initializeAuth();\n    }, []);\n    // Login function\n    const login = async (identifier, password)=>{\n        setLoading(true);\n        setError(null);\n        try {\n            // Create a new agent if one doesn't exist\n            const newAgent = agent || new _atproto_api__WEBPACK_IMPORTED_MODULE_2__.BskyAgent({\n                service: \"https://bsky.social\",\n                persistSession: (evt, session)=>{\n                    if (evt === \"create\" || evt === \"update\") {\n                        if (session) {\n                            localStorage.setItem(\"bsky_session\", JSON.stringify(session));\n                        }\n                    } else if ([\n                        \"expired\",\n                        \"delete\",\n                        \"create-failed\"\n                    ].includes(evt)) {\n                        localStorage.removeItem(\"bsky_session\");\n                        setIsAuthenticated(false);\n                        setUser(null);\n                    }\n                }\n            });\n            const result = await newAgent.login({\n                identifier,\n                password\n            });\n            if (result.success) {\n                setAgent(newAgent);\n                setUser({\n                    did: newAgent.session.did,\n                    handle: newAgent.session.handle\n                });\n                setIsAuthenticated(true);\n                // Register with our backend\n                try {\n                    var _newAgent_session, _newAgent_session1;\n                    const response = await fetch(\"http://localhost:3001/auth/login\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            did: (_newAgent_session = newAgent.session) === null || _newAgent_session === void 0 ? void 0 : _newAgent_session.did,\n                            handle: (_newAgent_session1 = newAgent.session) === null || _newAgent_session1 === void 0 ? void 0 : _newAgent_session1.handle\n                        }),\n                        credentials: \"include\"\n                    });\n                    if (!response.ok) {\n                        console.error(\"Failed to register with messaging server, but continuing\");\n                    }\n                } catch (err) {\n                    console.error(\"Error registering with messaging server:\", err);\n                // We can continue even if our backend registration fails\n                }\n                return true;\n            }\n            setError(\"Login failed. Please check your credentials.\");\n            return false;\n        } catch (err) {\n            console.error(\"Login error:\", err);\n            setError(err instanceof Error ? err.message : \"Unknown error occurred\");\n            return false;\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Logout function\n    const logout = async ()=>{\n        setLoading(true);\n        try {\n            if (agent && agent.session) {\n                // The AT Protocol SDK doesn't have a logout method,\n                // so we'll just remove the session\n                localStorage.removeItem(\"bsky_session\");\n            }\n            // Also log out from our backend\n            try {\n                await fetch(\"http://localhost:3001/auth/logout\", {\n                    method: \"POST\",\n                    credentials: \"include\"\n                });\n            } catch (err) {\n                console.error(\"Error logging out from messaging server:\", err);\n            }\n            setAgent(null);\n            setUser(null);\n            setIsAuthenticated(false);\n        } catch (err) {\n            console.error(\"Logout error:\", err);\n            setError(err instanceof Error ? err.message : \"Unknown error occurred during logout\");\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Create the value object to provide to consumers\n    const value = {\n        isAuthenticated,\n        user,\n        agent,\n        login,\n        logout,\n        loading,\n        error\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Aa\\\\OneDrive\\\\Desktop\\\\School Work\\\\Bluesky-Messenger\\\\bluesky-messenger\\\\frontend\\\\contexts\\\\AuthContext.tsx\",\n        lineNumber: 218,\n        columnNumber: 10\n    }, this);\n}\n_s(AuthProvider, \"s4EhnON4puKtGLq/qGkhsjePmLs=\");\n_c = AuthProvider;\n// Custom hook for using the auth context\nconst useAuth = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n};\n_s1(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbnRleHRzL0F1dGhDb250ZXh0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMENBQTBDOzs7QUFHd0M7QUFDUjtBQXdCMUUsMENBQTBDO0FBQzFDLE1BQU1LLDRCQUFjTCxvREFBYUEsQ0FBa0I7SUFDakRNLGlCQUFpQjtJQUNqQkMsTUFBTTtJQUNOQyxPQUFPO0lBQ1BDLE9BQU8sVUFBWTtJQUNuQkMsUUFBUSxXQUFhO0lBQ3JCQyxTQUFTO0lBQ1RDLE9BQU87QUFDVDtBQUVBLG9GQUFvRjtBQUM3RSxTQUFTQyxhQUFhLEtBQStCO1FBQS9CLEVBQUVDLFFBQVEsRUFBcUIsR0FBL0I7O0lBQzNCLE1BQU0sQ0FBQ1IsaUJBQWlCUyxtQkFBbUIsR0FBR2IsK0NBQVFBLENBQVU7SUFDaEUsTUFBTSxDQUFDSyxNQUFNUyxRQUFRLEdBQUdkLCtDQUFRQSxDQUFjO0lBQzlDLE1BQU0sQ0FBQ00sT0FBT1MsU0FBUyxHQUFHZiwrQ0FBUUEsQ0FBbUI7SUFDckQsTUFBTSxDQUFDUyxTQUFTTyxXQUFXLEdBQUdoQiwrQ0FBUUEsQ0FBVTtJQUNoRCxNQUFNLENBQUNVLE9BQU9PLFNBQVMsR0FBR2pCLCtDQUFRQSxDQUFnQjtJQUVsRCwrREFBK0Q7SUFDL0RDLGdEQUFTQSxDQUFDO1FBQ1IsTUFBTWlCLGlCQUFpQjtZQUNyQixJQUFJO2dCQUNGLE1BQU1DLGdCQUFnQkMsYUFBYUMsT0FBTyxDQUFDO2dCQUUzQyxJQUFJLENBQUNGLGVBQWU7b0JBQ2xCSCxXQUFXO29CQUNYO2dCQUNGO2dCQUVBLE1BQU1NLGNBQWNDLEtBQUtDLEtBQUssQ0FBQ0w7Z0JBQy9CLE1BQU1NLFdBQVcsSUFBSXZCLG1EQUFTQSxDQUFDO29CQUM3QndCLFNBQVM7b0JBQ1RDLGdCQUFnQixDQUFDQyxLQUFzQkM7d0JBQ3JDLElBQUlELFFBQVEsWUFBWUEsUUFBUSxVQUFVOzRCQUN4QyxJQUFJQyxTQUFTO2dDQUNYVCxhQUFhVSxPQUFPLENBQUMsZ0JBQWdCUCxLQUFLUSxTQUFTLENBQUNGOzRCQUN0RDt3QkFDRixPQUFPLElBQUk7NEJBQUM7NEJBQVc7NEJBQVU7eUJBQWdCLENBQUNHLFFBQVEsQ0FBQ0osTUFBTTs0QkFDL0RSLGFBQWFhLFVBQVUsQ0FBQzs0QkFDeEJwQixtQkFBbUI7NEJBQ25CQyxRQUFRO3dCQUNWO29CQUNGO2dCQUNGO2dCQUVBLGlCQUFpQjtnQkFDakIsTUFBTVcsU0FBU1MsYUFBYSxDQUFDWjtnQkFFN0IsNEJBQTRCO2dCQUM1QixNQUFNLEVBQUVhLE9BQU8sRUFBRSxHQUFHLE1BQU1WLFNBQVNXLFVBQVUsQ0FBQztvQkFBRUMsT0FBT2YsWUFBWWdCLEdBQUc7Z0JBQUM7Z0JBRXZFLElBQUlILFNBQVM7b0JBQ1hwQixTQUFTVTtvQkFDVFgsUUFBUTt3QkFDTndCLEtBQUtoQixZQUFZZ0IsR0FBRzt3QkFDcEJDLFFBQVFqQixZQUFZaUIsTUFBTTtvQkFDNUI7b0JBQ0ExQixtQkFBbUI7Z0JBQ3JCLE9BQU87b0JBQ0wsK0JBQStCO29CQUMvQk8sYUFBYWEsVUFBVSxDQUFDO2dCQUMxQjtZQUNGLEVBQUUsT0FBT08sS0FBSztnQkFDWkMsUUFBUS9CLEtBQUssQ0FBQyw0QkFBNEI4QjtnQkFDMUNwQixhQUFhYSxVQUFVLENBQUM7Z0JBQ3hCaEIsU0FBUztZQUNYLFNBQVU7Z0JBQ1JELFdBQVc7WUFDYjtRQUNGO1FBRUFFO0lBQ0YsR0FBRyxFQUFFO0lBRUwsaUJBQWlCO0lBQ2pCLE1BQU1YLFFBQVEsT0FBT21DLFlBQW9CQztRQUN2QzNCLFdBQVc7UUFDWEMsU0FBUztRQUVULElBQUk7WUFDRiwwQ0FBMEM7WUFDMUMsTUFBTVEsV0FBV25CLFNBQVMsSUFBSUosbURBQVNBLENBQUM7Z0JBQ3RDd0IsU0FBUztnQkFDVEMsZ0JBQWdCLENBQUNDLEtBQXNCQztvQkFDckMsSUFBSUQsUUFBUSxZQUFZQSxRQUFRLFVBQVU7d0JBQ3hDLElBQUlDLFNBQVM7NEJBQ1hULGFBQWFVLE9BQU8sQ0FBQyxnQkFBZ0JQLEtBQUtRLFNBQVMsQ0FBQ0Y7d0JBQ3REO29CQUNGLE9BQU8sSUFBSTt3QkFBQzt3QkFBVzt3QkFBVTtxQkFBZ0IsQ0FBQ0csUUFBUSxDQUFDSixNQUFNO3dCQUMvRFIsYUFBYWEsVUFBVSxDQUFDO3dCQUN4QnBCLG1CQUFtQjt3QkFDbkJDLFFBQVE7b0JBQ1Y7Z0JBQ0Y7WUFDRjtZQUVBLE1BQU04QixTQUFTLE1BQU1uQixTQUFTbEIsS0FBSyxDQUFDO2dCQUNsQ21DO2dCQUNBQztZQUNGO1lBRUEsSUFBSUMsT0FBT1QsT0FBTyxFQUFFO2dCQUNsQnBCLFNBQVNVO2dCQUNUWCxRQUFRO29CQUNOd0IsS0FBS2IsU0FBU0ksT0FBTyxDQUFFUyxHQUFHO29CQUMxQkMsUUFBUWQsU0FBU0ksT0FBTyxDQUFFVSxNQUFNO2dCQUNsQztnQkFDQTFCLG1CQUFtQjtnQkFFbkIsNEJBQTRCO2dCQUM1QixJQUFJO3dCQU9PWSxtQkFDR0E7b0JBUFosTUFBTW9CLFdBQVcsTUFBTUMsTUFBTSxvQ0FBb0M7d0JBQy9EQyxRQUFRO3dCQUNSQyxTQUFTOzRCQUNQLGdCQUFnQjt3QkFDbEI7d0JBQ0FDLE1BQU0xQixLQUFLUSxTQUFTLENBQUM7NEJBQ25CTyxHQUFHLEdBQUViLG9CQUFBQSxTQUFTSSxPQUFPLGNBQWhCSix3Q0FBQUEsa0JBQWtCYSxHQUFHOzRCQUMxQkMsTUFBTSxHQUFFZCxxQkFBQUEsU0FBU0ksT0FBTyxjQUFoQkoseUNBQUFBLG1CQUFrQmMsTUFBTTt3QkFDbEM7d0JBQ0FXLGFBQWE7b0JBQ2Y7b0JBRUEsSUFBSSxDQUFDTCxTQUFTTSxFQUFFLEVBQUU7d0JBQ2hCVixRQUFRL0IsS0FBSyxDQUFDO29CQUNoQjtnQkFDRixFQUFFLE9BQU84QixLQUFLO29CQUNaQyxRQUFRL0IsS0FBSyxDQUFDLDRDQUE0QzhCO2dCQUMxRCx5REFBeUQ7Z0JBQzNEO2dCQUVBLE9BQU87WUFDVDtZQUVBdkIsU0FBUztZQUNULE9BQU87UUFDVCxFQUFFLE9BQU91QixLQUFLO1lBQ1pDLFFBQVEvQixLQUFLLENBQUMsZ0JBQWdCOEI7WUFDOUJ2QixTQUFTdUIsZUFBZVksUUFBUVosSUFBSWEsT0FBTyxHQUFHO1lBQzlDLE9BQU87UUFDVCxTQUFVO1lBQ1JyQyxXQUFXO1FBQ2I7SUFDRjtJQUVBLGtCQUFrQjtJQUNsQixNQUFNUixTQUFTO1FBQ2JRLFdBQVc7UUFFWCxJQUFJO1lBQ0YsSUFBSVYsU0FBU0EsTUFBTXVCLE9BQU8sRUFBRTtnQkFDMUIsb0RBQW9EO2dCQUNwRCxtQ0FBbUM7Z0JBQ25DVCxhQUFhYSxVQUFVLENBQUM7WUFDMUI7WUFFQSxnQ0FBZ0M7WUFDaEMsSUFBSTtnQkFDRixNQUFNYSxNQUFNLHFDQUFxQztvQkFDL0NDLFFBQVE7b0JBQ1JHLGFBQWE7Z0JBQ2Y7WUFDRixFQUFFLE9BQU9WLEtBQUs7Z0JBQ1pDLFFBQVEvQixLQUFLLENBQUMsNENBQTRDOEI7WUFDNUQ7WUFFQXpCLFNBQVM7WUFDVEQsUUFBUTtZQUNSRCxtQkFBbUI7UUFDckIsRUFBRSxPQUFPMkIsS0FBSztZQUNaQyxRQUFRL0IsS0FBSyxDQUFDLGlCQUFpQjhCO1lBQy9CdkIsU0FBU3VCLGVBQWVZLFFBQVFaLElBQUlhLE9BQU8sR0FBRztRQUNoRCxTQUFVO1lBQ1JyQyxXQUFXO1FBQ2I7SUFDRjtJQUVBLGtEQUFrRDtJQUNsRCxNQUFNc0MsUUFBUTtRQUNabEQ7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7SUFDRjtJQUVBLHFCQUFPLDhEQUFDUCxZQUFZb0QsUUFBUTtRQUFDRCxPQUFPQTtrQkFBUTFDOzs7Ozs7QUFDOUM7R0FsTGdCRDtLQUFBQTtBQW9MaEIseUNBQXlDO0FBQ2xDLE1BQU02QyxVQUFVOztJQUF1QnpELE9BQUFBLGlEQUFVQSxDQUFDSTtBQUFXLEVBQUU7SUFBekRxRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb250ZXh0cy9BdXRoQ29udGV4dC50c3g/NmQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlOiBmcm9udGVuZC9jb250ZXh0cy9BdXRoQ29udGV4dC50c3hcclxuJ3VzZSBjbGllbnQnO1xyXG5cclxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBCc2t5QWdlbnQsIEF0cFNlc3Npb25EYXRhLCBBdHBTZXNzaW9uRXZlbnQgfSBmcm9tICdAYXRwcm90by9hcGknO1xyXG5cclxuLy8gRGVmaW5lIHRoZSBpbnRlcmZhY2UgZm9yIGEgdXNlclxyXG5pbnRlcmZhY2UgVXNlciB7XHJcbiAgZGlkOiBzdHJpbmc7XHJcbiAgaGFuZGxlOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8vIERlZmluZSB0aGUgdHlwZSBmb3Igb3VyIGF1dGhlbnRpY2F0aW9uIGNvbnRleHRcclxuaW50ZXJmYWNlIEF1dGhDb250ZXh0VHlwZSB7XHJcbiAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xyXG4gIHVzZXI6IFVzZXIgfCBudWxsO1xyXG4gIGFnZW50OiBCc2t5QWdlbnQgfCBudWxsO1xyXG4gIGxvZ2luOiAoaWRlbnRpZmllcjogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xyXG4gIGxvZ291dDogKCkgPT4gUHJvbWlzZTx2b2lkPjtcclxuICBsb2FkaW5nOiBib29sZWFuO1xyXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsO1xyXG59XHJcblxyXG4vLyBQcm9wcyBmb3IgdGhlIEF1dGhQcm92aWRlciBjb21wb25lbnRcclxuaW50ZXJmYWNlIEF1dGhQcm92aWRlclByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG59XHJcblxyXG4vLyBDcmVhdGUgdGhlIGNvbnRleHQgd2l0aCBhIGRlZmF1bHQgdmFsdWVcclxuY29uc3QgQXV0aENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEF1dGhDb250ZXh0VHlwZT4oe1xyXG4gIGlzQXV0aGVudGljYXRlZDogZmFsc2UsXHJcbiAgdXNlcjogbnVsbCxcclxuICBhZ2VudDogbnVsbCxcclxuICBsb2dpbjogYXN5bmMgKCkgPT4gZmFsc2UsXHJcbiAgbG9nb3V0OiBhc3luYyAoKSA9PiB7fSxcclxuICBsb2FkaW5nOiB0cnVlLFxyXG4gIGVycm9yOiBudWxsLFxyXG59KTtcclxuXHJcbi8vIFByb3ZpZGVyIGNvbXBvbmVudCB0aGF0IHdyYXBzIGFwcCBhbmQgbWFrZXMgYXV0aCBhdmFpbGFibGUgdG8gYW55IGNoaWxkIGNvbXBvbmVudFxyXG5leHBvcnQgZnVuY3Rpb24gQXV0aFByb3ZpZGVyKHsgY2hpbGRyZW4gfTogQXV0aFByb3ZpZGVyUHJvcHMpOiBKU1guRWxlbWVudCB7XHJcbiAgY29uc3QgW2lzQXV0aGVudGljYXRlZCwgc2V0SXNBdXRoZW50aWNhdGVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZTxVc2VyIHwgbnVsbD4obnVsbCk7XHJcbiAgY29uc3QgW2FnZW50LCBzZXRBZ2VudF0gPSB1c2VTdGF0ZTxCc2t5QWdlbnQgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG5cclxuICAvLyBJbml0aWFsaXplIGF1dGggc3RhdGUgZnJvbSBzdG9yZWQgc2Vzc2lvbiBvbiBjb21wb25lbnQgbW91bnRcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3QgaW5pdGlhbGl6ZUF1dGggPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmVkU2Vzc2lvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdic2t5X3Nlc3Npb24nKTtcclxuXHJcbiAgICAgICAgaWYgKCFzdG9yZWRTZXNzaW9uKSB7XHJcbiAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNlc3Npb25EYXRhID0gSlNPTi5wYXJzZShzdG9yZWRTZXNzaW9uKSBhcyBBdHBTZXNzaW9uRGF0YTtcclxuICAgICAgICBjb25zdCBuZXdBZ2VudCA9IG5ldyBCc2t5QWdlbnQoe1xyXG4gICAgICAgICAgc2VydmljZTogJ2h0dHBzOi8vYnNreS5zb2NpYWwnLFxyXG4gICAgICAgICAgcGVyc2lzdFNlc3Npb246IChldnQ6IEF0cFNlc3Npb25FdmVudCwgc2Vzc2lvbj86IEF0cFNlc3Npb25EYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldnQgPT09ICdjcmVhdGUnIHx8IGV2dCA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICAgICAgICBpZiAoc2Vzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jza3lfc2Vzc2lvbicsIEpTT04uc3RyaW5naWZ5KHNlc3Npb24pKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoWydleHBpcmVkJywgJ2RlbGV0ZScsICdjcmVhdGUtZmFpbGVkJ10uaW5jbHVkZXMoZXZ0KSkge1xyXG4gICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdic2t5X3Nlc3Npb24nKTtcclxuICAgICAgICAgICAgICBzZXRJc0F1dGhlbnRpY2F0ZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgIHNldFVzZXIobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlc3VtZSBzZXNzaW9uXHJcbiAgICAgICAgYXdhaXQgbmV3QWdlbnQucmVzdW1lU2Vzc2lvbihzZXNzaW9uRGF0YSk7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHNlc3Npb24gaXMgdmFsaWRcclxuICAgICAgICBjb25zdCB7IHN1Y2Nlc3MgfSA9IGF3YWl0IG5ld0FnZW50LmdldFByb2ZpbGUoeyBhY3Rvcjogc2Vzc2lvbkRhdGEuZGlkIH0pO1xyXG5cclxuICAgICAgICBpZiAoc3VjY2Vzcykge1xyXG4gICAgICAgICAgc2V0QWdlbnQobmV3QWdlbnQpO1xyXG4gICAgICAgICAgc2V0VXNlcih7XHJcbiAgICAgICAgICAgIGRpZDogc2Vzc2lvbkRhdGEuZGlkLFxyXG4gICAgICAgICAgICBoYW5kbGU6IHNlc3Npb25EYXRhLmhhbmRsZSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2V0SXNBdXRoZW50aWNhdGVkKHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBTZXNzaW9uIGlzIGludmFsaWQsIGNsZWFyIGl0XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYnNreV9zZXNzaW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbml0aWFsaXppbmcgYXV0aDonLCBlcnIpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdic2t5X3Nlc3Npb24nKTtcclxuICAgICAgICBzZXRFcnJvcignU2Vzc2lvbiBleHBpcmVkLiBQbGVhc2UgbG9naW4gYWdhaW4uJyk7XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaW5pdGlhbGl6ZUF1dGgoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIExvZ2luIGZ1bmN0aW9uXHJcbiAgY29uc3QgbG9naW4gPSBhc3luYyAoaWRlbnRpZmllcjogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XHJcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgc2V0RXJyb3IobnVsbCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IGFnZW50IGlmIG9uZSBkb2Vzbid0IGV4aXN0XHJcbiAgICAgIGNvbnN0IG5ld0FnZW50ID0gYWdlbnQgfHwgbmV3IEJza3lBZ2VudCh7XHJcbiAgICAgICAgc2VydmljZTogJ2h0dHBzOi8vYnNreS5zb2NpYWwnLFxyXG4gICAgICAgIHBlcnNpc3RTZXNzaW9uOiAoZXZ0OiBBdHBTZXNzaW9uRXZlbnQsIHNlc3Npb24/OiBBdHBTZXNzaW9uRGF0YSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGV2dCA9PT0gJ2NyZWF0ZScgfHwgZXZ0ID09PSAndXBkYXRlJykge1xyXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbikge1xyXG4gICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdic2t5X3Nlc3Npb24nLCBKU09OLnN0cmluZ2lmeShzZXNzaW9uKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSBpZiAoWydleHBpcmVkJywgJ2RlbGV0ZScsICdjcmVhdGUtZmFpbGVkJ10uaW5jbHVkZXMoZXZ0KSkge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYnNreV9zZXNzaW9uJyk7XHJcbiAgICAgICAgICAgIHNldElzQXV0aGVudGljYXRlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHNldFVzZXIobnVsbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXdBZ2VudC5sb2dpbih7XHJcbiAgICAgICAgaWRlbnRpZmllcixcclxuICAgICAgICBwYXNzd29yZCxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICBzZXRBZ2VudChuZXdBZ2VudCk7XHJcbiAgICAgICAgc2V0VXNlcih7XHJcbiAgICAgICAgICBkaWQ6IG5ld0FnZW50LnNlc3Npb24hLmRpZCxcclxuICAgICAgICAgIGhhbmRsZTogbmV3QWdlbnQuc2Vzc2lvbiEuaGFuZGxlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNldElzQXV0aGVudGljYXRlZCh0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gUmVnaXN0ZXIgd2l0aCBvdXIgYmFja2VuZFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDEvYXV0aC9sb2dpbicsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgZGlkOiBuZXdBZ2VudC5zZXNzaW9uPy5kaWQsXHJcbiAgICAgICAgICAgICAgaGFuZGxlOiBuZXdBZ2VudC5zZXNzaW9uPy5oYW5kbGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcmVnaXN0ZXIgd2l0aCBtZXNzYWdpbmcgc2VydmVyLCBidXQgY29udGludWluZycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVnaXN0ZXJpbmcgd2l0aCBtZXNzYWdpbmcgc2VydmVyOicsIGVycik7XHJcbiAgICAgICAgICAvLyBXZSBjYW4gY29udGludWUgZXZlbiBpZiBvdXIgYmFja2VuZCByZWdpc3RyYXRpb24gZmFpbHNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZXRFcnJvcignTG9naW4gZmFpbGVkLiBQbGVhc2UgY2hlY2sgeW91ciBjcmVkZW50aWFscy4nKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIGVycm9yOicsIGVycik7XHJcbiAgICAgIHNldEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBvY2N1cnJlZCcpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBMb2dvdXQgZnVuY3Rpb25cclxuICBjb25zdCBsb2dvdXQgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChhZ2VudCAmJiBhZ2VudC5zZXNzaW9uKSB7XHJcbiAgICAgICAgLy8gVGhlIEFUIFByb3RvY29sIFNESyBkb2Vzbid0IGhhdmUgYSBsb2dvdXQgbWV0aG9kLFxyXG4gICAgICAgIC8vIHNvIHdlJ2xsIGp1c3QgcmVtb3ZlIHRoZSBzZXNzaW9uXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2Jza3lfc2Vzc2lvbicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBbHNvIGxvZyBvdXQgZnJvbSBvdXIgYmFja2VuZFxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDEvYXV0aC9sb2dvdXQnLCB7XHJcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvZ2dpbmcgb3V0IGZyb20gbWVzc2FnaW5nIHNlcnZlcjonLCBlcnIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZXRBZ2VudChudWxsKTtcclxuICAgICAgc2V0VXNlcihudWxsKTtcclxuICAgICAgc2V0SXNBdXRoZW50aWNhdGVkKGZhbHNlKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdMb2dvdXQgZXJyb3I6JywgZXJyKTtcclxuICAgICAgc2V0RXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6ICdVbmtub3duIGVycm9yIG9jY3VycmVkIGR1cmluZyBsb2dvdXQnKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIENyZWF0ZSB0aGUgdmFsdWUgb2JqZWN0IHRvIHByb3ZpZGUgdG8gY29uc3VtZXJzXHJcbiAgY29uc3QgdmFsdWUgPSB7XHJcbiAgICBpc0F1dGhlbnRpY2F0ZWQsXHJcbiAgICB1c2VyLFxyXG4gICAgYWdlbnQsXHJcbiAgICBsb2dpbixcclxuICAgIGxvZ291dCxcclxuICAgIGxvYWRpbmcsXHJcbiAgICBlcnJvcixcclxuICB9O1xyXG5cclxuICByZXR1cm4gPEF1dGhDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+e2NoaWxkcmVufTwvQXV0aENvbnRleHQuUHJvdmlkZXI+O1xyXG59XHJcblxyXG4vLyBDdXN0b20gaG9vayBmb3IgdXNpbmcgdGhlIGF1dGggY29udGV4dFxyXG5leHBvcnQgY29uc3QgdXNlQXV0aCA9ICgpOiBBdXRoQ29udGV4dFR5cGUgPT4gdXNlQ29udGV4dChBdXRoQ29udGV4dCk7Il0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJCc2t5QWdlbnQiLCJBdXRoQ29udGV4dCIsImlzQXV0aGVudGljYXRlZCIsInVzZXIiLCJhZ2VudCIsImxvZ2luIiwibG9nb3V0IiwibG9hZGluZyIsImVycm9yIiwiQXV0aFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJzZXRJc0F1dGhlbnRpY2F0ZWQiLCJzZXRVc2VyIiwic2V0QWdlbnQiLCJzZXRMb2FkaW5nIiwic2V0RXJyb3IiLCJpbml0aWFsaXplQXV0aCIsInN0b3JlZFNlc3Npb24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2Vzc2lvbkRhdGEiLCJKU09OIiwicGFyc2UiLCJuZXdBZ2VudCIsInNlcnZpY2UiLCJwZXJzaXN0U2Vzc2lvbiIsImV2dCIsInNlc3Npb24iLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiaW5jbHVkZXMiLCJyZW1vdmVJdGVtIiwicmVzdW1lU2Vzc2lvbiIsInN1Y2Nlc3MiLCJnZXRQcm9maWxlIiwiYWN0b3IiLCJkaWQiLCJoYW5kbGUiLCJlcnIiLCJjb25zb2xlIiwiaWRlbnRpZmllciIsInBhc3N3b3JkIiwicmVzdWx0IiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiY3JlZGVudGlhbHMiLCJvayIsIkVycm9yIiwibWVzc2FnZSIsInZhbHVlIiwiUHJvdmlkZXIiLCJ1c2VBdXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contexts/AuthContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \**********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={686:(e,r,t)=>{var n=t(808);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},808:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(686);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxhQUFhLE9BQU8sY0FBYyxhQUFhLDBCQUEwQixvQ0FBb0MsOEJBQThCLHVCQUF1QixRQUFRLGtCQUFrQixXQUFXLGdCQUFnQiw4QkFBOEIscUJBQXFCLGdCQUFnQixtQkFBbUIsaUJBQWlCLGdDQUFnQyxXQUFXLE9BQU8sMkJBQTJCLDZCQUE2QixLQUFLLDhDQUE4QyxvQkFBb0IsTUFBTSxTQUFTLE9BQU8sbUJBQW1CLE9BQU8sWUFBWSxnQ0FBZ0MsY0FBYyxPQUFPLGdDQUFnQyxPQUFPLGdDQUFnQyxxQ0FBcUMsNENBQTRDLDJDQUEyQyxTQUFTLGdCQUFnQixJQUFJLHdCQUF3QixPQUFPLFlBQVksT0FBTyx1QkFBdUIscUJBQXFCLE9BQU8sdUJBQXVCLE9BQU8sZ0NBQWdDLE9BQU8sZUFBZSxvQkFBb0IsaUJBQWlCLHNDQUFzQyxlQUFlLE9BQU8sZ0JBQWdCLDRCQUE0QixHQUFHLHVDQUF1QyxlQUFlLE9BQU8sZ0JBQWdCLDRCQUE0QixHQUFHLDJDQUEyQyxrQkFBa0IsMkNBQTJDLEtBQUssNkJBQTZCLDJCQUEyQixNQUFNLE9BQU8sZUFBZSxFQUFFLG9CQUFvQixvQkFBb0IsS0FBSyxHQUFHLFNBQVMsd0JBQXdCLE9BQU8sYUFBYSx3Q0FBd0MsWUFBWSxzQkFBc0IsWUFBWSxPQUFPLDZCQUE2QixxQkFBcUIsT0FBTyxxQkFBcUIsT0FBTyxNQUFNLGVBQWUsUUFBUSxHQUFHLFNBQVMscUJBQXFCLHdDQUF3QyxzQkFBc0IscUJBQXFCLE9BQU8sYUFBYSxHQUFHLHlCQUF5Qix5Q0FBeUMsYUFBYSxZQUFZLHdCQUF3QixNQUFNLDBEQUEwRCxZQUFZLDZCQUE2QixrQkFBa0Isb0JBQW9CLHFCQUFxQixhQUFhLGdFQUFnRSxZQUFZLE9BQU8sTUFBTSwrQ0FBK0MsS0FBSyxvQ0FBb0MsYUFBYSw0QkFBNEIsU0FBUyx5QkFBeUIsK0JBQStCLFVBQVUsaUJBQWlCLE1BQU0sY0FBYyxrQkFBa0IsU0FBUyxnQkFBZ0Isc0JBQXNCLFdBQVcsc0JBQXNCLFNBQVMsb0RBQW9ELGlEQUFpRCwyQ0FBMkMsUUFBUSxzQkFBc0IsZ0JBQWdCLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzP2NkZWQiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezY4NjooZSxyLHQpPT57dmFyIG49dCg4MDgpO3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIGE9dHlwZW9mIGRvY3VtZW50PT09XCJ1bmRlZmluZWRcIjt2YXIgbz1BcnJheS5wcm90b3R5cGUuZm9yRWFjaDtmdW5jdGlvbiBkZWJvdW5jZShlLHIpe3ZhciB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpczt2YXIgaT1hcmd1bWVudHM7dmFyIGE9ZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCl7cmV0dXJuIGUuYXBwbHkobixpKX07Y2xlYXJUaW1lb3V0KHQpO3Q9c2V0VGltZW91dChhLHIpfX1mdW5jdGlvbiBub29wKCl7fWZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwoZSl7dmFyIHI9aVtlXTtpZighcil7aWYoZG9jdW1lbnQuY3VycmVudFNjcmlwdCl7cj1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31lbHNle3ZhciB0PWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO3ZhciBhPXRbdC5sZW5ndGgtMV07aWYoYSl7cj1hLnNyY319aVtlXT1yfXJldHVybiBmdW5jdGlvbihlKXtpZighcil7cmV0dXJuIG51bGx9dmFyIHQ9ci5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTt2YXIgaT10JiZ0WzFdO2lmKCFpKXtyZXR1cm5bci5yZXBsYWNlKFwiLmpzXCIsXCIuY3NzXCIpXX1pZighZSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19cmV0dXJuIGUuc3BsaXQoXCIsXCIpLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFJlZ0V4cChcIlwiLmNvbmNhdChpLFwiXFxcXC5qcyRcIiksXCJnXCIpO3JldHVybiBuKHIucmVwbGFjZSh0LFwiXCIuY29uY2F0KGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLGkpLFwiLmNzc1wiKSkpfSkpfX1mdW5jdGlvbiB1cGRhdGVDc3MoZSxyKXtpZighcil7aWYoIWUuaHJlZil7cmV0dXJufXI9ZS5ocmVmLnNwbGl0KFwiP1wiKVswXX1pZighaXNVcmxSZXF1ZXN0KHIpKXtyZXR1cm59aWYoZS5pc0xvYWRlZD09PWZhbHNlKXtyZXR1cm59aWYoIXJ8fCEoci5pbmRleE9mKFwiLmNzc1wiKT4tMSkpe3JldHVybn1lLnZpc2l0ZWQ9dHJ1ZTt2YXIgdD1lLmNsb25lTm9kZSgpO3QuaXNMb2FkZWQ9ZmFsc2U7dC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsKGZ1bmN0aW9uKCl7aWYodC5pc0xvYWRlZCl7cmV0dXJufXQuaXNMb2FkZWQ9dHJ1ZTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KSk7dC5ocmVmPVwiXCIuY29uY2F0KHIsXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtpZihlLm5leHRTaWJsaW5nKXtlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsZS5uZXh0U2libGluZyl9ZWxzZXtlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodCl9fWZ1bmN0aW9uIGdldFJlbG9hZFVybChlLHIpe3ZhciB0O2U9bihlLHtzdHJpcFdXVzpmYWxzZX0pO3Iuc29tZSgoZnVuY3Rpb24obil7aWYoZS5pbmRleE9mKHIpPi0xKXt0PW59fSkpO3JldHVybiB0fWZ1bmN0aW9uIHJlbG9hZFN0eWxlKGUpe2lmKCFlKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7dmFyIHQ9ZmFsc2U7by5jYWxsKHIsKGZ1bmN0aW9uKHIpe2lmKCFyLmhyZWYpe3JldHVybn12YXIgbj1nZXRSZWxvYWRVcmwoci5ocmVmLGUpO2lmKCFpc1VybFJlcXVlc3Qobikpe3JldHVybn1pZihyLnZpc2l0ZWQ9PT10cnVlKXtyZXR1cm59aWYobil7dXBkYXRlQ3NzKHIsbik7dD10cnVlfX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRBbGwoKXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwibGlua1wiKTtvLmNhbGwoZSwoZnVuY3Rpb24oZSl7aWYoZS52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufXVwZGF0ZUNzcyhlKX0pKX1mdW5jdGlvbiBpc1VybFJlcXVlc3QoZSl7aWYoIS9eW2EtekEtWl1bYS16QS1aXFxkK1xcLS5dKjovLnRlc3QoZSkpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihhKXtjb25zb2xlLmxvZyhcIm5vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTU1wiKTtyZXR1cm4gbm9vcH12YXIgdD1nZXRDdXJyZW50U2NyaXB0VXJsKGUpO2Z1bmN0aW9uIHVwZGF0ZSgpe3ZhciBlPXQoci5maWxlbmFtZSk7dmFyIG49cmVsb2FkU3R5bGUoZSk7aWYoci5sb2NhbHMpe2NvbnNvbGUubG9nKFwiW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpO3JldHVybn1pZihuKXtjb25zb2xlLmxvZyhcIltITVJdIGNzcyByZWxvYWQgJXNcIixlLmpvaW4oXCIgXCIpKX1lbHNle2NvbnNvbGUubG9nKFwiW0hNUl0gUmVsb2FkIGFsbCBjc3NcIik7cmVsb2FkQWxsKCl9fXJldHVybiBkZWJvdW5jZSh1cGRhdGUsNTApfX0sODA4OmU9PntmdW5jdGlvbiBub3JtYWxpemVVcmwoZSl7cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbihlLHIpe3N3aXRjaChyKXtjYXNlXCIuLlwiOmUucG9wKCk7YnJlYWs7Y2FzZVwiLlwiOmJyZWFrO2RlZmF1bHQ6ZS5wdXNoKHIpfXJldHVybiBlfSksW10pLmpvaW4oXCIvXCIpfWUuZXhwb3J0cz1mdW5jdGlvbihlKXtlPWUudHJpbSgpO2lmKC9eZGF0YTovaS50ZXN0KGUpKXtyZXR1cm4gZX12YXIgcj1lLmluZGV4T2YoXCIvL1wiKSE9PS0xP2Uuc3BsaXQoXCIvL1wiKVswXStcIi8vXCI6XCJcIjt2YXIgdD1lLnJlcGxhY2UobmV3IFJlZ0V4cChyLFwiaVwiKSxcIlwiKS5zcGxpdChcIi9cIik7dmFyIG49dFswXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLFwiXCIpO3RbMF09XCJcIjt2YXIgaT1ub3JtYWxpemVVcmwodCk7cmV0dXJuIHIrbitpfX19O3ZhciByPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIG49clt0XTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXJbdF09e2V4cG9ydHM6e319O3ZhciBhPXRydWU7dHJ5e2VbdF0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7YT1mYWxzZX1maW5hbGx5e2lmKGEpZGVsZXRlIHJbdF19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg2ODYpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"}":
/*!************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/next/font/google/target.css?{"path":"app\\layout.tsx","import":"Inter","arguments":[{"subsets":["latin"],"variable":"--font-inter"}],"variableName":"inter"} ***!
  \************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Inter_d65c78', '__Inter_Fallback_d65c78'\",\"fontStyle\":\"normal\"},\"className\":\"__className_d65c78\",\"variable\":\"__variable_d65c78\"};\n    if(true) {\n      // 1748310922945\n      var cssReload = __webpack_require__(/*! ../node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/../node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbmV4dC9mb250L2dvb2dsZS90YXJnZXQuY3NzP3tcInBhdGhcIjpcImFwcFxcXFxsYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkludGVyXCIsXCJhcmd1bWVudHNcIjpbe1wic3Vic2V0c1wiOltcImxhdGluXCJdLFwidmFyaWFibGVcIjpcIi0tZm9udC1pbnRlclwifV0sXCJ2YXJpYWJsZU5hbWVcIjpcImludGVyXCJ9IiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLFNBQVMsZ0ZBQWdGO0FBQzNHLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDBNQUFrSyxjQUFjLHNEQUFzRDtBQUNwUSxNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvbmV4dC9mb250L2dvb2dsZS90YXJnZXQuY3NzPzdlNmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0eWxlXCI6e1wiZm9udEZhbWlseVwiOlwiJ19fSW50ZXJfZDY1Yzc4JywgJ19fSW50ZXJfRmFsbGJhY2tfZDY1Yzc4J1wiLFwiZm9udFN0eWxlXCI6XCJub3JtYWxcIn0sXCJjbGFzc05hbWVcIjpcIl9fY2xhc3NOYW1lX2Q2NWM3OFwiLFwidmFyaWFibGVcIjpcIl9fdmFyaWFibGVfZDY1Yzc4XCJ9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3NDgzMTA5MjI5NDVcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiQzovVXNlcnMvQWEvT25lRHJpdmUvRGVza3RvcC9TY2hvb2wgV29yay9CbHVlc2t5LU1lc3Nlbmdlci9ibHVlc2t5LW1lc3Nlbmdlci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi9fbmV4dC9cIixcImVzTW9kdWxlXCI6ZmFsc2UsXCJsb2NhbHNcIjp0cnVlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIFxuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/font/google/target.css?{\"path\":\"app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe[prop-missing]\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      } // TODO(luna): This will currently only throw if the function component\n      // tries to access React/ReactDOM/props. We should probably make this throw\n      // in simple components too\n\n\n      var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n      // component, which we don't yet support. Attach a noop catch handler to\n      // silence the error.\n      // TODO: Implement component stacks for async client components?\n\n      if (maybePromise && typeof maybePromise.catch === 'function') {\n        maybePromise.catch(function () {});\n      }\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement$1(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement$1(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement$1(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (hasOwnProperty.call(props, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(props).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV = jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!*******************************************************************!*\
  !*** ../node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUMsQ0FBQztBQUNGLEVBQUUsK0xBQXNFO0FBQ3hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81M2EzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Ccontexts%5CAuthContext.tsx&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cnode_modules%5Cnext%5Cfont%5Cgoogle%5Ctarget.css%3F%7B%22path%22%3A%22app%5C%5Clayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22variable%22%3A%22--font-inter%22%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=C%3A%5CUsers%5CAa%5COneDrive%5CDesktop%5CSchool%20Work%5CBluesky-Messenger%5Cbluesky-messenger%5Cfrontend%5Capp%5Cglobals.css&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);